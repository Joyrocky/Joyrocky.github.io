<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Alist - 网盘列表部署</title>
    <url>/posts/65e45135.html</url>
    <content><![CDATA[<p><em>详细部署细节见官方文档<a href="https://alist-doc.nn.ci/docs/%EF%BC%9B">https://alist-doc.nn.ci/docs/；</a></em></p>
<p><em>本部署教程是在腾讯云搭载2G，2核的Ubuntu 20.04轻量级服务器上进行实现的</em></p>
<h2 id="使用docker部署"><a class="markdownIt-Anchor" href="#使用docker部署"></a> 使用Docker部署</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker部署Alist容器</span></span><br><span class="line">sudo docker run -d --restart=always -v /home/superman/alist:/opt/alist/data -p 5244:5244 --name=<span class="string">&quot;alist&quot;</span> xhofe/alist:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志找到初始密码</span></span><br><span class="line">docker logs alist</span><br></pre></td></tr></table></figure>
<br />
<span id="more"></span>
<h2 id="后端设置"><a class="markdownIt-Anchor" href="#后端设置"></a> 后端设置</h2>
<p>修改登录密码和<code>WebDAV</code>的密码：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220627/6FgMwSHRrfUQ.png?imageslim" alt="rocky" /></p>
<br />
<h2 id="添加账号"><a class="markdownIt-Anchor" href="#添加账号"></a> 添加账号</h2>
<p>此处的官方文档非常详细，所以这里就不进行赘述了，直接按照文档或者视频来进行就没有什么太大问题；若是你对于其他的网盘也感兴趣，按照官方的文档进行部署即可。</p>
<ul>
<li><a href="https://alist-doc.nn.ci/docs/driver/aliyundrive">阿里云盘</a></li>
<li><a href="https://alist-doc.nn.ci/docs/driver/baidu">百度云盘</a></li>
<li><a href="https://alist-doc.nn.ci/docs/driver/onedrive">Onedrive</a></li>
<li><a href="https://alist-doc.nn.ci/docs/driver/thunder">迅雷云盘</a></li>
<li><a href="https://alist-doc.nn.ci/docs/driver/189">天翼云盘</a></li>
</ul>
<br />
<p>最后的效果应该如下类似：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220627/l4KhEXlKHcJr.png?imageslim" alt="rocky" /></p>
<p><img data-src="https://image.zxkidea.top/blog/20220627/rGJjErN4JHxP.png?imageslim" alt="rocky" /></p>
<br />
<h2 id="webdav配置"><a class="markdownIt-Anchor" href="#webdav配置"></a> WebDAV配置</h2>
<p>最后我们进行<code>WebDAV</code>配置，这里搬运官方的配置参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>值</th>
</tr>
</thead>
<tbody>
<tr>
<td>链接</td>
<td>http[s]😕/domain:port/dav/</td>
</tr>
<tr>
<td>主机</td>
<td>domain:port</td>
</tr>
<tr>
<td>路径</td>
<td>dav</td>
</tr>
<tr>
<td>协议</td>
<td>http/https</td>
</tr>
<tr>
<td>端口</td>
<td>同 web 端口</td>
</tr>
<tr>
<td>账号</td>
<td>见后台</td>
</tr>
<tr>
<td>密码</td>
<td>见后台</td>
</tr>
</tbody>
</table>
<br/>
<ul>
<li><strong>设置移动端</strong></li>
</ul>
<p>对于<code>Android</code>手机，我在Google商店下载的<code>CX文件管理器</code>，这款软件小巧简单，仅有5.6M大小，功能强大，可以实现<code>WebDAV</code>的功能，对比其他竞品，文件的预览功能和视频在线播放功能也毫不逊色，最关键的是这个软件没有广告，非常良心，强烈安利。</p>
<br/>
<p>没有Google商店或者不能下载的小伙伴们可以在下面的地址进行下载：</p>
<p><code>CX文件管理器</code>：<a href="https://www.apkmirror.com/?post_type=app_release&amp;searchtype=apk&amp;s=%09+Cx+File+Explorer">下载地址</a></p>
<p>进入<code>CX文件管理器</code>之后，我们选择<code>网络</code>的<code>Tab</code>，点击<code>新位置</code>，选择<code>远程存储</code>中的<code>WebDAV</code>，按照以下方法进行配置并得到网盘列表：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220627/EWMD9UFvPH7e.png?imageslim" alt="rocky" /></p>
<br/>
<ul>
<li>
<p><strong>设置PC端</strong></p>
<p>添加一个网络位置</p>
<p><img data-src="https://image.zxkidea.top/blog/20220705/vylPGlI3hTyp.png?imageslim" alt="rocky" /></p>
<p>一直选择下一步，直到出现远程连接的提示，然后输入你<code>Alist</code>网站后台的<code>WebDAV</code>账号和密码，最后为你本地的网络位置命名为<code>我的云盘</code>就可以看到在本地挂载成功了：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220705/A8mU5G1eqYw6.png?imageslim" alt="rocky" /></p>
<blockquote>
<p><font color = red size = 4>注意：</font>在添加的网络位置创建文件，对应网盘也会立刻创建，删除也会同步；但是在<code>我的云盘</code>预览文件则没有响应，若是有查看文件的需求，则移步网页版点击文件进行查看；若是有更改并同步的需求，则可以将<code>我的云盘</code>中的文件复制到本地进行打开，并进行更改，然后再复制回原来的位置覆盖即可。</p>
</blockquote>
<br/>
</li>
</ul>
<h2 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h2>
<p>对访问的网盘路径进行加密：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220705/dYLP9qmaJIkd.png?imageslim" alt="rocky" /></p>
<p>设置密码：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220705/nWrBrenIgILQ.png?imageslim" alt="rocky" /></p>
<p>注销，因为管理员权限不受影响；设置成功后只有该路径是需要密码的：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220705/hCWvNtetU9Db.png?imageslim" alt="rocky" /></p>
<br/>
<h2 id="修改样式"><a class="markdownIt-Anchor" href="#修改样式"></a> 修改样式</h2>
<p>可以参考<a href="https://alist-doc.nn.ci/docs/style/">这里</a>，我采用的是<code>随机二次元背景图样式</code>，前端好的同学也可以自定义样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 这里添加到自定义head处</span><br><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.chakra-ui-light</span>&#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://www.dmoe.cc/random.php&quot;</span>) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-repeat</span>:no-repeat;<span class="attribute">background-size</span>:cover;<span class="attribute">background-attachment</span>:fixed;<span class="attribute">background-position</span>-x:center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main-box</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chakra-ui-light</span> <span class="selector-class">.main-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff70</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.chakra-ui-light</span> <span class="selector-class">.readme-box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: white <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.readme-box</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"># 这里添加到自定义<span class="selector-tag">body</span>处</span><br><span class="line"># 我修改了一下live2d的位置和大小</span><br><span class="line">&lt;script <span class="attribute">src</span>=&quot;https://eqcn.ajz.miesnfu.com/wp-content/plugins/wp-<span class="number">3</span>d-pony/live2dw/lib/L2Dwidget.min.js<span class="string">&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    L2Dwidget.init(&#123;</span></span><br><span class="line"><span class="string">        &quot;</span>model<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">            jsonPath: &quot;</span>https://blog.imlete.cn/live2d/assets/weier.model.json<span class="string">&quot;,&lt;!--这里改模型，前面后面都要改--&gt;</span></span><br><span class="line"><span class="string">            &quot;</span>scale<span class="string">&quot;: 0.8</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;</span>display<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>position<span class="string">&quot;: &quot;</span>right<span class="string">&quot;,&lt;!--设置看板娘的上下左右位置--&gt;</span></span><br><span class="line"><span class="string">            &quot;</span>width<span class="string">&quot;: 80,</span></span><br><span class="line"><span class="string">            &quot;</span>height<span class="string">&quot;: 160,</span></span><br><span class="line"><span class="string">            &quot;</span>hOffset<span class="string">&quot;: 50,</span></span><br><span class="line"><span class="string">            &quot;</span>vOffset<span class="string">&quot;: -10</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;</span>mobile<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>show<span class="string">&quot;: true,</span></span><br><span class="line"><span class="string">            &quot;</span>scale<span class="string">&quot;: 0.5</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        &quot;</span>react<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>opacityDefault<span class="string">&quot;: 1,&lt;!--设置透明度--&gt;</span></span><br><span class="line"><span class="string">            &quot;</span>opacityOnHover<span class="string">&quot;: 0.2</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://image.zxkidea.top/blog/20220705/MrcGNRHWGsCh.png?imageslim" alt="rocky" /></p>
<p>返回主页查看效果大致是这样的，就大功告成了§(<em>￣▽￣</em>)§：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220705/hbNuiaoVdltY.png?imageslim" alt="rocky" /></p>
]]></content>
      <categories>
        <category>容器部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>BiliHelper-personal脚本部署</title>
    <url>/posts/f6844a3f.html</url>
    <content><![CDATA[<p><em>本部署教程是在腾讯云搭载2G，2核的Ubuntu 20.04轻量级服务器上进行实现的。</em></p>
<hr />
<ol>
<li>
<p><strong>安装docker</strong></p>
<br/>
</li>
<li>
<p><strong>使用命令拉取镜像</strong></p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull lkeme/bilihelper-personal</span><br></pre></td></tr></table></figure>
<br/>
<ol start="3">
<li><strong>通过配置文件传入参数</strong></li>
</ol>
<ul>
<li>下载<a href="https://file.zxkidea.top/index.php">配置文件1</a>和<a href="https://file.zxkidea.top/user.ini">配置文件2</a></li>
<li>修改</li>
<li>通过以下的命令进行挂载并运行</li>
</ul>
<span id="more"></span>
<blockquote>
<p>注：挂载前必须提前把文件下载在宿主机对应目录下-user.ini/index.php</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --name BiliHelper -itd --<span class="built_in">rm</span> -v /home/superman/BiliHelper_conf/user.ini:/app/conf/user.ini lkeme/bilihelper-personal -e MIRRORS=6</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li>相关参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用github镜像加速</span></span><br><span class="line"></span><br><span class="line">$ -e MIRRORS=0 <span class="comment"># 使用 github.com </span></span><br><span class="line">$ -e MIRRORS=1 <span class="comment"># 使用 ghproxy.com</span></span><br><span class="line">$ -e MIRRORS=2 <span class="comment"># 使用 fastgit.org</span></span><br><span class="line">$ -e MIRRORS=3 <span class="comment"># 使用 hub.gitfast.tk</span></span><br><span class="line">$ -e MIRRORS=4 <span class="comment"># 使用 hub.gitslow.tk</span></span><br><span class="line">$ -e MIRRORS=5 <span class="comment"># 使用 hub.verge.tk</span></span><br><span class="line">$ -e MIRRORS=6 <span class="comment"># 使用 gh.api.99988866.xyz</span></span><br><span class="line">$ -e MIRRORS=custom -e CUSTOM_CLONE_URL=https://github.com/lkeme/BiliHelper-personal.git <span class="comment"># 使用 自定义克隆地址</span></span><br><span class="line"></span><br><span class="line">-it 前台运行</span><br><span class="line">-itd 后台运行</span><br><span class="line">-v 本地文件:容器内部文件 ==&gt; 挂载本地文件到容器中。本地文件路径随便变，容器内部文件路径不能变。</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li>使用模式2进行登录</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置文件里设置好，发送完短信 </span></span><br><span class="line">sudo docker attach BiliHelper <span class="comment"># 进去容器</span></span><br><span class="line"><span class="comment"># 同时可以监视容器运行情况</span></span><br><span class="line">sudo docker logs BiliHelper</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若运行正常则会需要输入短信验证码完全启动，如下图</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：若运行正常，此时CRTL-c会直接停止容器，此时可以使用CTRL-p，CTRL-q键序列从容器中分离并保持其运行</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若不想影响原容器工作，可以使用--no-stdin参数：</span></span><br><span class="line">sudo docker attach --no-stdin BiliHelper</span><br><span class="line"><span class="comment"># 这样不附加 stdin ，也就不会有输入影响容器的运行，这个终端需要推出时，ctrl + c 即可。</span></span><br></pre></td></tr></table></figure>
<p><img data-src="https://image.zxkidea.top/blog/20220603/l0uc1L9CuaDv.png?imageslim" alt="rocky" /></p>
<br/>
<ol start="4">
<li>
<p><strong>监控脚本配置</strong></p>
<p>如果你将 BiliHelper-personal 部署到线上服务器时，则需要配置一个进程监控器来监测 <code>php index.php</code> 命令，在它意外退出时自动重启。</p>
</li>
</ol>
<br/>
<ul>
<li>首先执行php -v是否安装php，否则：<code>sudo apt install php7.4-cli</code></li>
</ul>
<br/>
<ul>
<li>设置systemd脚本：<code>sudo vi /usr/lib/systemd/system/bilibili.service</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/lib/systemd/system/bilibili.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=BiliHelper Manager</span><br><span class="line">Documentation=https://github.com/lkeme/BiliHelper-personal</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/bin/php /path/to/your/BiliHelper-personal/index.php</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li>
<p>查找 Docker 容器内文件系统在宿主机上的位置</p>
<p>Docker 文件系统是在宿主机上完成 Merge 后，再挂载到容器内的，我们可以通过 docker inspect 命令快速定位容器文件系统在宿主机上对应的目录：</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker inspect --format=<span class="string">&#x27;&#123;&#123;.GraphDriver.Data.MergedDir&#125;&#125;&#x27;</span> 23b72a9479eb</span><br><span class="line"></span><br><span class="line">/var/lib/docker/overlay2/72191c356b1ca3af7e8b77682fa0014ad439aecd1273f1b1c3b7c399b1ebf5c7/merged</span><br></pre></td></tr></table></figure>
<p><code>/var/lib/docker/overlay2/72191c356b1ca3af7e8b77682fa0014ad439aecd1273f1b1c3b7c399b1ebf5c7/merged</code>文件夹，即为容器的文件系统。</p>
<br/>
<ul>
<li>
<p>修改systemd脚本的index.php路径：</p>
<p><code>sudo vi /usr/lib/systemd/system/bilibili.service</code></p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># /usr/lib/systemd/system/bilibili.service</span></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=BiliHelper Manager</span><br><span class="line">Documentation=https://github.com/lkeme/BiliHelper-personal</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=5</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/usr/bin/php /var/lib/docker/overlay2/72191c356b1ca3af7e8b77682fa0014ad439aecd1273f1b1c3b7c399b1ebf5c7/merged/app/index.php</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>容器部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos管理笔记</title>
    <url>/posts/6be227cb.html</url>
    <content><![CDATA[<h1 id="创建用户"><a class="markdownIt-Anchor" href="#创建用户"></a> 创建用户</h1>
<h2 id="1-创建新用户"><a class="markdownIt-Anchor" href="#1-创建新用户"></a> 1. 创建新用户</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建用户名为common_usr1的用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># adduser common_usr1</span></span><br><span class="line"><span class="comment"># 为新用户设置密码</span></span><br><span class="line">[root@localhost ~]<span class="comment"># passwd common_usr1</span></span><br><span class="line"><span class="comment"># 永久性删除用户账号</span></span><br><span class="line">[root@localhost ~]<span class="comment"># userdel peter</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupdel peter</span></span><br><span class="line"><span class="comment"># 强制删除该用户的主目录和主目录下的所有文件和子目录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># userdel -rf username</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统中有哪些用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cut -d : -f 1 /etc/passwd</span></span><br><span class="line"><span class="comment"># 查看可以登录系统的用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># cat /etc/passwd | grep -v /sbin/nologin | cut -d : -f 1</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<br/>
<h2 id="2-创建用户组"><a class="markdownIt-Anchor" href="#2-创建用户组"></a> 2. 创建用户组</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建test用户组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># groupadd test  </span></span><br><span class="line"><span class="comment"># 为用户组设置密码：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd test</span></span><br><span class="line"><span class="comment"># 新建用户同时增加工作组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd -g test phpq </span></span><br><span class="line"><span class="comment"># 给已有的用户增加工作组</span></span><br><span class="line">[root@localhost ~]<span class="comment"># gpasswd -a username groupname </span></span><br><span class="line"><span class="comment">#修改默认的目录所属组别为新的组swgroup</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chgrp swgroup /home/srv1</span></span><br></pre></td></tr></table></figure>
<br/>
<h2 id="3-授权"><a class="markdownIt-Anchor" href="#3-授权"></a> 3. 授权</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为新用户授予使用sudo的权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># sudoer</span></span><br><span class="line">bash: sudoers: 未找到命令...</span><br><span class="line">[root@localhost ~]<span class="comment"># whereis sudoers</span></span><br><span class="line">sudoers: /etc/sudoers /etc/sudoers.d /usr/share/man/man5/sudoers.5.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看拥有sudo权限的用户</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ls -l /etc/sudoers</span></span><br><span class="line">-r--r-----. 1 root root 4328 11月 28 2019 /etc/sudoers</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加修改权限</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod -v u+w /etc/sudoers</span></span><br><span class="line">mode of <span class="string">&quot;/etc/sudoers&quot;</span> changed from 0440 (r--r-----) to 0640 (rw-r-----)</span><br><span class="line">[root@localhost ~]<span class="comment"># vim /etc/sudoers</span></span><br><span class="line"><span class="comment">## Allow root to run any commands anywher  </span></span><br><span class="line">root    ALL=(ALL)       ALL</span><br><span class="line"><span class="comment">#这个是新增的用户</span></span><br><span class="line">common_usr1  ALL=(ALL)       ALL  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 收回读写权限并登录</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chmod -v u-w /etc/sudoers</span></span><br><span class="line">mode of <span class="string">&quot;/etc/sudoers&quot;</span> changed from 0640 (rw-r-----) to 0440 (r--r-----)</span><br><span class="line">[root@localhost ~]<span class="comment"># su common_usr1</span></span><br><span class="line">[common_usr1@localhost ~]$ </span><br><span class="line"></span><br><span class="line"><span class="comment"># 把 /var/run/httpd.pid 的所有者设置 root：</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown root /var/run/httpd.pid</span></span><br><span class="line"><span class="comment"># 将文件 file1.txt 的拥有者设为 runoob，群体的使用者 runoobgroup :</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown runoob:runoobgroup file1.txt</span></span><br><span class="line"><span class="comment"># 将/home/admin目录下的所有文件与子目录的拥有者皆设为 runoob，</span></span><br><span class="line"><span class="comment"># 群体的使用者 runoobgroup:</span></span><br><span class="line">[root@localhost ~]<span class="comment"># chown -R runoob:runoobgroup /home/admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 还可以通过WinSCP在root下更改文件的属性；选择文件(夹)的拥有者、组和权限</span></span><br></pre></td></tr></table></figure>
<br/>
<br/>
<h1 id="分区扩容"><a class="markdownIt-Anchor" href="#分区扩容"></a> 分区扩容</h1>
<h2 id="1-查看分区信息"><a class="markdownIt-Anchor" href="#1-查看分区信息"></a> 1. 查看分区信息</h2>
<h3 id="查看系统分区设备"><a class="markdownIt-Anchor" href="#查看系统分区设备"></a> 查看系统分区设备</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsblk</span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0  1.1T  0 disk </span><br><span class="line">├─sda1            8:1    0  200M  0 part /boot/efi</span><br><span class="line">├─sda2            8:2    0    1G  0 part /boot</span><br><span class="line">└─sda3            8:3    0  1.1T  0 part </span><br><span class="line">  ├─centos-root 253:0    0   50G  0 lvm  /</span><br><span class="line">  ├─centos-swap 253:1    0    4G  0 lvm  [SWAP]</span><br><span class="line">  └─centos-home 253:2    0    1T  0 lvm  /home</span><br><span class="line">sdb               8:16   0  3.7T  0 disk </span><br></pre></td></tr></table></figure>
<br/>
<h3 id="查看sdb是否含有数据信息此时没有"><a class="markdownIt-Anchor" href="#查看sdb是否含有数据信息此时没有"></a> 查看sdb是否含有数据信息(此时没有)</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">blkid</span><br><span class="line">/dev/sda1: SEC_TYPE=<span class="string">&quot;msdos&quot;</span> UUID=<span class="string">&quot;4356-DCC4&quot;</span> TYPE=<span class="string">&quot;vfat&quot;</span> PARTLABEL=<span class="string">&quot;EFI System Partition&quot;</span> PARTUUID=<span class="string">&quot;4d6eb8ab-acd6-4f48-9908-398bca19c0a6&quot;</span> </span><br><span class="line">/dev/sda2: UUID=<span class="string">&quot;cbb7e05d-a88b-4308-8579-6397843e05fa&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> PARTUUID=<span class="string">&quot;6e746fcd-213a-4f4a-9abe-66fdde143691&quot;</span> </span><br><span class="line">/dev/sda3: UUID=<span class="string">&quot;gAm3AP-ud6Z-sWVc-br5j-svWQ-S1Wn-PmjObd&quot;</span> TYPE=<span class="string">&quot;LVM2_member&quot;</span> PARTUUID=<span class="string">&quot;90ab026e-99ac-4fdd-8af9-206319a4a6f2&quot;</span> </span><br><span class="line">/dev/mapper/centos-root: UUID=<span class="string">&quot;f875dbf5-e470-444d-890e-b83fab3173a8&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br><span class="line">/dev/mapper/centos-swap: UUID=<span class="string">&quot;32fc5b12-0527-43eb-8618-8a1744e2f9a4&quot;</span> TYPE=<span class="string">&quot;swap&quot;</span> </span><br><span class="line">/dev/mapper/centos-home: UUID=<span class="string">&quot;2e9c3c57-05b0-4b0d-a41a-7dfbe35c2893&quot;</span> TYPE=<span class="string">&quot;xfs&quot;</span> </span><br></pre></td></tr></table></figure>
<br/>
<h3 id="块设备-分区和逻辑卷的详细概述"><a class="markdownIt-Anchor" href="#块设备-分区和逻辑卷的详细概述"></a> 块设备、分区和逻辑卷的详细概述</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk -l</span><br><span class="line">磁盘 /dev/sdb：4000.2 GB, 4000225165312 字节，7812939776 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：262144 字节 / 262144 字节</span><br><span class="line"></span><br><span class="line">WARNING: fdisk GPT support is currently new, and therefore <span class="keyword">in</span> an experimental phase. Use at your own discretion.</span><br><span class="line"></span><br><span class="line">磁盘 /dev/sda：1199.7 GB, 1199705161728 字节，2343174144 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：262144 字节 / 262144 字节</span><br><span class="line">磁盘标签类型：gpt</span><br><span class="line">Disk identifier: A4033C2E-3513-4243-A3F2-D7CAC717ED88</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#         Start          End    Size  Type            Name</span></span><br><span class="line"> 1         2048       411647    200M  EFI System      EFI System Partition</span><br><span class="line"> 2       411648      2508799      1G  Microsoft basic </span><br><span class="line"> 3      2508800   2343172095    1.1T  Linux LVM       </span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos-root：53.7 GB, 53687091200 字节，104857600 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：262144 字节 / 262144 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos-swap：4294 MB, 4294967296 字节，8388608 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：262144 字节 / 262144 字节</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">磁盘 /dev/mapper/centos-home：1140.4 GB, 1140435451904 字节，2227412992 个扇区</span><br><span class="line">Units = 扇区 of 1 * 512 = 512 bytes</span><br><span class="line">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class="line">I/O 大小(最小/最佳)：262144 字节 / 262144 字节</span><br></pre></td></tr></table></figure>
<br/>
<h2 id="2-管理分区"><a class="markdownIt-Anchor" href="#2-管理分区"></a> 2. 管理分区</h2>
<h3 id="fdisk函数用于进行创建管理和删除分区"><a class="markdownIt-Anchor" href="#fdisk函数用于进行创建管理和删除分区"></a> fdisk函数用于进行创建，管理和删除分区</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建分区</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># fdisk /dev/sdb</span></span><br><span class="line">命令(输入 m 获取帮助)：m</span><br><span class="line">命令操作</span><br><span class="line">   a   toggle a bootable flag</span><br><span class="line">   b   edit bsd disklabel</span><br><span class="line">   c   toggle the dos compatibility flag</span><br><span class="line">   d   delete a partition</span><br><span class="line">   g   create a new empty GPT partition table</span><br><span class="line">   G   create an IRIX (SGI) partition table</span><br><span class="line">   l   list known partition types</span><br><span class="line">   m   <span class="built_in">print</span> this menu</span><br><span class="line">   n   add a new partition</span><br><span class="line">   o   create a new empty DOS partition table</span><br><span class="line">   p   <span class="built_in">print</span> the partition table</span><br><span class="line">   q   quit without saving changes</span><br><span class="line">   s   create a new empty Sun disklabel</span><br><span class="line">   t   change a partition<span class="string">&#x27;s system id</span></span><br><span class="line"><span class="string">   u   change display/entry units</span></span><br><span class="line"><span class="string">   v   verify the partition table</span></span><br><span class="line"><span class="string">   w   write table to disk and exit</span></span><br><span class="line"><span class="string">   x   extra functionality (experts only)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">命令(输入 m 获取帮助)：n</span></span><br><span class="line"><span class="string">Partition type:</span></span><br><span class="line"><span class="string">   p   primary (0 primary, 0 extended, 4 free)</span></span><br><span class="line"><span class="string">   e   extended</span></span><br><span class="line"><span class="string">Select (default p): p</span></span><br><span class="line"><span class="string">分区号 (1-4，默认 1)：1</span></span><br><span class="line"><span class="string">起始 扇区 (2048-4294967295，默认为 2048)：</span></span><br><span class="line"><span class="string">将使用默认值 2048</span></span><br><span class="line"><span class="string">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-4294967294，默认为 4294967294)：</span></span><br><span class="line"><span class="string">将使用默认值 4294967294</span></span><br><span class="line"><span class="string">分区 1 已设置为 Linux 类型，大小设为 2 TiB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">命令(输入 m 获取帮助)：w</span></span><br><span class="line"><span class="string">The partition table has been altered!</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 删除分区</span></span><br><span class="line"><span class="string"># 删除分区前需要先umount卸载分区</span></span><br><span class="line"><span class="string">[root@freeman ~]# fdisk /dev/sdb   &lt;-进入sdb硬盘</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command (m for help): p             &lt;- 输入p打印当前硬盘的分区信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/sdb: 5368 MB, 5368709120 bytes</span></span><br><span class="line"><span class="string">255 heads, 63 sectors/track, 652 cylinders</span></span><br><span class="line"><span class="string">Units = cylinders of 16065 * 512 = 8225280 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">Disk identifier: 0xcca98924</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   Device Boot      Start         End      Blocks   Id  System</span></span><br><span class="line"><span class="string">/dev/sdb1               1         523     4200966   83  Linux</span></span><br><span class="line"><span class="string">/dev/sdb2             524         537      112455   83  Linux</span></span><br><span class="line"><span class="string">/dev/sdb3             538         563      208845    5  Extended</span></span><br><span class="line"><span class="string">/dev/sdb5             538         563      208813+  83  Linux</span></span><br><span class="line"><span class="string">/dev/sdb6             409         422      112423+  83  Linux</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Command (m for help): d     &lt;- 输入d删除分区</span></span><br><span class="line"><span class="string">Partition number (1-5):     &lt;- 输入要删除的分区编号</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">Command (m for help): w     &lt;- 分区删除完毕，输入w，写入磁盘分区表</span></span><br><span class="line"><span class="string">The partition table has been altered!</span></span><br></pre></td></tr></table></figure>
<br/>
<h2 id="3-挂载分区"><a class="markdownIt-Anchor" href="#3-挂载分区"></a> 3. 挂载分区</h2>
<h3 id="格式化分区"><a class="markdownIt-Anchor" href="#格式化分区"></a> 格式化分区</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看生成的分区</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># lsblk</span></span><br><span class="line">NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda               8:0    0  1.1T  0 disk </span><br><span class="line">├─sda1            8:1    0  200M  0 part /boot/efi</span><br><span class="line">├─sda2            8:2    0    1G  0 part /boot</span><br><span class="line">└─sda3            8:3    0  1.1T  0 part </span><br><span class="line">  ├─centos-root 253:0    0   50G  0 lvm  /</span><br><span class="line">  ├─centos-swap 253:1    0    4G  0 lvm  [SWAP]</span><br><span class="line">  └─centos-home 253:2    0    1T  0 lvm  /home</span><br><span class="line">sdb               8:16   0  3.7T  0 disk </span><br><span class="line">└─sdb1            8:17   0    2T  0 part </span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化分区</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># mkfs.xfs -f /dev/sdb1</span></span><br><span class="line">meta-data=/dev/sdb1              isize=512    agcount=32, agsize=16777216 blks</span><br><span class="line">         =                       sectsz=512   attr=2, projid32bit=1</span><br><span class="line">         =                       crc=1        finobt=0, sparse=0</span><br><span class="line">data     =                       bsize=4096   blocks=536870655, imaxpct=5</span><br><span class="line">         =                       sunit=64     swidth=64 blks</span><br><span class="line">naming   =version 2              bsize=4096   ascii-ci=0 ftype=1</span><br><span class="line"><span class="built_in">log</span>      =internal <span class="built_in">log</span>           bsize=4096   blocks=262144, version=2</span><br><span class="line">         =                       sectsz=512   sunit=64 blks, lazy-count=1</span><br><span class="line">realtime =none                   extsz=4096   blocks=0, rtextents=0</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="挂载分区"><a class="markdownIt-Anchor" href="#挂载分区"></a> 挂载分区</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将/dev/sdb1分区挂载到/home</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># mount /dev/sdb1 /home</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看分区挂载情况</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># df -h</span></span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs                  94G     0   94G    0% /dev</span><br><span class="line">tmpfs                     94G     0   94G    0% /dev/shm</span><br><span class="line">tmpfs                     94G   13M   94G    1% /run</span><br><span class="line">tmpfs                     94G     0   94G    0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/centos-root   50G   32G   19G   64% /</span><br><span class="line">/dev/sda2               1014M  202M  813M   20% /boot</span><br><span class="line">/dev/sda1                200M   12M  189M    6% /boot/efi</span><br><span class="line">/dev/sdb1                2.0T   34M  2.0T    1% /home</span><br><span class="line">tmpfs                     19G   32K   19G    1% /run/user/1001</span><br><span class="line">tmpfs                     19G   12K   19G    1% /run/user/42</span><br><span class="line">tmpfs                     19G     0   19G    0% /run/user/1012</span><br><span class="line">tmpfs                     19G     0   19G    0% /run/user/1013</span><br><span class="line">tmpfs                     19G     0   19G    0% /run/user/1014</span><br><span class="line">tmpfs                     19G     0   19G    0% /run/user/1010</span><br><span class="line">tmpfs                     19G     0   19G    0% /run/user/0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动挂载</span></span><br><span class="line"><span class="comment"># 打开/etc/fstab在最后添加挂载配置</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># vi /etc/fstab</span></span><br><span class="line"></span><br><span class="line">/dev/mapper/centos-root /                       xfs     defaults        0 0</span><br><span class="line">UUID=cbb7e05d-a88b-4308-8579-6397843e05fa /boot                   xfs     defaults        0 0</span><br><span class="line">UUID=4356-DCC4          /boot/efi               vfat    <span class="built_in">umask</span>=0077,shortname=winnt 0 0</span><br><span class="line">/dev/mapper/centos-home /home                   xfs     defaults        0 0</span><br><span class="line">/dev/mapper/centos-swap swap                    swap    defaults        0 0</span><br><span class="line">/dev/sdb1               /home                   xfs     defaults        0 0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载分区</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># umount /dev/sdb1</span></span><br></pre></td></tr></table></figure>
<br/>
<h2 id="4-扩容超过2t的磁盘"><a class="markdownIt-Anchor" href="#4-扩容超过2t的磁盘"></a> 4. 扩容超过2T的磁盘</h2>
<h3 id="磁盘格式化"><a class="markdownIt-Anchor" href="#磁盘格式化"></a> 磁盘格式化</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果次硬盘之前有过分区，则需要先进行格式化</span></span><br><span class="line">mkfs.xfs -f /dev/sdb</span><br><span class="line">mkfs -t ext4 /dev/sdb</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="使用parted进行gpt格式分区"><a class="markdownIt-Anchor" href="#使用parted进行gpt格式分区"></a> 使用parted进行GPT格式分区</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 对新磁盘进行分区，由于fdisk仅支持2T以内的磁盘分区</span></span><br><span class="line">(base) [root@localhost ~]<span class="comment"># parted /dev/sdb</span></span><br><span class="line">(parted) <span class="built_in">help</span>　　　　　　　　　　　　　　　　<span class="comment"># 可以查看帮助信息  </span></span><br><span class="line">(parted) mklabel gpt　　　　　　　　　　　　<span class="comment"># 执行命令mklabel gpt，把sdb改成gpt大分区格式  </span></span><br><span class="line">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you  </span><br><span class="line">want to <span class="built_in">continue</span>?  </span><br><span class="line">Yes/No? <span class="built_in">yes</span>  </span><br><span class="line">(parted) mkpart primary 0 4001GB　　　　　<span class="comment"># 创建分区  </span></span><br><span class="line">Warning: The resulting partition is not properly aligned <span class="keyword">for</span> best performance.  </span><br><span class="line">Ignore/Cancel? cancel　　　　　　　　　　　<span class="comment"># 注意，此处提示为磁盘为对齐，会影响性能，所以在此处要进行对齐  </span></span><br></pre></td></tr></table></figure>
<br/>
<h3 id="查看磁盘参数"><a class="markdownIt-Anchor" href="#查看磁盘参数"></a> 查看磁盘参数</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 开启新进程查看参数</span></span><br><span class="line"><span class="built_in">cat</span> /sys/block/sdb/queue/optimal_io_size  </span><br><span class="line"><span class="built_in">cat</span> /sys/block/sdb/queue/minimum_io_size  </span><br><span class="line"><span class="built_in">cat</span> /sys/block/sdb/alignment_offset  </span><br><span class="line"><span class="built_in">cat</span> /sys/block/sdb/queue/physical_block_size  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果optimal_io_size不为0,暂定是1048576，则可以用optimal_io_size的值加上alignment_offset的值，</p>
<p>然后除以physical_block_size的值，就是起始扇区的位置了，如上面的例子中，可以用这个公式算出来起始扇区的设定值：</p>
<p>(1048576 + 0) / 512 = 2048</p>
<p>如果optimal_io_size为0，那么我们最好直接使用起始扇区的默认值2048。</p>
</blockquote>
<br/>
<h3 id="分区设置"><a class="markdownIt-Anchor" href="#分区设置"></a> 分区设置</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(parted) mkpart primary 2048s 100%  </span><br><span class="line">(parted) <span class="built_in">print</span>                                                            </span><br><span class="line">Model: AVAGO MR9361-8i (scsi)</span><br><span class="line">Disk /dev/sdb: 4000GB</span><br><span class="line">Sector size (logical/physical): 512B/512B</span><br><span class="line">Partition Table: gpt</span><br><span class="line">Disk Flags: </span><br><span class="line"></span><br><span class="line">Number  Start   End     Size    File system  Name     标志</span><br><span class="line"> 1      1049kB  4000GB  4000GB  xfs          primary</span><br><span class="line"></span><br><span class="line">(parted) align-check optimal 1                                            </span><br><span class="line">1 aligned</span><br><span class="line">(parted) quit </span><br></pre></td></tr></table></figure>
<br/>
<h3 id="挂载磁盘"><a class="markdownIt-Anchor" href="#挂载磁盘"></a> 挂载磁盘</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看磁盘情况</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="comment"># 再次格式化磁盘</span></span><br><span class="line">mkfs.xfs -f /dev/sdb</span><br><span class="line">mkfs -t ext4 /dev/sdb</span><br><span class="line"><span class="comment"># 挂载新磁盘到/mnt</span></span><br><span class="line">mount /dev/sdb /mnt</span><br><span class="line"><span class="comment"># 设置自动挂载</span></span><br><span class="line">vim /etc/fstab  </span><br><span class="line"><span class="comment">#写入/etc/fstab  </span></span><br><span class="line">/dev/sdb                /mnt        xfs           defaults        0 0  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否挂载</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="comment"># 挂载fstab中未挂载的磁盘</span></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 再次查看是否挂载</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure>
<br/>
<h2 id="5-记devsdb磁盘分割为超2t分区和lvm扩容区"><a class="markdownIt-Anchor" href="#5-记devsdb磁盘分割为超2t分区和lvm扩容区"></a> 5. 记/dev/sdb磁盘分割为超2T分区和LVM扩容区</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先进行part分区成超2T区域</span></span><br><span class="line">parted /dev/sdb</span><br><span class="line">mklabel gpt</span><br><span class="line">mkpart primary 0 3400GB <span class="comment"># 创建分区</span></span><br><span class="line">Ignore/Cancel? cancel　　　　　　　　　　　<span class="comment"># 注意，此处提示为磁盘为对齐，会影响性能，所以在此处要进行对齐</span></span><br><span class="line"><span class="comment"># 检查硬盘空闲空间</span></span><br><span class="line">parted /dev/sdb <span class="built_in">print</span> free</span><br><span class="line"><span class="comment"># 调整分区大小</span></span><br><span class="line"><span class="comment"># 例如，我们将要重新调整（增加）分区 3 的结束位置，从 28GB 到 33GB。</span></span><br><span class="line"><span class="comment"># sudo parted [Disk Name] [resizepart] [Partition Number] [Partition New End Size]</span></span><br><span class="line">sudo parted /dev/sdb resizepart 3 33.0GB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认分区是否已经扩容</span></span><br><span class="line">sudo parted /dev/sdb <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新调整文件系统大小。</span></span><br><span class="line">sudo resize2fs /dev/sdb3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，确认分区是否已经扩容。</span></span><br><span class="line"><span class="built_in">df</span> -h /dev/sdb[1-3]</span><br><span class="line"></span><br><span class="line"><span class="comment"># parted删除分区，例如我们删除3号分区</span></span><br><span class="line"><span class="comment"># sudo parted [Disk Name] [rm] [Partition Number]</span></span><br><span class="line">sudo parted /dev/sdb <span class="built_in">rm</span> 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># parted更改分区标志</span></span><br><span class="line"><span class="comment"># sudo parted [Disk Name] [set] [Partition Number] [Flags Name] [Flag On/Off]</span></span><br><span class="line">sudo parted /dev/sdb <span class="built_in">set</span> 2 lvm on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证分区标志</span></span><br><span class="line">sudo parted /dev/sdb <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用剩余空间创建分区</span></span><br><span class="line">parted /dev/sdb mkpart primary ext4 (上一个分区结束的位置)GB 100%</span><br><span class="line"><span class="built_in">print</span> <span class="comment"># 查看看分区情况</span></span><br><span class="line"><span class="comment"># 此时sdb应有两个分区sdb1和sdb2</span></span><br><span class="line">quit</span><br><span class="line"></span><br><span class="line"><span class="comment"># mkfs格式化分区</span></span><br><span class="line">mkfs.ext4 /dev/sdb1</span><br><span class="line">mkfs.xfs -f /dev/sdb2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将sdb1挂载到/mnt</span></span><br><span class="line">mount /dev/sdb1 /mnt</span><br><span class="line"><span class="comment"># 设置自动挂载</span></span><br><span class="line">vim /etc/fstab  </span><br><span class="line"><span class="comment">#写入/etc/fstab  </span></span><br><span class="line">/dev/sdb1                /mnt        ext4           defaults        0 0 </span><br><span class="line"><span class="comment"># 查看是否挂载</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"><span class="comment"># 挂载fstab中未挂载的磁盘</span></span><br><span class="line">mount -a</span><br><span class="line"><span class="comment"># 再次查看是否挂载</span></span><br><span class="line"><span class="built_in">df</span> -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将sdb2挂载到/home; 对/dev/mapper/centos-home进行扩容</span></span><br><span class="line"><span class="comment"># 备份home分区文件</span></span><br><span class="line">tar cvf /tmp/home.tar /home</span><br><span class="line">umount /home （卸载）</span><br><span class="line">fuser -km /home/（终止）</span><br><span class="line"><span class="comment"># 卷扩容，添加进LVM组</span></span><br><span class="line">lvm</span><br><span class="line">pvcreate /dev/sdb2　　　　　　　　　<span class="comment"># 初始化sdb2分区</span></span><br><span class="line">vgextend centos /dev/sdb2　　　<span class="comment"># 将初始化过的分区加入到虚拟卷组centos组</span></span><br><span class="line">vgdisplay -v                  <span class="comment"># 查看逻辑卷情况</span></span><br><span class="line">lvextend -L +500G(sdb2容量) /dev/centos/home　　<span class="comment"># 扩展已有卷的容量 </span></span><br><span class="line"><span class="comment"># 将/centos-home挂载到/home</span></span><br><span class="line">mount /dev/mapper/centos-home /home </span><br><span class="line">lsblk          <span class="comment"># 查看分区设备情况</span></span><br><span class="line">xfs_growfs /dev/mapper/centos-home   <span class="comment"># 扩展/home文件系统</span></span><br><span class="line"><span class="built_in">df</span> -h  <span class="comment"># 查看分区挂载情况</span></span><br><span class="line">reboot</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br/>
<br/>
<h1 id="安装-nvidia-显卡驱动"><a class="markdownIt-Anchor" href="#安装-nvidia-显卡驱动"></a> 安装 Nvidia 显卡驱动</h1>
<p><a href="https://www.techgrow.cn/posts/3a164cac.html">原博客地址</a></p>
<blockquote>
<p><strong>系统环境</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br><span class="line">Linux centos7.6 3.10.0-957.5.1.el7.x86_64 <span class="comment">#1 SMP Fri Feb 1 14:54:57 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>检查显卡的识别状况</strong></p>
</blockquote>
<p>在执行下述所有步骤之前，必须确保当前系统已经正确识别到 NVIDIA 的显卡，否则在显卡没有被正常识别的情况下，执行后续的安装步骤都是徒劳的。此时可以执行以下命令，若可以输出相关信息，则说明显卡能被系统正常识别。否则请重新插拔显卡，或者检查主板是否需要跳线或者设置 BIOS 才能正确识别独立显卡。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># lspci | grep &quot;NVIDIA&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>安装软件依赖</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># yum -y install gcc gcc-c++ wget</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>安装 NVIDIA 显卡检测工具</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入key</span></span><br><span class="line"><span class="comment"># rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装elrepo源</span></span><br><span class="line"><span class="comment"># rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装检测工具</span></span><br><span class="line"><span class="comment"># yum install nvidia-detect</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测显卡，正常情况下会输出最新且适用当前显卡的驱动程序的版本号信息</span></span><br><span class="line"><span class="comment"># nvidia-detect -v</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示：不建议使用rpmfusion安装Nvidia的显卡驱动，因为开源的显卡驱动在性能方面跟Nvidia官方的闭源显卡驱动有一定的差距</span></span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><strong>下载 NVIDIA 驱动程序</strong></p>
</blockquote>
<p>根据显卡检测结果，在 <a href="https://www.nvidia.cn/Download/index.aspx?lang=cn">NVIDIA 官网</a>下载对应版本的 Linux 显卡驱动程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载驱动（请自行修改URL中的驱动版本号）</span></span><br><span class="line"><span class="comment"># wget https://us.download.nvidia.cn/XFree86/Linux-x86_64/430.40/NVIDIA-Linux-x86_64-430.40.run</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>屏蔽系统自带的 Nouveau 显卡驱动</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过vim编辑器更改配置文件，按照以下内容进行修改</span></span><br><span class="line"><span class="comment"># vim /lib/modprobe.d/dist-blacklist.conf</span></span><br><span class="line"></span><br><span class="line">blacklist nouveau               <span class="comment">#添加此行</span></span><br><span class="line">options nouveau modeset=0       <span class="comment">#添加此行</span></span><br><span class="line"><span class="comment"># blacklist nvidiafb            #将nvidiafb的这一行注释掉</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>重建 initramfs image</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line"><span class="comment"># mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.bak</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重建</span></span><br><span class="line"><span class="comment"># dracut /boot/initramfs-$(uname -r).img $(uname -r)</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>重启系统</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改系统运行级别为纯文本模式</span></span><br><span class="line"><span class="comment"># systemctl set-default multi-user.target</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line"><span class="comment"># reboot</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统重启完成后，在纯文本模式下使用root用户登录进系统</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nouveau显卡驱动是否已经被禁用，若此命令执行完之后没有输出相关信息，则说明已经被禁用</span></span><br><span class="line"><span class="comment"># lsmod | grep nouveau</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>安装 NVIDIA 显卡驱动（纯文本模式下）</strong></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件授权</span></span><br><span class="line"><span class="comment"># chmod +x NVIDIA-Linux-x86_64-384.59.run</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装显卡驱动</span></span><br><span class="line"><span class="comment"># ./NVIDIA-Linux-x86_64-384.59.run</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装过程中，选择accept；如果提示是否编译DKMS模块，选择yes（方便以后升级系统内核）；如果提示要修改xorg.conf，选择yes；</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看显卡驱动的安装状态，若此命令执行完之后正常输出显卡状态相关的信息，则说明Nvidia显卡驱动安装成功</span></span><br><span class="line"><span class="comment"># nvidia-smi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改系统运行级别为图形模式</span></span><br><span class="line"><span class="comment"># systemctl set-default graphical.target</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启系统</span></span><br><span class="line"><span class="comment"># reboot</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启完成后，若成功进入GNOME的桌面环境，执行此命令可以调出图形界面来配置显卡（可选操作）</span></span><br><span class="line"><span class="comment"># nvidia-settings</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>卸载 NVIDIA 显卡驱动（可选操作）</strong></p>
</blockquote>
<p>如果显卡驱动安装和系统重启完成后，无法正常进入 GHOME 的桌面环境，此时可以在另一台机器上通过远程 SSH 使用 root 用户登录进系统，然后手动执行以下命令卸载 NVIDIA 的显卡驱动程序（在纯文本模式下）。特别注意：当 NVIDIA 的显卡驱动被卸载后，需要启用系统自带的 Nouveau 显卡驱动 和 还原 <code>initramfs image</code>，否则系统会因缺少显卡驱动而无法正常显示。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./NVIDIA-Linux-x86_64-430.40.run --uninstall</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>系统内核更新问题</strong></p>
</blockquote>
<p>如果系统更新内核并重启后，显示器无法显示 GNOME 桌面环境（一般是因为显卡驱动丢失导致显示器无法显示桌面环境，但大多数情况下 Centos 系统已经启动成功），此时可以在另一台机器上通过 SSH 远程登录进旧的 Centos 系统，然后按照上面的步骤重新安装 NVIDIA 的显卡驱动（如果安装程序提示显卡驱动已存在，手动卸载显卡驱动后，再重新安装即可）。</p>
<blockquote>
<p><strong>主板启用独立显卡</strong></p>
</blockquote>
<p>一般的桌面主板（家用）可以自动检测到独立显卡并启用，但是部分主板（例如服务器主板），则需要在 BIOS 里将板载显卡或者 CPU 的核显屏蔽掉，个别品牌可能需要通过主板跳线的方式屏蔽板载显卡或者 CPU 的核显。超微的服务器主板一般需要在 BIOS 里设置板载显卡的屏蔽，否则独立显卡无法正常识别。启用独立显卡之后，超微的部分服务器主板在系统刚启动的时候，显示器不会显示任何内容（黑屏 + 无信号输出）；因为服务器主板开机自检的耗时较长，此时一般需要耐心等待几十秒甚至更久，显示器才会显示硬件自检和系统启动相关的信息。</p>
<blockquote>
<p><strong>补充说明</strong></p>
</blockquote>
<p>一般情况下，只要 Centos 系统可以正常识别到 NVIDIA 的显卡，同时显示器与 NVIDIA 的显卡正确连接上；那么即使不安装 NVIDIA 的显卡驱动程序，在系统启动的时候，显示器都可以正常显示硬件自检和系统启动相关的信息（可能会延时显示）；唯一的问题是在系统正常启动完成后，显示器没办法显示 GNOME 桌面环境。</p>
<blockquote>
<p><strong>nvidia-smi 命令输出的信息</strong></p>
</blockquote>
<p><img data-src="https://www.techgrow.cn/asset/2019/08/nvidia-smi.jpeg" alt="nvidia-smi.jpeg" /></p>
<br/>
<br/>
<h1 id="cuda卸载和安装"><a class="markdownIt-Anchor" href="#cuda卸载和安装"></a> Cuda卸载和安装</h1>
<p><a href="https://www.jianshu.com/p/ddf08d0bcf0f">原博客地址</a></p>
<h2 id="一-卸载"><a class="markdownIt-Anchor" href="#一-卸载"></a> 一、卸载</h2>
<h3 id="11-卸载原有驱动"><a class="markdownIt-Anchor" href="#11-卸载原有驱动"></a> 1.1 卸载原有驱动</h3>
<p>方法一：找到显卡驱动.run文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sh NVIDIA-Linux-x86_64-418.126.02.run --uninstall</span><br></pre></td></tr></table></figure>
<br/>
<p>方法二：清除所有nvidia相关文件和依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum remove nvidia-*</span><br></pre></td></tr></table></figure>
<p>为了删除干净还可以（目标就是把nvidia-driver的相关组件都清理掉）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i nvid|<span class="built_in">sort</span></span><br><span class="line">yum  remove kmod-nvidia-*</span><br></pre></td></tr></table></figure>
<p>ubuntu为:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get purge nvidia-cuda*</span><br><span class="line">sudo apt-get purge nvidia-*</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="12卸载原有cuda"><a class="markdownIt-Anchor" href="#12卸载原有cuda"></a> 1.2卸载原有cuda</h3>
<p><strong>如果是rpm安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -e cuda-repo[补全]        #[补全]为tab键</span><br><span class="line">sudo yum -y remove nvidia-*</span><br><span class="line">sudo yum -y remove cuda-*</span><br><span class="line">sudo rm -rf /usr/local/cuda*      #如果有多个cuda,都删除,如rm -rf /usr/local/cuda-11.0</span><br></pre></td></tr></table></figure>
<p><strong>如果是.run安装</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo nvidia-uninstall #卸载驱动</span><br><span class="line">sudo /usr/local/cuda/cuda-uninstaller #卸载cuda，9.2版本的后缀名为.pl</span><br></pre></td></tr></table></figure>
<p>反正我是两种都执行一遍.</p>
<br/>
<h3 id="13-清理gcc环境"><a class="markdownIt-Anchor" href="#13-清理gcc环境"></a> 1.3 清理gcc环境</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum autoremove -y gcc*</span><br><span class="line">sudo yum autoremove -y cpp*</span><br><span class="line">sudo yum autoremove -y dkms</span><br><span class="line"></span><br><span class="line">sudo rm -rf /opt/rh #删除由devtoolset安装的gcc</span><br><span class="line">sudo rm -rf /usr/lib/gcc</span><br><span class="line">sudo rm -rf /usr/libexec/gcc</span><br><span class="line">whereis gcc</span><br><span class="line"></span><br><span class="line">sudo yum install -y gcc</span><br><span class="line">sudo yum install -y gcc-c++</span><br><span class="line">sudo yum install -y glibc-devel</span><br><span class="line"></span><br><span class="line">gcc -v</span><br></pre></td></tr></table></figure>
<br/>
<h2 id="二-安装nvidia驱动"><a class="markdownIt-Anchor" href="#二-安装nvidia驱动"></a> 二、安装NVIDIA驱动</h2>
<p>下载地址:<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.nvidia.com%2FDownload%2Findex.aspx">https://www.nvidia.com/Download/index.aspx</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sh NVIDIA-Linux-x86_64-440.118.02.run</span><br></pre></td></tr></table></figure>
<p>安装过程失败提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">An NVIDIA kernel module &#x27;nvidia-uvm&#x27; appears to already be loaded in your kernel. This may be because it is in use (for example, by an X server, a CUDA program, or the NVIDIA Persistence Daemon), but this</span><br><span class="line">may also happen if your kernel was configured without support for module unloading.  Please be sure to exit any programs that may be using the GPU(s) before attempting to upgrade your driver.  If no GPU-based programs are running, you know that your kernel supports module unloading, and you still receive this message, then an error may have occured that has corrupted an NVIDIA kernel module&#x27;s usage count, for which the simplest remedy is to reboot your computer.</span><br></pre></td></tr></table></figure>
<p>因为一些docker 容器正在使用该驱动，需要输入一下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop</span><br><span class="line">sudo stop nvidia-digits-server</span><br><span class="line">sudo service docker stop</span><br><span class="line">sudo rmmod nvidia-uvm</span><br></pre></td></tr></table></figure>
<p>或者需要屏蔽nouveau,以及把docker采用了gpu的已有的服务关闭stop.</p>
<br/>
<p><strong>屏蔽nouveau</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/modprobe.d/blacklist-nouveau.conf</span><br></pre></td></tr></table></figure>
<p>加入:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">blacklist nouveau</span><br><span class="line">options nouveau modeset=0</span><br></pre></td></tr></table></figure>
<p>更新使其生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-initramfs -u</span><br></pre></td></tr></table></figure>
<br/>
<p><strong>修改运行级别为文本模式</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl set-default multi-user.target</span><br></pre></td></tr></table></figure>
<br/>
<p><strong>重启</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<p>检验是否生效,输入以下命令,如果无信息输出,则生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsmod | grep nouveau</span><br></pre></td></tr></table></figure>
<p>查看nvidia-smi</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]# nvidia-smi</span><br><span class="line">Sat Oct  9 14:54:38 2021       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 440.33.01    Driver Version: 440.33.01    CUDA Version: 10.2     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  Tesla V100-FHHL...  Off  | 00000000:AF:00.0 Off |                    0 |</span><br><span class="line">| N/A   55C    P0    32W / 150W |     12MiB / 16160MiB |      0%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br><span class="line">                                                                               </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| Processes:                                                       GPU Memory |</span><br><span class="line">|  GPU       PID   Type   Process name                             Usage      |</span><br><span class="line">|=============================================================================|</span><br><span class="line">|  No running processes found                                                 |</span><br><span class="line">+-----------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<br/>
<h2 id="三-安装cuda"><a class="markdownIt-Anchor" href="#三-安装cuda"></a> 三、安装cuda</h2>
<p>下载地址： <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdeveloper.nvidia.com%2Fcuda-downloads">https://developer.nvidia.com/cuda-downloads</a><br />
推荐用runfile(local)方法,会下载到本地</p>
<br/>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda_10.2.89_440.33.01_linux.run</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo sh cuda_10.2.89_440.33.01_linux.run</span></span><br></pre></td></tr></table></figure>
<p>安装过程输入accept,选择安装所有  [X]表示选中,如果取消就移到该选项按一下回车就取消了X.</p>
<br/>
<p><strong>如果没有执行第一步的卸载原有驱动,则会出现以下错误:</strong></p>
<p>在执行sh cuda_10.2.89_440.33.01_linux.run时,安装失败,打开日志/var/log/cuda-installer.log:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[INFO]: Driver not installed.</span><br><span class="line">[INFO]: Checking compiler version...</span><br><span class="line">[INFO]: gcc location: /usr/bin/gcc</span><br><span class="line"></span><br><span class="line">[INFO]: gcc version: gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.12)</span><br><span class="line"></span><br><span class="line">[INFO]: Initializing menu</span><br><span class="line">[INFO]: Setup complete</span><br><span class="line">[INFO]: Components to install:</span><br><span class="line">[INFO]: Driver</span><br><span class="line">[INFO]: 440.33.01</span><br><span class="line">[INFO]: Executing NVIDIA-Linux-x86_64-440.33.01.run --ui=none --no-questions --accept-license --disable-nouveau --no-cc-version-check --install-libglvnd  2&gt;&amp;1</span><br><span class="line">[INFO]: Finished with code: 256</span><br><span class="line">[ERROR]: Install of driver component failed.</span><br><span class="line">[ERROR]: Install of 440.33.01 failed, quitting</span><br></pre></td></tr></table></figure>
<p>[ERROR]: Install of driver component failed.表示驱动安装失败.正常执行了卸载原有驱动是不会出现的</p>
<p>cuda_10.2 还有两个补丁,这个需要在windows下载,复制到linux服务器中.然后执行以下命令:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh cuda_10.2.1_linux.run</span><br><span class="line">sh cuda_10.2.2_linux.run</span><br></pre></td></tr></table></figure>
<p>这时在usr/local有两个文件夹,一个为cuda-10.2 另外一个为cuda,其中cuda为cuda-10.2的软连接</p>
<p>如果是用rpm方式安装,先修改cuda源:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install cuda from .rpm file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改cuda源，/etc/yum.repos.d/cuda.repo</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">https://mirrors.aliyun.com/nvidia-cuda/rhel7/x86_64/</span></span><br></pre></td></tr></table></figure>
<br/>
<h2 id="四-安装cudnn"><a class="markdownIt-Anchor" href="#四-安装cudnn"></a> 四、安装cudnn</h2>
<p>cudnn下载地址:<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fdeveloper.nvidia.com%2Frdp%2Fcudnn-download">https://developer.nvidia.com/rdp/cudnn-download</a><br />
cuda为10.2 ,选择下载linux-x64-v7.6.5</p>
<p>解压并复制文件:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz</span><br><span class="line">sudo cp cuda/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure>
<p>一个用户/root,只能存在一个cudnn,用到的时候如果要切换别的cudnn,如cudnn8.0.2 则对cudnn8.0.2 解压后,重命名为cuda_v8.再执行:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo cp cuda_v8/include/cudnn.h /usr/local/cuda/include</span><br><span class="line">sudo cp cuda_v8/lib64/libcudnn* /usr/local/cuda/lib64</span><br></pre></td></tr></table></figure>
<p>这样就切换到cudnn8.0.2了</p>
<br/>
<h2 id="五-设置环境变量"><a class="markdownIt-Anchor" href="#五-设置环境变量"></a> 五、设置环境变量</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>添加以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/local/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/cuda/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda/lib64:<span class="variable">$LD_LIBRARY_PATH</span></span><br><span class="line"><span class="built_in">export</span> CUDA_ROOT=/usr/local/cuda</span><br></pre></td></tr></table></figure>
<p>这样就可以使用nvcc -V 查看版本了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">[root@~]# </span><span class="language-bash">nvcc -V</span></span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2019 NVIDIA Corporation</span><br><span class="line">Built on Wed_Oct_23_19:24:38_PDT_2019</span><br><span class="line">Cuda compilation tools, release 10.2, V10.2.89</span><br></pre></td></tr></table></figure>
<br/>
<br/>
<h1 id="anaconda相关配置"><a class="markdownIt-Anchor" href="#anaconda相关配置"></a> Anaconda相关配置</h1>
<h2 id="1-安装anaconda环境"><a class="markdownIt-Anchor" href="#1-安装anaconda环境"></a> 1. 安装Anaconda环境</h2>
<ol>
<li>
<p>进入root环境，安装Anaconda环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">`bash Anaconda3-2019.03-Linux-x86_64.sh‘</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：下面安装路径不要放在默认的 <code>/root/anaconda3</code> 否则其他用户没有访问权限，这里我选择的是<code>/usr/local/anaconda3</code></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Do you accept the license terms? [<span class="built_in">yes</span>|no]</span><br><span class="line">Please answer <span class="string">&#x27;yes&#x27;</span> or <span class="string">&#x27;no&#x27;</span>:<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; yes</span></span><br><span class="line"><span class="string">Anaconda3 will now be installed into this location:</span></span><br><span class="line"><span class="string">/root/anaconda3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - Press ENTER to confirm the location</span></span><br><span class="line"><span class="string">  - Press CTRL-C to abort the installation</span></span><br><span class="line"><span class="string">  - Or specify a different location below</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[/root/anaconda3] &gt;&gt;&gt; /usr/local/anaconda3</span></span><br><span class="line"><span class="string">PREFIX=/usr/local/anaconda3</span></span><br><span class="line"><span class="string">installing: python-3.7.3-h0371630_0 ...</span></span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p>创建Anaconda用户组</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">groupadd anaconda</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户到用户组</span></span><br><span class="line">usermod -a -G anaconda &lt;username&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一号机用户组</span></span><br><span class="line">usermod -a -G anaconda &lt;username&gt; </span><br><span class="line">usermod -a -G anaconda_back &lt;username&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将一个用户添加到用户组中，千万不能直接用： <code>usermod -G groupA</code>这样做会使你离开其他用户组，仅仅做为 这个用户组 groupA 的成员。<br />
应该用 加上 -a 选项： <code>usermod -a -G groupA user</code>，-a 代表 append， 也就是 将自己添加到 用户组groupA 中，而不必离开 其他用户组。</p>
<p>添加结束通过 <code>vim /etc/group</code>在最后可以查看用户组和用户</p>
</blockquote>
<br/>
</li>
<li>
<p>移交目录管理权设置读写权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 移交目录管理权</span></span><br><span class="line"><span class="built_in">chgrp</span> -R anaconda /usr/local/anaconda3</span><br><span class="line"><span class="comment"># 设置读写权限</span></span><br><span class="line"><span class="built_in">chmod</span> 770 -R /usr/local/anaconda3</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p>设置读写权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置组继承</span></span><br><span class="line"><span class="built_in">chmod</span> g+s /usr/local/anaconda3</span><br><span class="line"><span class="comment"># 设置子目录继承</span></span><br><span class="line"><span class="built_in">chmod</span> g+s `find /usr/local/anaconda3/ -<span class="built_in">type</span> d` </span><br><span class="line"><span class="comment"># 设置共享环境的读写权限</span></span><br><span class="line"><span class="built_in">chmod</span> g-w /usr/local/anaconda3/envs</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p>切换Anaconda base环境/配置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换base环境</span></span><br><span class="line"><span class="built_in">source</span> /usr/local/anaconda3/bin/activate</span><br><span class="line"><span class="built_in">source</span> /mnt/anaconda_back/anaconda3/bin/activate   <span class="comment">#一号机新环境</span></span><br><span class="line"><span class="comment"># 配置环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="comment"># 添加：</span></span><br><span class="line">`<span class="built_in">export</span> PATH=/usr/local/anaconda3/bin:<span class="variable">$PATH</span>`</span><br><span class="line">`<span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p>创建环境并激活</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 切换用户</span></span><br><span class="line">su user</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建环境</span></span><br><span class="line">conda create -n myuser python=3.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看conda 环境</span></span><br><span class="line">[myuser@Master wx]$ conda info --<span class="built_in">env</span></span><br><span class="line">WARNING: The conda.compat module is deprecated and will be removed <span class="keyword">in</span> a future release.</span><br><span class="line"><span class="comment"># conda environments:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  /usr/local/anaconda3</span><br><span class="line">myuser                  /usr/local/anaconda3/envs/mysuer</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活环境</span></span><br><span class="line">[myuser@Master /]$ /usr/local/anaconda3/bin/conda init bash</span><br><span class="line">WARNING: The conda.compat module is deprecated and will be removed <span class="keyword">in</span> a future release.</span><br><span class="line">no change     /usr/local/anaconda3/condabin/conda</span><br><span class="line">no change     /usr/local/anaconda3/bin/conda</span><br><span class="line">no change     /usr/local/anaconda3/bin/conda-env</span><br><span class="line">no change     /usr/local/anaconda3/bin/activate</span><br><span class="line">no change     /usr/local/anaconda3/bin/deactivate</span><br><span class="line">no change     /usr/local/anaconda3/etc/profile.d/conda.sh</span><br><span class="line">no change     /usr/local/anaconda3/etc/fish/conf.d/conda.fish</span><br><span class="line">no change     /usr/local/anaconda3/shell/condabin/Conda.psm1</span><br><span class="line">no change     /usr/local/anaconda3/shell/condabin/conda-hook.ps1</span><br><span class="line">no change     /usr/local/anaconda3/lib/python3.7/site-packages/xonsh/conda.xsh</span><br><span class="line">no change     /usr/local/anaconda3/etc/profile.d/conda.csh</span><br><span class="line">modified      /home/hisense/.bashrc</span><br><span class="line"></span><br><span class="line">==&gt; For changes to take effect, close and re-open your current shell. &lt;==</span><br><span class="line"></span><br><span class="line">[myuser@Master /]$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">(base) [myuser@Master /]$ conda activate myuser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活成功</span></span><br><span class="line">(myuser) [myuser@Master /]$ </span><br></pre></td></tr></table></figure>
</li>
</ol>
<br/>
<h2 id="2-pycharm安装破解配合vnc"><a class="markdownIt-Anchor" href="#2-pycharm安装破解配合vnc"></a> 2. Pycharm安装破解(配合VNC)</h2>
<ol>
<li>
<p>安装</p>
<p>在E:\IDM下载文件\压缩文件\Pycharm2020.1.3_CentOS破解找到相应文件，使用WinSCP上传到Centos服务器；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -xf pycharm-professional-2020.1.3.tar.gz</span><br><span class="line"><span class="comment"># 进入bin</span></span><br><span class="line">./pycharm.sh</span><br></pre></td></tr></table></figure>
<br/>
<p>将jetbrians-agent放到桌面待破解，在/usr/share/applications下新建pycharm.desktop文件，并修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi pycharm.desk.top</span><br><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Pycharm</span><br><span class="line">GenericName=Pycharm</span><br><span class="line">Comment=Python IDE</span><br><span class="line">Exec=sh /home/pycharm-2020.1.3/bin/pycharm.sh</span><br><span class="line">Icon=/home/pycharm-2020.1.3/bin/pycharm.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Categories=Application;Network;</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p>破解</p>
<p>将pycharm.desktop复制到桌面并打开，并进行30天的免费使用，然后将jetbrains-agent拖拽到界面上进行破解；查看about即可知道已破解。</p>
<br/>
</li>
<li>
<p>卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首先进入解压的目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf pycharm.2020.1.3</span><br><span class="line"><span class="comment"># 查看是否有隐藏文件并将进行删除</span></span><br><span class="line"><span class="built_in">ls</span> -a</span><br><span class="line"><span class="built_in">rm</span> -r ...</span><br><span class="line"><span class="comment"># 删除快捷方式</span></span><br><span class="line"><span class="built_in">cd</span> /usr/share/applications</span><br><span class="line"><span class="built_in">rm</span> -r pycharm.desktop</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<br/>
<br/>
<h1 id="连接远程服务器"><a class="markdownIt-Anchor" href="#连接远程服务器"></a> 连接远程服务器</h1>
<h2 id="1-pycharm连接远程服务器"><a class="markdownIt-Anchor" href="#1-pycharm连接远程服务器"></a> 1. Pycharm连接远程服务器</h2>
<p><a href="https://www.cnblogs.com/wenqiangit/p/9771947.html">原博客地址</a></p>
<br/>
<h2 id="2-vscode连接远程服务器"><a class="markdownIt-Anchor" href="#2-vscode连接远程服务器"></a> 2. VScode连接远程服务器</h2>
<p><a href="https://blog.csdn.net/junbaba_/article/details/111590179">原博客地址</a></p>
<br/>
<h2 id="3-远程访问服务器jupyter-notebook"><a class="markdownIt-Anchor" href="#3-远程访问服务器jupyter-notebook"></a> 3. 远程访问服务器Jupyter Notebook</h2>
<p><a href="https://www.jianshu.com/p/8fc3cd032d3c">原博客地址</a></p>
<ol>
<li>
<p>ssh远程使用jupyter notebook</p>
<p>（1）在远程服务器上，启动jupyter notebooks服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --no-browser --port=8889</span><br></pre></td></tr></table></figure>
<br/>
<p>（2）在本地终端中启动SSH：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -N -f -L localhost:8888:localhost:8889 username@serverIP</span><br></pre></td></tr></table></figure>
<p>其中： -N 告诉SSH没有命令要被远程执行； -f 告诉SSH在后台执行； -L 是指定port forwarding的配置，远端端口是8889，本地的端口号的8888。</p>
<blockquote>
<p>注意：username@serverIP替换成服务器的对应账号。</p>
</blockquote>
<br/>
<p>（3）最后打开浏览器，访问：<a href="http://localhost:8888/">http://localhost:8888/</a></p>
<br/>
</li>
<li>
<p>利用jupyter notebook自带的远程访问功能</p>
<p>官方指南在此：<a href="http://jupyter-notebook.readthedocs.io/en/latest/public_server.html#notebook-server-security">官方指南</a></p>
<p>（1）生成默认配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<br/>
<p>（2）生成访问密码(token)</p>
<p>终端输入<code>ipython</code>，设置你自己的jupyter访问密码，注意复制输出的<code>sha1:xxxxxxxx</code>密码串</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">In [1]: from notebook.auth import passwd</span><br><span class="line">In [2]: passwd()</span><br><span class="line">Enter password:</span><br><span class="line">Verify password:</span><br><span class="line">Out[2]: <span class="string">&#x27;sha1:xxxxxxxxxxxxxxxxx&#x27;</span></span><br></pre></td></tr></table></figure>
<br/>
<p>（3）修改./jupyter/jupyter_notebook_config.py中对应行如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip=<span class="string">&#x27;*&#x27;</span></span><br><span class="line">c.NotebookApp.password = u<span class="string">&#x27;sha:ce...刚才复制的那个密文&#x27;</span></span><br><span class="line">c.NotebookApp.open_browser = False</span><br><span class="line">c.NotebookApp.port =8888 <span class="comment">#可自行指定一个端口, 访问时使用该端口</span></span><br></pre></td></tr></table></figure>
<br/>
<p>（4）在服务器上启动<code>jupyter notebook</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>
<br/>
<p>（5）最后打开浏览器，访问：<a href="http://ip:8888/">http://ip:8888/</a></p>
<br/>
</li>
<li>
<p>其他方法</p>
<p>配置自己的config文件，如<code>./jupyter/jupyter_notebook_config_backup.py</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jupyter notebook --config ./jupyter/jupyter_notebook_config_backup.py</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>CentOS配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>资料整理</tag>
      </tags>
  </entry>
  <entry>
    <title>Code-Server容器部署VScode Online并配置语言环境</title>
    <url>/posts/fbae2d13.html</url>
    <content><![CDATA[<p><em>本部署教程是在腾讯云搭载2G，2核的Ubuntu 20.04轻量级服务器上进行实现的。</em></p>
<hr />
<h2 id="docker-部署-code-server"><a class="markdownIt-Anchor" href="#docker-部署-code-server"></a> Docker 部署 Code-Server</h2>
<p>首先需要在你的用户下新建<code>~/.config</code>配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/.config</span><br></pre></td></tr></table></figure>
<p><code>Docker</code>部署<code>Code-Server</code>应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This will start a code-server container and expose it at http://127.0.0.1:8888.</span></span><br><span class="line"><span class="comment"># It will also mount your current directory into the container as `/home/coder/project`</span></span><br><span class="line"><span class="comment"># and forward your UID/GID so that all file system operations occur as your user outside</span></span><br><span class="line"><span class="comment"># the container.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Your $HOME/.config is mounted at $HOME/.config within the container to ensure you can</span></span><br><span class="line"><span class="comment"># easily access/modify your code-server config in $HOME/.config/code-server/config.json</span></span><br><span class="line"><span class="comment"># outside the container.</span></span><br><span class="line"><span class="comment"># set the password with ********</span></span><br><span class="line">docker run -it --name code-server -p 127.0.0.1:8888:8080 \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$HOME</span>/.config:/home/coder/.config&quot;</span> \</span><br><span class="line">  -v <span class="string">&quot;<span class="variable">$PWD</span>:/home/coder/project&quot;</span> \</span><br><span class="line">  -u <span class="string">&quot;<span class="subst">$(id -u)</span>:<span class="subst">$(id -g)</span>&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;DOCKER_USER=<span class="variable">$USER</span>&quot;</span> \</span><br><span class="line">  -e PASSWORD=******** \</span><br><span class="line">  codercom/code-server:latest</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<br/>
<p>通过我们之前部署的Nginx Proxy Manager进行反向代理，同时不要忘记去腾讯云开放防火墙端口，使用coder.mydomain.com进行访问，输入密码登录：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/KKUCowL6C82O.png?imageslim" alt="rocky" /></p>
<p>安装合适的插件，比如简体中文的语言包扩展、主题扩展和语言扩展等：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/gv1jXLI7jnJ1.png?imageslim" alt="rocky" /></p>
<br/>
<h2 id="配置-code-server-语言环境"><a class="markdownIt-Anchor" href="#配置-code-server-语言环境"></a> 配置 Code-Server 语言环境</h2>
<p>首先我们使用命令进入环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it code-server bash</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：此时的code-server应用内部是一个独立的Debian环境</p>
</blockquote>
<p>我们需要先更新<code>apt-get</code>并安装<code>vim</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure>
<br/>
<p>因为个人需要，所以Code-Server部署了Python、Java和Go的语言环境，所以以下对部署的细节进行说明：</p>
<ul>
<li><strong>Python 环境配置：</strong></li>
</ul>
<p>安装 Python3：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3</span><br></pre></td></tr></table></figure>
<p>如果输入<code>python</code>命令出现<code>bash: python: command not found</code>，则需创建软链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我的版本是python3.9</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/python3.9 /usr/bin/python</span><br><span class="line"><span class="comment"># 验证</span></span><br><span class="line">python</span><br></pre></td></tr></table></figure>
<p>安装插件：</p>
<p>在<code>扩展商店</code>里选择名为<code>Python</code>的插件进行安装即可。</p>
<br />
<ul>
<li><strong>Java 环境配置</strong></li>
</ul>
<p>首先我们选择安装插件：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/fJV67q3PN3vE.png?imageslim" alt="rocky" /></p>
<p>接着会提示我们没有<code>jdk</code>环境，我们选择<code>Install new JDK</code>，然后选择<code>JDK-11</code>进行下载，则此时浏览器会将安装包下载到本地，即得到<code>OpenJDK11U-jdk_x64_linux_hotspot_11.0.15_10.tar</code>，我们将压缩包上传到服务器的用户目录下，然后进行解压：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> java</span><br><span class="line"><span class="built_in">cd</span> java</span><br><span class="line">tar -zxvf OpenJDK11U-jdk_x64_linux_hotspot_11.0.15_10.tar</span><br></pre></td></tr></table></figure>
<p>将<code>java</code>文件夹复制到<code>code-server</code>容器中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">sudo docker <span class="built_in">cp</span> java $容器<span class="built_in">id</span>:/usr/local</span><br></pre></td></tr></table></figure>
<p>进行<code>Docker</code>容器查看复制情况，并修改<code>Docker</code>内的<code>Java</code>环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it code-server bash</span><br><span class="line"><span class="built_in">cd</span> /usr/local &amp;&amp; <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改/etc/profile配置文件</span></span><br><span class="line">sudo vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后将以下内容写入文件的最后</span></span><br><span class="line"><span class="comment">## Java ENV</span></span><br><span class="line">JAVA_HOME=/usr/local/java/jdk-11.0.15+10</span><br><span class="line">CLASSPATH=<span class="variable">$JAVA_HOME</span>/lib/</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH JAVA_HOME CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑后保存配置，并进行检查</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后在插件的界面选择<code>Install from Existing JDK</code>，然后选择<code>/usr/local/java/jdk-11.0.15+10</code>目录即可，此时就可以编译<code>java</code>文件了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* project/demo.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打开下面的终端进入<code>cd project</code>，然后执行<code>java demo.java</code>就可以得到输出了。</p>
<br/>
<ul>
<li><strong>Go 环境配置</strong></li>
</ul>
<p>首先在宿主机上安装<code>Go</code>环境，从<a href="https://golang.org/dl">这里</a>下载最新的安装包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将安装包上传的用户的目录</span></span><br><span class="line"><span class="comment"># 下载的压缩包解压到/usr/local</span></span><br><span class="line">sudo tar -C /usr/local -xzf go1.18.3.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure>
<p>不同于<code>bash</code>，使用<code>zsh</code>则需要另外配置到<code>~/.zshrc</code>文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑/etc/profile</span></span><br><span class="line">sudo vi /etc/profile</span><br><span class="line"><span class="comment"># 将下面内容增加到最后一行中</span></span><br><span class="line"><span class="comment">## Go ENV</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存配置并生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置到~/.zshrc中</span></span><br><span class="line">sudo vi ~/.zshrc</span><br><span class="line"><span class="comment"># 进行如下图配置并保存</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时可以查看Go的环境</span></span><br><span class="line">go version</span><br></pre></td></tr></table></figure>
<p><img data-src="https://image.zxkidea.top/blog/20220704/DTnFCf56knEv.png?imageslim" alt="rocky" /></p>
<br/>
<p>对<code>Code-Server</code>容器配置<code>Go</code>环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将Go的文件夹复制到code-server容器中</span></span><br><span class="line">sudo docker <span class="built_in">cp</span> /usr/local/go $容器<span class="built_in">id</span>:/usr/local</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">sudo docker <span class="built_in">exec</span> -it code-server bash</span><br><span class="line"><span class="comment"># 修改/etc/profile配置文件</span></span><br><span class="line">sudo vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后将以下内容写入文件的最后</span></span><br><span class="line"><span class="comment">## Go ENV</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑后保存配置，并进行检查</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">go version</span><br></pre></td></tr></table></figure>
<br/>
<p>最后我们在安装<code>Go</code>的插件，在扩展商店搜索<code>Go</code>，找到第一个进行安装，然后编写<code>Go</code>文件：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后右下角会提示安装<code>Go</code>其他相关的插件，点击<code>Install all</code>，由于代理的原因，一般会安装失败，此时我们需要修改代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开终端输入</span></span><br><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br><span class="line">go <span class="built_in">env</span> -w GOPROXY=https://proxy.golang.com.cn,direct</span><br></pre></td></tr></table></figure>
<p>关闭<code>vscode</code>重新打开，再次点击<code>install all</code>则可以成功安装插件；打开终端进入<code>cd project</code>，然后执行<code>go run demo.go</code>就可以得到输出了。</p>
<br />
<ul>
<li><strong>Code Runner安装</strong></li>
</ul>
<p>最后安装<code>Code Runner</code>，选择扩展设置中的<code>Executor Map</code>在<code>settings.json</code>中进行编辑，然后对于一个文件，可以直接右击<code>Run Code</code>或者使用快捷键<code>Ctrl+Alt+N</code>可以直接运行对应文件。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/EoTiz7b0bCsD.png?imageslim" alt="rocky" /></p>
]]></content>
      <categories>
        <category>容器部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>DatabaseNotes-Ch1,2</title>
    <url>/posts/786bf771.html</url>
    <content><![CDATA[<h2 id="ch1-introduction"><a class="markdownIt-Anchor" href="#ch1-introduction"></a> Ch1:  Introduction</h2>
<h2 id="ch2-the-rational-model"><a class="markdownIt-Anchor" href="#ch2-the-rational-model"></a> Ch2:  The Rational Model</h2>
<h3 id="1the-cap-database"><a class="markdownIt-Anchor" href="#1the-cap-database"></a> 1.The CAP Database</h3>
<h3 id="2naming-the-parts-of-the-database"><a class="markdownIt-Anchor" href="#2naming-the-parts-of-the-database"></a> 2.Naming the Parts of the Database</h3>
<h3 id="3rational-rules"><a class="markdownIt-Anchor" href="#3rational-rules"></a> 3.Rational Rules:</h3>
<span id="more"></span>
<ol>
<li><strong>First Normal Form Rules</strong></li>
<li><strong>Access Rows By Content Only Rule</strong></li>
<li><strong>The Unique Row Rule</strong></li>
<li><strong>Entity Integrity rule</strong></li>
</ol>
<h3 id="4keys-superkeys-and-null-values"><a class="markdownIt-Anchor" href="#4keys-superkeys-and-null-values"></a> 4.Keys, Superkeys and Null values</h3>
<h3 id="5rational-algebra关系代数"><a class="markdownIt-Anchor" href="#5rational-algebra关系代数"></a> 5.Rational Algebra(关系代数)</h3>
<table>
<thead>
<tr>
<th><font color = red>NAME   </font></th>
<th><font color = red> SYMBOL   </font></th>
<th><font color = red>FORM   </font></th>
<th><font color = red>EXAMPLE   </font></th>
</tr>
</thead>
<tbody>
<tr>
<td>UNION   (并)</td>
<td>∪</td>
<td>UNION</td>
<td>R   ∪ S</td>
</tr>
<tr>
<td>INTERSECTION   (交)</td>
<td>∩</td>
<td>INTERSECT</td>
<td>R   ∩ S</td>
</tr>
<tr>
<td>DIFFERENCE   (差)</td>
<td>—</td>
<td>MINUS</td>
<td>R  —  S</td>
</tr>
<tr>
<td>PRODUCT   (乘积)</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span></td>
<td>TIMES</td>
<td>R  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> S</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><font color = red> NAME   </font></th>
<th><font color = red>SYMBOL   </font></th>
<th><font color = red> FORM   </font></th>
<th><font color = red>EXAMPLE   </font></th>
</tr>
</thead>
<tbody>
<tr>
<td>PROJECT   (投影)</td>
<td>R   [  ]</td>
<td>R   [  ]</td>
<td>R[A<sub>i1</sub>,…,A<sub>ik</sub>]</td>
</tr>
<tr>
<td></td>
<td>$\Pi $</td>
<td></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Π</mi></mrow><annotation encoding="application/x-tex">\Pi</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Π</span></span></span></span><sub>Ai1,…,Aik</sub>  ®</td>
</tr>
<tr>
<td>SELECT   (选择)</td>
<td>R   where C</td>
<td>R   where C</td>
<td>R   where A<sub>1</sub>=5</td>
</tr>
<tr>
<td></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span></td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span><sub>c</sub>®</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span><sub>A1=5</sub>®</td>
</tr>
<tr>
<td>JOIN   (联接)</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span></td>
<td>JOIN</td>
<td>R  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> S</td>
</tr>
<tr>
<td>DIVISION   (除法)</td>
<td><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span></td>
<td>DIVIDEBY</td>
<td>R  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> S</td>
</tr>
</tbody>
</table>
<p><font size = 4 color = purple>Compatible Tables (相容表)</font></p>
<p>表R和表S是相容表，当且仅当，</p>
<p>表R和表S的表头相同，并且对应的列中的数据是相同的类型和相同的语义。</p>
<p><font size = 4 color = purple>Assignment(赋值/取别名)</font></p>
<ol>
<li>
<p>符号：:=</p>
</li>
<li>
<p>将表格R的值赋给(取别名)S: S := R</p>
</li>
<li>
<p>举个栗子：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>T</mi><mn>1</mn><mo>:</mo><mo>=</mo><mo stretchy="false">(</mo><mi>R</mi><mo>∩</mo><mi>S</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>T</mi><mn>2</mn><mo>:</mo><mo>=</mo><mo stretchy="false">(</mo><mi>R</mi><mo>∪</mo><mi>S</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>T</mi><mo>:</mo><mo>=</mo><mi>T</mi><mn>1</mn><mtext>–</mtext><mi>T</mi><mn>2</mn></mrow><annotation encoding="application/x-tex">T1 := (R \cap S)\\  
T2 := (R \cup S)\\ 
T := T1 – T2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">1</span><span class="mord">–</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mord">2</span></span></span></span></span></p>
</li>
</ol>
<hr />
<h4 id="1-set-theoretic-operation"><a class="markdownIt-Anchor" href="#1-set-theoretic-operation"></a> 1) Set-Theoretic Operation</h4>
<div align="center"><font color = blue size = 4>Union,Intersection,Difference,Product</font></div>
- Example:
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo>∪</mo><mi>S</mi><mo separator="true">,</mo><mtext> </mtext><mi>R</mi><mo>∩</mo><mi>S</mi><mo separator="true">,</mo><mtext> </mtext><mi>R</mi><mo>−</mo><mi>S</mi><mo separator="true">,</mo><mtext> </mtext><mi>R</mi><mo>×</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">R\cup S,\ R\cap S,\ R-S,\ R\times S
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></span></p>
<table>
<thead>
<tr>
<th><img data-src="https://image.zxkidea.top/1547706516510.png" alt="zxk" /></th>
<th><img data-src="https://image.zxkidea.top/1547706548705.png" alt="zxk" /></th>
<th><img data-src="https://image.zxkidea.top/1547707597889.png" alt="zxk" /></th>
</tr>
</thead>
<tbody>
<tr>
<td><img data-src="https://image.zxkidea.top/1547707646859.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1547707694254.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1547707712319.png" alt="zxk" /></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th><img data-src="https://image.zxkidea.top/1547708058177.png" alt="zxk" /></th>
<th><img data-src="https://image.zxkidea.top/1547708130599.png" alt="zxk" /></th>
<th><img data-src="https://image.zxkidea.top/1547708187008.png" alt="zxk" /></th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p><font size = 4 color = red>Tips:</font></p>
<ul>
<li>Product运算产生的新表列的个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>C</mi><mi>S</mi></msub><mo>+</mo><msub><mi>C</mi><mi>R</mi></msub></mrow><annotation encoding="application/x-tex">C_S + C_R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，新表行的个数为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>N</mi><mi>R</mi></msub><mo>×</mo><msub><mi>N</mi><mi>S</mi></msub></mrow><annotation encoding="application/x-tex">N_R \times N_S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.00773em;">R</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05764em;">S</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li>
</ul>
<hr />
<h4 id="2-native-theoretic-operation"><a class="markdownIt-Anchor" href="#2-native-theoretic-operation"></a> 2) Native Theoretic Operation</h4>
<div align="center"><font color = blue size = 4>Project,Select,Join,Division</font></div>
- Example:
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>R</mi><mo stretchy="false">[</mo><msub><mi>A</mi><mrow><mi>i</mi><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><msub><mi>A</mi><mrow><mi>i</mi><mi>k</mi></mrow></msub><mo stretchy="false">]</mo><mo separator="true">,</mo><mtext> </mtext><mi>R</mi><mtext> </mtext><mi>w</mi><mi>h</mi><mi>e</mi><mi>r</mi><mi>e</mi><mtext> </mtext><msub><mi>A</mi><mi>i</mi></msub><mo>=</mo><mn>5</mn><mo separator="true">,</mo><mtext> </mtext><mi>R</mi><mi mathvariant="normal">∞</mi><mi>S</mi><mo separator="true">,</mo><mtext> </mtext><mi>R</mi><mo>÷</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">R[A_{i1},...A_{ik}],\ R\ where\ A_i=5,\ R\infty S,\ R\div S
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">[</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">h</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">e</span><span class="mspace"> </span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord">5</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord">∞</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mpunct">,</span><span class="mspace"> </span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span></span></p>
<table>
<thead>
<tr>
<th style="text-align:center">(Projection)CN:= C[cname]</th>
<th><img data-src="https://image.zxkidea.top/1547708591736.png" alt="zxk" /></th>
<th><img data-src="https://image.zxkidea.top/1547709820322.png" alt="zxk" /></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>(Selection)T :=CUSTOMERS where city = ‘Kyoto’</strong></td>
<td><img data-src="https://image.zxkidea.top/1547710588795.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1547710757123.png" alt="zxk" /></td>
</tr>
<tr>
<td style="text-align:center"><strong>(Selection)Pairs:=(L<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> M)  where L.city=M.city</strong></td>
<td><img data-src="https://image.zxkidea.top/1547711394006.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1547711610818.png" alt="zxk" style="zoom: 150%;" /></td>
</tr>
<tr>
<td style="text-align:center"><strong>Join(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi mathvariant="normal">∞</mi><mi>S</mi></mrow><annotation encoding="application/x-tex">R\infty S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord">∞</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>)</strong></td>
<td><img data-src="https://image.zxkidea.top/1547712009184.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1547712143439.png" alt="zxk" /></td>
</tr>
<tr>
<td style="text-align:center"><strong>Division(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mo>÷</mo><mi>S</mi></mrow><annotation encoding="application/x-tex">R\div S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>)</strong></td>
<td><img data-src="https://image.zxkidea.top/1547775339292.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1547775604826.png" alt="zxk" /></td>
</tr>
</tbody>
</table>
<p><font size = 4 color = red>关系代数运算的优先级：</font></p>
<table>
<thead>
<tr>
<th>Precedence（优先级）</th>
<th>Operators(运算符)</th>
</tr>
</thead>
<tbody>
<tr>
<td>Highest</td>
<td>PROJECT</td>
</tr>
<tr>
<td>…</td>
<td>SELECT</td>
</tr>
<tr>
<td>…</td>
<td>PRODUCT</td>
</tr>
<tr>
<td>…</td>
<td>JOIN,   DIVIDEBY</td>
</tr>
<tr>
<td>…</td>
<td>INTERSECTION</td>
</tr>
<tr>
<td>Lowest</td>
<td>UNION,   DIFFERENCE</td>
</tr>
</tbody>
</table>
<hr />
<h4 id="3-complex-query"><a class="markdownIt-Anchor" href="#3-complex-query"></a> 3) Complex Query</h4>
<p><img data-src="https://image.zxkidea.top/databasenote1.png" alt="zxk" /></p>
<p><font size = 4 color = blue>1. Find cname and city of customers and aname of agents that the customer lives in the same city with agents.</font></p>
<blockquote>
<p>((C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span>A) where C.city=A.city)[C.cname,C.city,A.aname]</p>
<p>相当于</p>
<p>(C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> A)[C.cname,C.city,A.aname]</p>
</blockquote>
<p><font size = 4 color = blue>2. Find pid, month and qty of order whose customer’s name is ‘Allied’.</font></p>
<blockquote>
<p>((C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span>O) where C.cid=O.cid and C.cname=‘Allied’)[O.pid,O.month,O.qty]</p>
<p>or</p>
<p>( ( ( (C where cname = ‘Allied’) [cid] ) x O ) where C.cid = O.cid ) [ O.pid, O.month, O.qty ]</p>
<p>相当于</p>
<p>((C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>O)where C.cname=‘Allied’)[O.pid,O.month,O.qty]</p>
</blockquote>
<p><font size = 4 color = blue>3. Find ordno of orders for customer, agent and product combinations that are all in the same city.</font></p>
<blockquote>
<p>( (C [ cid, city ] x A [ aid, city ] x P [ pid, city ] x O)</p>
<p>where C.city = A.city and P.city = A.city and</p>
<p>C.cid = O.cid and A.aid = O.aid and P.pid = O.pid )</p>
<p>[ O.ordno ]</p>
<p>相当于</p>
<p>(C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> O<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> P<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> A)[O.ordno]</p>
</blockquote>
<br/>
<br/>
<p><img data-src="https://image.zxkidea.top/databasenote2.png" alt="zxk" /></p>
<p><font size = 4 color = blue>4. Find cid of customers who have a <font color = black size = 5>highest </font>discount in all customers.</font></p>
<blockquote>
<p><font color=red size=6>Step 1:</font> Find all cids of customers</p>
<p><font color=red size=5>R1 := C[pid]</font></p>
<p><font color=red size=6>Step 2:</font> Find cid of customers whose discount less than another customer. Let <font color = green size = 5>S := C</font>, then</p>
<p><font color=red size=5>R2: = ((CxS) where C.discnt&lt;S.discnt)[C.cid]</font></p>
<p><font color=red size =6>Step 3:</font>  calculate the result of this query by DIFFERENCE operation.</p>
<p><font color=red size=5>T := R1 - R2</font></p>
</blockquote>
<p><font color = blue size = 4>注意：除法法则：</font></p>
<p><strong>if  R = T $ \times $ S, then</strong></p>
<p><strong>T = R <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> S</strong></p>
<p><strong>S = R <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> T</strong></p>
<p><strong>if T = R <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> S，then</strong></p>
<p><strong>T <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> S <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> R</strong></p>
<ul>
<li><font color = green>举个栗子：</font></li>
</ul>
<p><img data-src="https://image.zxkidea.top/databasenote3.png" alt="zxk" /></p>
<hr />
<h4 id="4-native-relational-operation"><a class="markdownIt-Anchor" href="#4-native-relational-operation"></a> 4) Native Relational Operation</h4>
<p><font color=green size=5>Questions:</font></p>
<p><font color = blue size = 4>1. Get cids of customers who order  products  p01 ?</font></p>
<blockquote>
<p><font color=red size=5>(O  where pid=‘p01’) [ cid ]</font></p>
</blockquote>
<p><font color = blue size = 4>2. Get cids of customers who order  <font size = 5 color = black>products  p01 and p02 ?</font></font></p>
<blockquote>
<p><font color=red size=5>(O  where pid=‘p01’)[cid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∩</mo></mrow><annotation encoding="application/x-tex">\cap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∩</span></span></span></span> (O  where pid=‘p02’)[cid]</font></p>
</blockquote>
<p><font color = blue size = 4>3. Get cnames of customers who order <font color = black size = 5>all products</font> ?</font></p>
<blockquote>
<p><font color = green>//出现求ALL(所有一类属性)的记录时，需要使用除法运算</font></p>
<p><font color=red size=5>First:</font>  get cids of customers who orders all products</p>
<p><font color=red size=5>T := ORDERS[cid , pid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> PRODUCTS[pid]</font></p>
</blockquote>
<blockquote>
<p><font color = blue size = 4><font color=red>注意：</font>//使用除法运算时，Dividend(被除数)中的属性经过除法运算后剩余属性也需要是候选键性质</font></p>
<p><font color=brown size = 5>1.Why must project PRODUCTS on pid ?</font></p>
<ul>
<li><font color = green size=5>columns of divisor must be subset of columns of dividend.</font></li>
</ul>
<p><font color=brown size=5>Why must project ORDERS on cid,pid?</font></p>
<ul>
<li><font color = green size = 5>We only try to find the value of the cid in ORDERS of the same for all cid.</font></li>
</ul>
</blockquote>
<blockquote>
<p><font color=red size=5>Second:</font> get names of customers</p>
<p><font color = red size = 5>T1 := ( ( T ) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> C ) [cname]</font></p>
</blockquote>
<p><font color = blue size = 4>4. Get names of customers who order  all products ordered by customer ‘c006’ ?</font></p>
<blockquote>
<p><font color=red size=5>Step 1:</font>  find all products ordered by customer ‘c006’</p>
<p><font color=red size=5>R1 := (ORDERS where cid = ‘c006’)[pid]</font></p>
<p><font color=red size = 5>Step 2:</font>  find cid of customers who order all products ordered by customer ‘c006’</p>
<p><font color=red size=5>R2 := ORDERS[cid,pid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span>R1</font></p>
<p><font color=red size = 5>Step 3:</font>  find cnames of customers</p>
<p><font color=red size=5>R3 := ( R2 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> C ) [ cname ]</font></p>
</blockquote>
<p><font color = blue size = 4>5. Get pid of products ordered through all agents ?</font></p>
<blockquote>
<p><font color=red size=5>ORDERS [ aid, pid ] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> AGENTS [ aid ]</font></p>
</blockquote>
<p><font color = blue size = 4>6. Get name of products ordered by all customers who live in Dallas ?</font></p>
<blockquote>
<p><font color=red size=5>R1 := (CUSTOMERS where city=‘Dallas’)[cid]</font></p>
<p><font color =red size=5>R2 := ORDERS [ cid, pid ] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> R1</font></p>
<p><font color = red size = 5>R3 := ( PRODUCTS <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> R2 )[ pname ]</font></p>
</blockquote>
<p><font color = blue size = 4>7. Get cids of customers who order all products priced at $0.50.</font></p>
<blockquote>
<p><font color = red size = 5>R1 := (PRODUCTS where price = 0.50) [pid]</font></p>
<p><font color = red size = 5>R2 := ORDERS [ cid, pid ] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> R1</font></p>
</blockquote>
<p><font color = blue size = 4>8. Get cids of customers who order all products that <font color = black size = 5>anybody</font> orders.</font></p>
<blockquote>
<p><font color = red size = 5>ORDERS [ cid, pid ] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> ORDERS [ pid ]</font></p>
</blockquote>
<br/>
<br/>
<blockquote>
<p><font color = green size = 5>条件：</font></p>
<p><font color = green size = 5>Customers: C(cid, cname, city, discnt)</font></p>
<p><font color = green size = 5>Agents: A(aid, aname, city, percent)</font></p>
<p><font color = green size = 5>Products: P(pid, pname, city, quantity, price)</font></p>
<p><font color = green size = 5>Orders: O(ordno, month, cid, aid, pid, qty, dollars)</font></p>
</blockquote>
<p><font color = blue size = 4>9. Get aids of agents who take orders on <font color = black size = 5>at least that set of products(相当于all the products)</font> ordered by c004.</font></p>
<blockquote>
<p><font color = red size = 5>O[aid, pid] ÷ (O where cid = ‘c004’)[pid]</font></p>
</blockquote>
<p><font color = blue size = 4>10. Get cids of customers who order p01 and p07.</font></p>
<blockquote>
<p><font color = red size = 5>(O where pid = ‘p01’)[cid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∩</mo></mrow><annotation encoding="application/x-tex">\cap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∩</span></span></span></span> (O where pid = ‘p07’)[cid]</font><font color = red size = 5>(正确)</font></p>
<p><font color = grey size = 5>(O where pid = ‘p01’ and pid = ‘p07’)[cid]</font><font color  = grey size = 5>(错误)</font></p>
</blockquote>
<p><font color = blue size = 4>11. Get cids of customers who order p01 or p07.</font></p>
<blockquote>
<p><font color = red size = 5>(O where pid=‘p01’)[cid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∪</span></span></span></span> (O where pid=‘p07’)[cid]</font></p>
<p><font color = green size = 4>或者</font></p>
<p><font color = red size = 5>(O where pid = ‘p01’ or pid = ‘p07’)[cid]</font></p>
</blockquote>
<p><font color = blue size = 4>12. List all cities inhabited by customers who order product p02 or agents who place an order for p02.</font></p>
<blockquote>
<p><font color = red size = 5>T1 := ((O where pid = ‘p02’) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> C)[city]</font></p>
<p><font color = red size = 5>T2 := ((O where pid = ‘p02’) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>  A)[city]</font></p>
<p><font color = red size = 5>T := T1 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∪</span></span></span></span> T2</font></p>
</blockquote>
<p><font color = blue size = 4>13. Get aids of agents who place an order for <font color = black size = 5>at least one customer</font> that uses product p01.</font></p>
<blockquote>
<p><font color = red size = 5>((O where pid = ‘p01’)[cid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> O) [aid]</font></p>
</blockquote>
<p><font color = blue size = 4>14. Get aids of agents who place orders for <font color = black size = 5>all customers</font> that uses product p01.</font></p>
<blockquote>
<p><font color = red size = 5>O[cid, aid] ÷ (O where pid =  ‘p01’)[cid]</font></p>
</blockquote>
<p><font color = blue size = 4>15. Retrieve product ids for all products that are <font color = black size = 5>not ordered by</font> any customers living in a city <font color = black size = 5>beginning with the letter “D”</font>.</font></p>
<blockquote>
<p><font color = red size = 5>T1  :=  C where <u>C.city &gt;= ‘D’ and C.city &lt; ‘E’</u></font></p>
<p><font color = red size = 5>T2  :=  P [ pid ] - ( O <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> T1 ) [ pid ]</font></p>
</blockquote>
<br/>
<br/>
<blockquote>
<p><font color = green size = 5>条件：</font></p>
<p><font color = green size = 5>Customers: C(cid, cname, city, discnt)</font></p>
</blockquote>
<p><font color = blue size = 4>16. Retrieve cids of customers with the <font color = black size = 5>largest</font> discounts.</font></p>
<blockquote>
<p><font color = green size = 5>Answer 1:</font></p>
<p><font color = red size = 5>1)CY := C</font></p>
<p><font color = red size = 5>2)T1:=((CY <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> C) where <u>CY.discnt &gt; C.discnt</u>)[C.cid]</font></p>
<p><font color = red size = 5>3)T2 := C[cid] - T1</font></p>
</blockquote>
<blockquote>
<p><font color = green size  = 5>Answer 2:</font></p>
<p><font color = red size = 5>1)CY := C</font></p>
<p><font color = red size = 5>2)T1(cyid, cid) := ((CY <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> C) where <u>CY.discnt &gt;= C.discnt</u>) [CY.cid, C.cid]</font></p>
<p><font color = red size = 5>3)T2 := T1 ÷ C[cid]</font></p>
</blockquote>
<br/>
<br/>
<blockquote>
<p><font color = green size = 5>条件：</font></p>
<p><font color = green size = 5>Customers: C(cid, cname, city, discnt)</font><br />
<font color = green size = 5>Agents: A(aid, aname, city, percent)</font><br />
<font color = green size = 5>Products: P(pid, pname, city, quantity, price)</font><br />
<font color = green size = 5>Orders: O(ordno, month, cid, aid, pid, qty, dollars)</font></p>
</blockquote>
<p><font color = blue size = 4>17. Get aids of agents who <font color = black size = 5>do not supply</font> product p02. </font></p>
<blockquote>
<p><font color = red size = 5>A[aid]  —  (O where pid = ‘p02’)[aid]</font></p>
</blockquote>
<p><font color = blue size = 4>18. Get aids of agents who <font color = black size = 5>supply only</font> product p02.</font></p>
<blockquote>
<p><font color = red size = 5>O[aid]  —  (O where pid &lt;&gt; ‘p02’)[aid]</font><font color = red size = 5>  (正确)</font><br />
<font color = grey size = 5>A[aid]  —  (O where pid &lt;&gt; ‘p02’)[aid]</font><font color = grey size = 5>  (错误)</font></p>
</blockquote>
<hr />
<h4 id="5-illustrative-examples示例"><a class="markdownIt-Anchor" href="#5-illustrative-examples示例"></a> 5) Illustrative Examples(示例)</h4>
<blockquote>
<p><font color = green size = 5>条件：</font></p>
<p><font color = green size = 5>Customers: C(cid, cname, city, discnt)</font></p>
<p><font color = green size = 5>Agents: A(aid, aname, city, percent)</font></p>
<p><font color = green size = 5>Products: P(pid, pname, city, quantity, price)</font></p>
<p><font color = green size = 5>Orders: O(ordno, month, cid, aid, pid, qty, dollars)</font></p>
</blockquote>
<p><font color = blue size = 4>1.Get the names of customers who order <font color = black size = 5>at least one product</font> priced at $0.50.</font></p>
<blockquote>
<p><font color = red size = 5>(((P where price=0.50)[pid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> O) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span> C) [cname]</font></p>
</blockquote>
<p><font color = blue size = 4>2.Find cids of all customers who <font color = black size = 5>don’t place</font> any order through agent a03.</font></p>
<blockquote>
<p><font color = red size = 5>C[cid] – (O where aid = ‘a03’) [cid]</font></p>
<p><font color = green size = 5>而不是O[cid] – (O where aid = ‘a03’) [cid]</font></p>
</blockquote>
<p><font color = blue size = 4>3.Retrieve customers who place orders <font color = black size = 5>only through</font> agent a03.</font></p>
<blockquote>
<p><font color = red size = 5>O[cid] – (O where aid <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span> ‘a03’) [cid]</font></p>
<p><font color = green size = 5>而不是C[cid] – (O where aid <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span> ‘a03’) [cid]</font></p>
</blockquote>
<p><font color = blue size = 4>4.More Complex One <font color = red><u>(Question And Steps)</u></font>:</font></p>
<br/>
<p><img data-src="https://image.zxkidea.top/databasenote4.png" alt="zxk" /></p>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>考研</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>DatabaseNotes-Ch10</title>
    <url>/posts/7755ff13.html</url>
    <content><![CDATA[<h2 id="ch10-update-transaction"><a class="markdownIt-Anchor" href="#ch10-update-transaction"></a> Ch10.  Update Transaction</h2>
<h3 id="1-事务及其特性"><a class="markdownIt-Anchor" href="#1-事务及其特性"></a> 1. 事务及其特性：</h3>
<p><font color = green size = 4>事务：</font>是访问和更新数据库的程序执行单元；事务中可能包含一个或多个SQL语句，这些语句要么都执行，要么都不执行。</p>
<br/>
<p><font color = green size = 4>事务的四大特性：ACID</font></p>
<span id="more"></span>
<ul>
<li>
<p><font color = blue>原子性（Atomicity）</font></p>
<blockquote>
<p>原子性是指一个事务是一个不可分割的工作单位，其中的操作要么都做，要么都不做；如果事务中一个SQL语句执行失败，则已执行的语句也必须回滚，数据库退回到事务前的状态。</p>
<p><font color = red>注：</font><font color = green>MySQL 使用 undo log 来保证事务的原子性。</font></p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>持久性（Durability）</font></p>
<blockquote>
<p>持久性是指事务一旦提交，它对数据库的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</p>
<p><font color = red>注：</font><font color = green>MySQL 使用 redo log 来保证事务的持久性。</font></p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>隔离性（Isolation）</font></p>
<blockquote>
<p>与原子性、持久性侧重于研究事务本身不同，隔高性研究的是不同事务之间的相互影响。隔离性是指，事务内部的操作与其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p>
<p><font color = red>注：</font><font color = green>MySQL 通过锁机制来保证事务的隔离性。</font></p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>一致性（Consistency）</font></p>
<blockquote>
<p>一致性是指事务执行结束后，数据库的完整性约束没有被破坏，事务执行的前后都是合法的数据状态；</p>
<p>数据库的完整性约束包括但不限于：实体完整性（如行的主键存在且唯一）、列完整性（如字段的类型、大小、长度要符合要求）、外键约束、用户自定义完整性（如转账前后，两个账户余额的和应该不变）。</p>
</blockquote>
</li>
</ul>
<br/>
<h3 id="2-事务操作"><a class="markdownIt-Anchor" href="#2-事务操作"></a> 2. 事务操作：</h3>
<p><font color = green size = 4>典型的事务操作：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start transaction;</span><br><span class="line">……  # 一条或多条sql语句</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中start transaction标识事务开始，commit提交事务，将执行结果写入到数据库。如果SQL语句执行出现问题，会调用rollback，回滚所有已经执行成功的SQL语句。当然，也可以在事务中直接使用rollback语句进行回滚。</p>
</blockquote>
<br/>
<p><font color = green size = 4>特殊操作：</font></p>
<blockquote>
<p>在MySQL中，存在一些特殊的命令，如果在事务中执行了这些命令，会马上强制执行commit提交事务；如DDL语句(create table/drop table/alter/table)、lock tables语句等等。</p>
</blockquote>
<p><font color = brown>不过，常用的select、insert、update和delete命令，都不会强制提交事务。</font></p>
<br/>
<h3 id="3-事务的实现"><a class="markdownIt-Anchor" href="#3-事务的实现"></a> 3. 事务的实现</h3>
<h4 id="1-undo-log回滚日志"><a class="markdownIt-Anchor" href="#1-undo-log回滚日志"></a> 1. undo log（回滚日志）</h4>
<ul>
<li>
<p><font color = green size = 4>InnoDB实现回滚，靠的是undo log：</font></p>
<blockquote>
<p>当事务对数据库进行修改时，InnoDB会生成对应的undo log；如果事务执行失败或调用了rollback，导致事务需要回滚，便可以利用undo log中的信息将数据回滚到修改之前的样子。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>undo log属于逻辑日志，它记录的是SQL执行相关的信息：</font></p>
<blockquote>
<p>当发生回滚时，InnoDB会根据undo log的内容做与之前相反的工作：对于每个insert，回滚时会执行delete；对于每个delete，回滚时会执行insert；对于每个update，回滚时会执行一个相反的update，把数据改回去。</p>
</blockquote>
</li>
</ul>
<p><img data-src="https://image.zxkidea.top/blog/20200308/EjXsxnPSPXiV.png?imageslim" alt="zxk" /></p>
<br/>
<h4 id="2-redo-log重做日志"><a class="markdownIt-Anchor" href="#2-redo-log重做日志"></a> 2. redo log（重做日志）</h4>
<ul>
<li>
<p><font color = green size = 4>更新流程</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/Py2TYgYapShW.png?imageslim" alt="zxk" /></p>
<ul>
<li>执行update操作。</li>
<li>先将原始数据从磁盘读取到内存，修改内存中的数据。</li>
<li>生成一条重做日志写入redo log buffer，记录数据被修改后的值。</li>
<li>当事务提交时，需要将redo log buffer中的内容刷新到redo log file。</li>
<li>事务提交后，也会将内存中修改数据的值写入磁盘。</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>恢复机制</font></p>
<blockquote>
<p>于是，redo log被引入来解决这个问题：当数据修改时，除了修改缓冲区中的数据，还会在redo log记录这次操作；当事务提交时，会调用fsync接口对redo log进行刷盘。如果MySQL宕机，重启时可以读取redo log中的数据，对数据库进行恢复。</p>
</blockquote>
<br/>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">redo log实现事务的原子性和持久性：</span></p>
<ul>
<li>原子性，是redo log记录了事务期间操作的物理日志，事务提交之前，并没有写入磁盘，保存在内存里，如果事务失败，数据库磁盘不会有影响，回滚掉事务内存部分即可。</li>
<li>持久性，redo log 会在事务提交时将日志存储到磁盘redo log file，保证日志的持久性。</li>
</ul>
</li>
</ul>
<br/>
<h3 id="4-事务的隔离级别"><a class="markdownIt-Anchor" href="#4-事务的隔离级别"></a> 4. 事务的隔离级别</h3>
<p><img data-src="https://image.zxkidea.top/blog/20200308/EK19I1B5Ynqm.png?imageslim" alt="zxk" /></p>
<br/>
<h4 id="1-read-uncommitted"><a class="markdownIt-Anchor" href="#1-read-uncommitted"></a> 1. READ-UNCOMMITTED</h4>
<p><font color = green>READ-UNCOMMITTED 中文叫未提交读，即一个事务读到了另一个未提交事务修改过的数据，整个过程如下图:</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/Y48xImrVT3X2.png?imageslim" alt="zxk" /></p>
<blockquote>
<p>如上图，SessionA和SessionB分别开启一个事务，SessionB中的事务先将id为1的记录的name列更新为’lisi’，然后SessionA中的事务再去查询这条id为1的记录，那么在未提交读的隔离级别下，查询结果由’zhangsan’变成了’lisi’，也就是说某个事务读到了另一个未提交事务修改过的记录。但是如果SessionB中的事务稍后进行了回滚，那么SessionA中的事务相当于读到了一个不存在的数据，这种现象也称为<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">脏读</span>。</p>
</blockquote>
<br/>
<h4 id="2-read-committed"><a class="markdownIt-Anchor" href="#2-read-committed"></a> 2. READ COMMITTED</h4>
<p><font color = green>READ COMMITTED 中文叫已提交读，或者叫不可重复读。即一个事务能读到另一个已经提交事务修改后的数据，如果其他事务均对该数据进行修改并提交，该事务也能查询到最新值。如下图:</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/PMYGTQlwvl1b.png?imageslim" alt="zxk" /></p>
<blockquote>
<p>在SessionA中先后两次读取同一个数据，两次读取的结果不一样；在第4步 SessionB 修改后，如果未提交，SessionA是读不到，但SessionB一旦提交后，SessionA即可读到SessionB修改的内容。</p>
</blockquote>
<br/>
<h4 id="3-repeatable-read"><a class="markdownIt-Anchor" href="#3-repeatable-read"></a> 3. REPEATABLE READ</h4>
<p><font color = green>REPEATABLE READ 中文叫可重复读，即事务能读到另一个已经提交的事务修改过的数据，但是第一次读过某条记录后，即使后面其他事务修改了该记录的值并且提交，该事务之后再读该条记录时，读到的仍是第一次读到的值，而不是每次都读到不同的数据。如下图:</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/qPMDkMLIGmDm.png?imageslim" alt="zxk" /></p>
<blockquote>
<p>InnoDB<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">默认</span>是这种隔离级别，SessionB无论怎么修改id=1的值，SessionA读到依然是自己开启事务第一次读到的内容；但是可能会出现<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">幻读现象</span>。</p>
</blockquote>
<br/>
<h4 id="4-serializable"><a class="markdownIt-Anchor" href="#4-serializable"></a> 4. SERIALIZABLE</h4>
<p><font color = green>SERIALIZABLE 叫串行化， 上面三种隔离级别可以进行 读-读 或者 读-写、写-读三种并发操作，而SERIALIZABLE不允许读-写，写-读的并发操作。 如下图:</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/rpRJ6Pp9pWcL.png?imageslim" alt="zxk" /></p>
<blockquote>
<p>SessionB 对 id=1 进行修改的时候，SessionA 读取id=1则需要等待 SessionB 提交事务。可以理解SessionB在更新的时候加了X锁。</p>
</blockquote>
<br/>
<ul>
<li>
<p><font color = red size = 4>幻读：</font></p>
<p><font color = green>在事务A中按照某个条件先后两次查询数据库，两次查询结果的条数不同，这种现象称为幻读。不可重复读与幻读的区别可以通俗的理解为：前者是数据变了，后者是数据的行数变了。</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/O6gfdeqVrpXI.png?imageslim" alt="zxk" /></p>
</li>
</ul>
<br/>
<h4 id="5-隔离级别与读问题的关系"><a class="markdownIt-Anchor" href="#5-隔离级别与读问题的关系"></a> 5. 隔离级别与读问题的关系</h4>
<p><img data-src="https://image.zxkidea.top/blog/20200308/ExlJ4uV9oYI2.png?imageslim" alt="zxk" /></p>
<blockquote>
<p>在实际应用中，读未提交在并发时会导致很多问题，而性能相对于其他隔离级别提高却很有限，因此使用较少。可串行化强制事务串行，并发效率很低，只有当对数据一致性要求极高且可以接受没有并发时使用，因此使用也较少。因此在大多数数据库系统中，默认的隔离级别是读已提交(如Oracle)或可重复读。</p>
</blockquote>
<br/>
<h3 id="5-锁机制"><a class="markdownIt-Anchor" href="#5-锁机制"></a> 5. 锁机制</h3>
<p><font color = green size = 4>锁机制使得在对数据库进行并发访问时，可以保障数据的完整性和一致性。</font></p>
<blockquote>
<p><font color = red size = 4>基本原理：</font></p>
<p>事务在修改数据之前，需要先获得相应的锁；获得锁之后，事务便可以修改数据；该事务操作期间，这部分数据是锁定的，其他事务如果需要修改数据，需要等待当前事务提交或回滚后释放锁。</p>
</blockquote>
<br/>
<h4 id="1-锁的类型"><a class="markdownIt-Anchor" href="#1-锁的类型"></a> 1. 锁的类型</h4>
<ul>
<li>
<p><font color = green>共享锁（也称为 S 锁）：</font>允许事务读取一行数据。</p>
<blockquote>
<p>共享锁又称为读锁。若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁为止。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 手动加S锁</span><br><span class="line">select * from tableName where … lock in share mode;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green>排他锁（也称为 X 锁）：</font>允许事务删除或更新一行数据。</p>
<blockquote>
<p>排他锁又称为写锁。若事务T对数据对象A加上X锁，则只允许T读取和修改A，其他任何事务都不能再对A加任何类型的锁，直到T释放A上的锁为止。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 手动加 X 锁</span><br><span class="line">select * from tableName where … for update; </span><br></pre></td></tr></table></figure>
<br/>
<img data-src="https://image.zxkidea.top/blog/20200309/lUJVMrtKqSft.png?imageslim" alt="zxk" style="zoom:50%;" />
</li>
</ul>
<blockquote>
<p>S 锁和 S 锁是兼容的，X 锁和其它锁都不兼容，举个例子，事务 T1 获取了一个行 r1 的 S 锁，另外事务 T2 可以立即获得行 r1 的 S 锁，此时 T1 和 T2 共同获得行 r1 的 S 锁，此种情况称为锁兼容，但是另外一个事务 T2 此时如果想获得行 r1 的 X 锁，则必须等待 T1 对行 r 锁的释放，此种情况也成为锁冲突。</p>
</blockquote>
<br/>
<ul>
<li><font color = green>更新锁：</font>更新锁的初始化阶段用来锁定可能要被修改的资源，这可以避免使用共享锁造成的死锁现象。</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green>意向锁：</font>设计目的是为了在一个事务中揭示下一步将要被请求的锁的类型，使得行锁和表锁共存。</p>
<blockquote>
<p>当一个事务在需要获取资源的锁定时，如果该资源已经被排他锁占用，则数据库会自动给该事务申请一个该表的意向锁。如果自己需要一个共享锁定，就申请一个意向共享锁。如果需要的是某行（或者某些行）的排他锁定，则申请一个意向排他锁。</p>
</blockquote>
</li>
</ul>
<br/>
<h4 id="2-锁的优化"><a class="markdownIt-Anchor" href="#2-锁的优化"></a> 2. 锁的优化</h4>
<p><font color = green size = 4>锁如果利用不好，会给业务造成大量的卡顿现象，在了解了锁相关的一些知识点后，我们可以有意识的去避免锁带来的一些问题。</font></p>
<ul>
<li>合理设计索引，让 InnoDB 在索引键上面加锁的时候尽可能准确，尽可能的缩小锁定范围，避免造成不必要的锁定而影响其他 Query 的执行。</li>
<li>尽可能减少基于范围的数据检索过滤条件，避免因为间隙锁带来的负面影响而锁定了不该锁定的记录。</li>
<li>尽量控制事务的大小，减少锁定的资源量和锁定时间长度</li>
<li>在业务环境允许的情况下，尽量使用较低级别的事务隔离，以减少 MySQL 因为实现事务隔离级别所带来的附加成本。</li>
</ul>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>考研</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>DatabaseNotes-Ch3,4</title>
    <url>/posts/928c862a.html</url>
    <content><![CDATA[<h2 id="ch3-basic-sql-query-language"><a class="markdownIt-Anchor" href="#ch3-basic-sql-query-language"></a> Ch3:  Basic SQL Query Language</h2>
<h3 id="一-setting-up-the-database"><a class="markdownIt-Anchor" href="#一-setting-up-the-database"></a> 一. Setting up the Database</h3>
<h4 id="1-sql-datatype"><a class="markdownIt-Anchor" href="#1-sql-datatype"></a> 1. SQL  Datatype</h4>
<p><font color = blue size = 4>CHARACTER(n), CHAR(n)：</font> fixed-length character strings</p>
<p><font color = blue size = 4>CHARACTER VARYING(n), CHAR VARYING(n)：</font>variable-length character strings</p>
<p><font color = blue size = 4>NUMERIC(p, s), DECIMAL(p, s), DEC(p, s):</font></p>
<span id="more"></span>
<p><font color = blue size = 4>Precision:</font> total number of digits</p>
<p><font color = blue size = 4>Scale：</font>number of digits to the right of the decimal point</p>
<p><font color = blue size = 4>INTEGER, INT, SMALLINT</font></p>
<p><font color = blue size = 4>FLOAT(p)</font></p>
<p><font color = blue size = 4>REAL</font></p>
<p><font color = blue size = 4>DOUBLE PRECISION</font></p>
<br/>
<h4 id="2oracle-datatype"><a class="markdownIt-Anchor" href="#2oracle-datatype"></a> 2.Oracle  Datatype</h4>
<p><font color = blue size = 4>Character Datatype</font></p>
<blockquote>
<p>CHAR(n)：fixed-length character strings(1<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span> n $\leq$2000)</p>
<p>VARCHAR(n)：variable-length character strings(1<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span> n <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>≤</mo></mrow><annotation encoding="application/x-tex">\leq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">≤</span></span></span></span> 4000)</p>
<p>LONG：variable-length character data(text data) (maximum size 2GB)</p>
</blockquote>
<br/>
<p><font color = blue size = 4>NUMBER Datatype</font></p>
<blockquote>
<p>NUMBER：fixed and floating-point numbers</p>
<p>NUMBER(precision, scale)</p>
<p>NUMBER(*, scale)</p>
<p>Precision：total number of digits</p>
<p>Scale：number of digits to the right of the decimal point(default value is zero)</p>
<p>Negative Scale：rounds the actual data to the specified number of places to the left of the decimal point</p>
</blockquote>
<br/>
<h4 id="3sql-statement"><a class="markdownIt-Anchor" href="#3sql-statement"></a> 3.SQL  Statement</h4>
<h5 id="1-sql-statements-for-table-creation-for-cap-database"><a class="markdownIt-Anchor" href="#1-sql-statements-for-table-creation-for-cap-database"></a> 1)  SQL statements for table creation for CAP database</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  orders (</span><br><span class="line">cid <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">cname <span class="type">VARCHAR</span>(<span class="number">13</span>),</span><br><span class="line">city <span class="type">VARCHAR</span>(<span class="number">20</span>),</span><br><span class="line">discnt <span class="type">REAL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(cid) );</span><br></pre></td></tr></table></figure>
<br/>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  orders (</span><br><span class="line">ordno <span class="type">INTEGER</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">month</span> <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">cid <span class="type">CHAR</span>(<span class="number">4</span>),</span><br><span class="line">aid <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">pid <span class="type">CHAR</span>(<span class="number">3</span>),</span><br><span class="line">qty <span class="type">INTEGER</span>,</span><br><span class="line">dollars <span class="type">DOUBLE PRECISION</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY(ordno) );</span><br></pre></td></tr></table></figure>
<br/>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- MYSQL</span><br><span class="line">create table Student(</span><br><span class="line">    Sno int not null auto_increment primary key,</span><br><span class="line">    Sname varchar(10) not null,</span><br><span class="line">    Sex char(1) not null,</span><br><span class="line">    Sage tinyint(100) not null,</span><br><span class="line">    Sdept char(4) not null)comment = &#x27;学生表&#x27;;</span><br></pre></td></tr></table></figure>
<br/>
<h5 id="2-select-statement"><a class="markdownIt-Anchor" href="#2-select-statement"></a> 2) Select Statement</h5>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span> <span class="operator">|</span> colname &#123; , colname ... &#125;</span><br><span class="line"><span class="keyword">FROM</span>  tablename &#123; , tablename ... &#125;</span><br><span class="line">[ <span class="keyword">WHERE</span> search_condition ]</span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span> colname &#123; , colname ... &#125;</span><br><span class="line">[ <span class="keyword">HAVING</span> search_condition ] ]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> colname [ <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> ]</span><br><span class="line">&#123; , colname [ <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> ] ... &#125; ];</span><br></pre></td></tr></table></figure>
<br/>
<hr />
<h3 id="二-simple-select-statements"><a class="markdownIt-Anchor" href="#二-simple-select-statements"></a> 二. Simple Select Statements</h3>
<h4 id="1-relational-algebra与sql语法对比"><a class="markdownIt-Anchor" href="#1-relational-algebra与sql语法对比"></a> 1. Relational Algebra与SQL语法对比</h4>
<p><font color = blue size = 4>1. Query in relational algebra :</font></p>
<blockquote>
<p><font color = green size = 4>(R where Condition) [A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, …, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>]</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>Query in SQL:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> A1, A2,...,Am <span class="keyword">from</span> R <span class="keyword">where</span> <span class="keyword">Condition</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Query in relational algebra :</font></p>
<blockquote>
<p><font color = green size = 4>((R<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span> R<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span>…<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>×</mo></mrow><annotation encoding="application/x-tex">\times</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">×</span></span></span></span>R<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>) where Condition) [A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, …, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>]</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>Query in SQL:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> A1, A2,...,Am <span class="keyword">from</span> R1, R2,...,Rn <span class="keyword">where</span> <span class="keyword">Condition</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Query in relational algebra :</font></p>
<blockquote>
<p><font color = green size = 4>Head® = {A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.486108em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>}, Head(S) = {B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>k</mi></msub></mrow><annotation encoding="application/x-tex">_k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.486108em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,…,C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>}</font></p>
<p><font color = green size = 4>((R<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>S) where Condition) [A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, …, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>]</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>Query in SQL:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> A1, A2,...,Am <span class="keyword">from</span> R, S <span class="keyword">where</span> <span class="keyword">Condition</span> <span class="keyword">and</span> R.B1 <span class="operator">=</span> S.B1 <span class="keyword">and</span> R2.B2 <span class="operator">=</span> S.B2 and...and R.Bk <span class="operator">=</span> S.Bk;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Query in relational algebra :</font></p>
<blockquote>
<p><font color = green size = 4>(R <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mrow><mi>C</mi><mi>o</mi><mi>n</mi><mi>d</mi><mi>i</mi><mi>t</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">_{Condition}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.486108em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">C</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>S) [A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.45110799999999995em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>, …, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mrow></mrow><mi>m</mi></msub></mrow><annotation encoding="application/x-tex">_m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.301392em;vertical-align:-0.15em;"></span><span class="mord"><span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>]</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>Query in SQL:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> A1, A2,...,Am <span class="keyword">from</span> R,S <span class="keyword">where</span> <span class="keyword">Condition</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>5. Query in relational algebra :</font></p>
<blockquote>
<p><font color = green size = 4>(AGENTS where city = ‘New York’) [aid, aname]</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>Query in SQL:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> aid, aname <span class="keyword">from</span> agents <span class="keyword">where</span> city <span class="operator">=</span> <span class="string">&#x27;New York&#x27;</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>6. Query in relational algebra :</font></p>
<blockquote>
<p><font color = green size = 4>(CUSTOMERS) [cid, cname, city, discnt]</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>Query in SQL:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> Customers;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> cid, cname, city, discnt <span class="keyword">from</span> Customers;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>7. Query in relational algebra :</font></p>
<blockquote>
<p><font color = green size = 4>((C[cid, cname] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>O)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>A) [cname, aname]; </font></p>
<p><font color = green size = 4>((C <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>O <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span></span></span></span>A) where C.cid = O.cid and O.aid = A.aid) [cname, aname]</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>Query in SQL:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">distinct</span> cname, aname <span class="keyword">from</span> customers, orders, agents <span class="keyword">where</span> customers.cid <span class="operator">=</span> orders.cid <span class="keyword">and</span> orders.aid <span class="operator">=</span> agents.aid;</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="2-some-examples"><a class="markdownIt-Anchor" href="#2-some-examples"></a> 2. Some Examples</h4>
<p><font color = blue size = 4>1. Display all values of customers in table CUSTOMERS.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid, cname, city, discnt  <span class="keyword">FROM</span>  customers ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span>  <span class="keyword">FROM</span>  customers ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Retrieve all (cname, aname) pairs where the customer places an order through the agent.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname, aname</span><br><span class="line"><span class="keyword">FROM</span>      customers, orders, agents</span><br><span class="line"><span class="keyword">WHERE</span>   customers.cid<span class="operator">=</span>orders.cid <span class="keyword">and</span> orders.aid<span class="operator">=</span>agents.aid ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname, aname</span><br><span class="line"><span class="keyword">FROM</span>   customers c, orders  o, agents  a  <span class="comment">-- (has alias)</span></span><br><span class="line"><span class="keyword">WHERE</span>   c.cid<span class="operator">=</span>o.cid  <span class="keyword">and</span>  o.aid<span class="operator">=</span>a.aid ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Get the names of customers who order at least one product priced at $0.50.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>  products  p, orders  o, customers  c</span><br><span class="line"><span class="keyword">WHERE</span>  price<span class="operator">=</span><span class="number">0.50</span> <span class="keyword">and</span> p.pid<span class="operator">=</span>o.pid <span class="keyword">and</span></span><br><span class="line">o.cid<span class="operator">=</span>c.cid ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Retrieve customers who place orders only through agent a03.</font></p>
<blockquote>
<p><font color = green>O [cid] - (O where aid &lt;&gt; ‘a03’) [cid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  o1.cid</span><br><span class="line"><span class="keyword">FROM</span>    orders  o1</span><br><span class="line"><span class="keyword">WHERE</span>  o1.cid  <span class="keyword">NOT</span> <span class="keyword">IN</span>  (</span><br><span class="line">	<span class="keyword">SELECT</span> o2.cid</span><br><span class="line">	<span class="keyword">FROM</span>  orders  o2</span><br><span class="line">	<span class="keyword">WHERE</span>  o2.aid <span class="operator">&lt;&gt;</span> ‘a03’  ) ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>5. List all pairs of customer cids based in the same city.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> c1.cid, c2.cid <span class="keyword">from</span> customers c1, customers c2 <span class="keyword">where</span> c1.city <span class="operator">=</span> c2.city <span class="keyword">and</span> c1.cid <span class="operator">&lt;</span> c2.cid;</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="3-table-and-column-alias"><a class="markdownIt-Anchor" href="#3-table-and-column-alias"></a> 3. Table and column alias</h4>
<p><font color = blue size = 4>Table alias in FROM clause</font></p>
<blockquote>
<p><font color = green size = 4>方法1</font>：table_name  as  alias_name</p>
<p><font color = green size = 4>方法2：</font>table_name   alias_name</p>
</blockquote>
<p><font color = blue size = 4>column alias in SELECT clause</font></p>
<blockquote>
<p>column_name  as  alias_name</p>
</blockquote>
<br/>
<h4 id="4-all-distinct"><a class="markdownIt-Anchor" href="#4-all-distinct"></a> 4. ALL  |  DISTINCT</h4>
<blockquote>
<p>SELECT  aid, pid  FROM  orders ;</p>
<p>SELECT  <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">distinct</span>  aid, pid  FROM  orders ;</p>
</blockquote>
<br/>
<p><font color = blue size = 4>Find pids of products ordered by at least two customers.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  pid</span><br><span class="line"><span class="keyword">FROM</span>   orders  x1,  orders  x2</span><br><span class="line"><span class="keyword">WHERE</span>   x1.pid <span class="operator">=</span> x2.pid <span class="keyword">and</span> x1.cid <span class="operator">&lt;</span> x2.cid ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  pid</span><br><span class="line"><span class="keyword">FROM</span>   orders  x1,  orders  x2</span><br><span class="line"><span class="keyword">WHERE</span>   x1.pid <span class="operator">=</span> x2.pid <span class="keyword">and</span> x1.cid <span class="operator">&lt;&gt;</span> x2.cid ; </span><br></pre></td></tr></table></figure>
<br/>
<hr />
<h3 id="三-subqueries"><a class="markdownIt-Anchor" href="#三-subqueries"></a> 三. Subqueries</h3>
<h4 id="1-the-in-predicate"><a class="markdownIt-Anchor" href="#1-the-in-predicate"></a> 1. The IN Predicate</h4>
<p><font color = blue size = 4>1. Retrieve cids of customers who place orders with agents in Duluth or Dallas.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">distinct</span>  cid</span><br><span class="line"><span class="keyword">from</span>    orders  o, agents  a</span><br><span class="line"><span class="keyword">where</span>  a.aid<span class="operator">=</span>o.aid  <span class="keyword">and</span></span><br><span class="line">(a.city<span class="operator">=</span>‘Duluth’ <span class="keyword">or</span> a.city<span class="operator">=</span>‘Dallas’);       <span class="comment">-- Slow </span></span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span>  cid</span><br><span class="line"><span class="keyword">from</span>  orders</span><br><span class="line"><span class="keyword">where</span>   aid <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">select</span>  aid</span><br><span class="line"><span class="keyword">from</span>  agents</span><br><span class="line"><span class="keyword">where</span>  city<span class="operator">=</span> ‘Duluth’  <span class="keyword">or</span>  city<span class="operator">=</span>‘Dallas’ );      <span class="comment">-- Fast</span></span><br></pre></td></tr></table></figure>
<br/>
<p><font color =blue size = 4>2. Get all information concerning agents based in Duluth or Dallas.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  agents</span><br><span class="line"><span class="keyword">WHERE</span>  city <span class="keyword">IN</span> &#123; ‘Duluth’, ‘Dallas’ &#125; ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Get the names and discounts of all customers who place orders through agents in Duluth or Dallas.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cname,  discnt</span><br><span class="line"><span class="keyword">FROM</span>      customers</span><br><span class="line"><span class="keyword">WHERE</span>  cid  <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span>  o.cid</span><br><span class="line"><span class="keyword">FROM</span>      orders  o</span><br><span class="line"><span class="keyword">WHERE</span>  o.aid  <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span>  a.aid</span><br><span class="line"><span class="keyword">FROM</span>      agents  a</span><br><span class="line"><span class="keyword">WHERE</span>  a.city <span class="keyword">IN</span> (‘Duluth’, ‘Dallas’))) ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Find the names of customers who order product p05.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">distinct</span> cname </span><br><span class="line"><span class="keyword">from</span> customers c, orders o </span><br><span class="line"><span class="keyword">where</span> c.cid <span class="operator">=</span> o.cid <span class="keyword">and</span> o.pid <span class="operator">=</span> <span class="string">&#x27;p05&#x27;</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">distinct</span> cname </span><br><span class="line"><span class="keyword">from</span> customers c </span><br><span class="line"><span class="keyword">where</span> <span class="string">&#x27;p05&#x27;</span> <span class="keyword">IN</span> (</span><br><span class="line">    <span class="keyword">Select</span> pid <span class="keyword">from</span> orders o</span><br><span class="line">	<span class="keyword">where</span> o.cid <span class="operator">=</span> c.id);</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>5. Get cids of customers who place an order through at least one agent who places an order for product p03</font></p>
<blockquote>
<p><font color = green size = 4>T<sub>1</sub> := (O where pid = ‘p03’) [aid]</font></p>
<p><font color = green size = 4>T<sub>2</sub> := (T<sub>1</sub> $\infty $ O) [cid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> o2.cid <span class="keyword">from</span> orders o1, orders o2</span><br><span class="line"><span class="keyword">where</span> o1.pid <span class="operator">=</span> <span class="string">&#x27;p03&#x27;</span> <span class="keyword">and</span> o1.aid <span class="operator">=</span> o2.pid;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> o2.cid <span class="keyword">from</span> orders o2 <span class="keyword">where</span> o2.aid <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">select</span> o1.aid <span class="keyword">from</span> orders o1 <span class="keyword">where</span> o1.pid <span class="operator">=</span> <span class="string">&#x27;p03&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>6. Get cids of all customers who <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">have the same discount</span> as any customer in Dallas or Boston.</font></p>
<blockquote>
<p><font color = green size = 4>T<sub>1</sub> := (C where city = ‘Dallas’ or city = ‘Boston’) [discnt]</font></p>
<p><font color = green size = 4>T<sub>2</sub> := (T<sub>1</sub> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi><mtext> </mtext></mrow><annotation encoding="application/x-tex">\infty </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span><span class="mord"> </span></span></span></span> C) [cid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c2.cid <span class="keyword">from</span> customers c1, customers c2</span><br><span class="line"><span class="keyword">where</span> (c1.city <span class="operator">=</span> <span class="string">&#x27;Dallas&#x27;</span> <span class="keyword">or</span> c1.city <span class="operator">=</span> <span class="string">&#x27;Boston&#x27;</span>) <span class="keyword">and</span> c1.discnt <span class="operator">=</span> c2.discnt;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> c2.cid <span class="keyword">from</span> customers c2 <span class="keyword">where</span> c2.discnt <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">select</span> c1.discnt <span class="keyword">from</span> customers c1 <span class="keyword">where</span> c1.city <span class="operator">=</span> <span class="string">&#x27;Dallas&#x27;</span> <span class="keyword">or</span> c1.city <span class="operator">=</span> <span class="string">&#x27;Boston&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>7. Get pids of products not ordered by any customer living in a city whose name begin with the letter D.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.pid <span class="keyword">from</span> products p <span class="keyword">where</span> p.pid <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">select</span> o.pid <span class="keyword">from</span> orders o, customers c <span class="keyword">where</span></span><br><span class="line">o.cid <span class="operator">=</span> c.cid <span class="keyword">and</span> c.city <span class="keyword">LIKE</span> <span class="string">&#x27;D%&#x27;</span>);</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = red size = 5>注意：IN 操作符允许您在 WHERE 子句中规定多个值。</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>4. Find ordno values for all orders placed by customers in Duluth through agents in New York.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  ordno</span><br><span class="line"><span class="keyword">FROM</span>  orders</span><br><span class="line"><span class="keyword">WHERE</span>  (cid, aid)  <span class="keyword">IN</span>		<span class="comment">-- IN的多组值的合并判断</span></span><br><span class="line">(<span class="keyword">select</span>  cid, aid</span><br><span class="line"><span class="keyword">from</span>    customers  c,  agents  a</span><br><span class="line"><span class="keyword">where</span>   c.city<span class="operator">=</span>‘Duluth’ <span class="keyword">and</span> a.city<span class="operator">=</span>‘<span class="keyword">New</span> York’);</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="2-the-quantified-comparison-predicate"><a class="markdownIt-Anchor" href="#2-the-quantified-comparison-predicate"></a> 2. The Quantified Comparison Predicate</h4>
<p><font color = blue size = 5>expr <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Θ</mi></mrow><annotation encoding="application/x-tex">\Theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Θ</span></span></span></span> { SOME | ANY | ALL } ( subquery )</font></p>
<blockquote>
<p><font color = green size = 4>IN is =SOME，=ANY</font></p>
<p><font color = green size = 4>NOT IN is &lt;&gt;ALL</font></p>
<p><font color = red size = 4>注意：</font><font color = green size = 4>主要用于某一类属性值的比较；或用于替代IN；或求某一类属性最大/最小时的其他属性的值</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>1. Find aid values of agents with a <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">minimum percent</span> commission.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  aid</span><br><span class="line"><span class="keyword">FROM</span>  agents</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="keyword">percent</span> <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (</span><br><span class="line">		<span class="keyword">select</span> <span class="keyword">percent</span> <span class="keyword">from</span> agents  ) ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> aid</span><br><span class="line"><span class="keyword">From</span> agents</span><br><span class="line"><span class="keyword">Where</span> <span class="keyword">percent</span> <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">Select</span> <span class="built_in">min</span>(<span class="keyword">percent</span>) <span class="keyword">from</span> agents );</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Find all customers who have the same discount as that of any of the customers in Dallas or Boston.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid,  cname</span><br><span class="line"><span class="keyword">FROM</span>   customers</span><br><span class="line"><span class="keyword">WHERE</span>  discnt <span class="operator">=</span> <span class="keyword">SOME</span> (</span><br><span class="line">		<span class="keyword">select</span>  discnt</span><br><span class="line">		<span class="keyword">from</span>   customers</span><br><span class="line">		<span class="keyword">where</span>  city<span class="operator">=</span>‘Dallas’  <span class="keyword">or</span>  city<span class="operator">=</span>‘Boston’  ) ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Get cid values of customers with discnt smaller than those of any customers who live in Duluth.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid,  cname</span><br><span class="line"><span class="keyword">FROM</span>   customers</span><br><span class="line"><span class="keyword">WHERE</span>  discnt <span class="operator">&lt;</span> <span class="keyword">ALL</span>  (</span><br><span class="line">		<span class="keyword">select</span>  discnt</span><br><span class="line">		<span class="keyword">from</span>   customers</span><br><span class="line">		<span class="keyword">where</span>  city<span class="operator">=</span>‘Duluth’  ) ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Find cid values of customers with discnt smaller than a customer who lives in Duluth.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid</span><br><span class="line"><span class="keyword">FROM</span>   customers</span><br><span class="line"><span class="keyword">WHERE</span>  discnt <span class="operator">&lt;</span> <span class="keyword">SOME</span> ( </span><br><span class="line">  		<span class="keyword">SELECT</span>  discnt</span><br><span class="line">		<span class="keyword">FROM</span>  customers</span><br><span class="line">		<span class="keyword">WHERE</span>  city <span class="operator">=</span> ‘Duluth’ ) ;</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = red size = 5>注意：</font></p>
<p><font color = green size = 4>1) &gt; ALL 父查询中的结果集大于子查询中每一个结果集中的值,则为真</font></p>
<p><font color = green size = 4>2) &gt; ANY, SOME 父查询中的结果集大于子查询中任意一个结果集中的值,则为真</font></p>
<p><font color = green size = 4>3) = ANY 与子查询 IN相同</font></p>
<p><font color = green size = 4>4) &lt;&gt; ANY 与 NOT IN 父查询中的结果集不等于子查询中的a或者b或者c,则为真 </font></p>
</blockquote>
<br/>
<h4 id="3-the-exists-predicate"><a class="markdownIt-Anchor" href="#3-the-exists-predicate"></a> 3. The EXISTS Predicate</h4>
<p><font color = red Size = 5>实例：</font></p>
<p><font color = green size = 4>exists,not exists的使用方法示例，需要的朋友可以参考下。</font></p>
<p><font color = red size = 4>学生表：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_student</span><br><span class="line">(</span><br><span class="line">id number(<span class="number">8</span>) <span class="keyword">primary</span> key,</span><br><span class="line">name varchar2(<span class="number">10</span>),</span><br><span class="line">deptment number(<span class="number">8</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><font color = red size = 4>选课表：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> select_course</span><br><span class="line">(</span><br><span class="line">ID         NUMBER(<span class="number">8</span>) <span class="keyword">primary</span> key,</span><br><span class="line">STUDENT_ID NUMBER(<span class="number">8</span>) <span class="keyword">foreign</span> key (COURSE_ID) <span class="keyword">references</span> course(ID),</span><br><span class="line">COURSE_ID  NUMBER(<span class="number">8</span>) <span class="keyword">foreign</span> key (STUDENT_ID) <span class="keyword">references</span> student(ID)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p><font color = red size = 4>课程表：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> COURSE</span><br><span class="line">(</span><br><span class="line">ID     NUMBER(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>,</span><br><span class="line">C_NAME VARCHAR2(<span class="number">20</span>),</span><br><span class="line">C_NO   VARCHAR2(<span class="number">10</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>1.查询选修了所有课程的学生id、name:（即不存在这样一个学生，他有一门课程没有选。）</font></p>
<blockquote>
<p><font color = red>分析：</font></p>
<p>如果有一门课没有选，则此时</p>
<p>(1)select * from select_course sc，t_student ts，course c  where sc.student_id=<a href="http://ts.id">ts.id</a> and sc.course_id=c.id存在null，<br />
这说明(2)select * from course c 的查询结果中确实有记录不存在(1查询中)，查询结果返回没有选的课程，<br />
此时select * from t_student ts 后的not exists 判断结果为false，不执行查询。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> t_student ts <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course c <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> select_course sc <span class="keyword">where</span> sc.student_id<span class="operator">=</span>ts.id <span class="keyword">and</span> sc.course_id<span class="operator">=</span>c.id)); </span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> t_student ts, </span><br><span class="line">(<span class="keyword">select</span> studentid <span class="keyword">from</span> select_course sc <span class="keyword">where</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course c <span class="keyword">where</span> c.id <span class="operator">=</span> sc.id)) T1 </span><br><span class="line"><span class="keyword">where</span> ts.id <span class="operator">=</span> T1.student_id;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2.查询没有选择所有课程的学生，即没有全选的学生。（存在这样的一个学生，他至少有一门课没有选）</font></p>
<blockquote>
<p><font color = red>分析：</font></p>
<p>只要有一个门没有选，即</p>
<p>select * from select_course sc，t_student ts，courses c where student_id=t_student.id and courses_id=<a href="http://courses.id">courses.id</a> 有一条为空，</p>
<p>即not exists null 为true,此时select * from courses有查询结果（<a href="http://xn--idcourses-rl6noey88nng8ai15bi81d.id">id为子查询中的courses.id</a> ），<br />
因此select id,name from t_student 将执行查询（id为子查询中t_student.id ）。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> t_student <span class="keyword">where</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> select_course sc <span class="keyword">where</span> student_id<span class="operator">=</span>t_student.id <span class="keyword">and</span> course_id<span class="operator">=</span>course.id));</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id name <span class="keyword">from</span> t_student <span class="keyword">where</span> (id ,name) <span class="keyword">NOT</span> <span class="keyword">IN</span> </span><br><span class="line">(<span class="keyword">select</span> id, name <span class="keyword">from</span> t_student ts, </span><br><span class="line">(<span class="keyword">select</span> studentid <span class="keyword">from</span> select_course sc <span class="keyword">where</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course c <span class="keyword">where</span> c.id <span class="operator">=</span> sc.id)) T1 </span><br><span class="line"><span class="keyword">where</span> ts.id <span class="operator">=</span> T1.student_id) T2;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3.查询一门课也没有选的学生。（不存这样的一个学生，他至少选修一门课程）</font></p>
<blockquote>
<p><font color = red>分析：</font></p>
<p>如果他选修了一门select * from course结果集不为空，not exists 判断结果为false;<br />
select id,name from t_student 不执行查询。</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> t_student <span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">where</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> select_course sc <span class="keyword">where</span> student_id<span class="operator">=</span>t_student.id <span class="keyword">and</span> course_id<span class="operator">=</span>course.id));</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> t_student <span class="keyword">where</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">select</span> student_id <span class="keyword">from</span> select_course );</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4.查询至少选修了一门课程的学生。（存在这样的一个学生，他至少选修一门课程）</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name <span class="keyword">from</span> t_student <span class="keyword">where</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> course <span class="keyword">where</span>  <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> select_course sc <span class="keyword">where</span> student_id<span class="operator">=</span>t_student.id <span class="keyword">and</span> course_id<span class="operator">=</span>course.id));</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id, name <span class="keyword">from</span> t_student <span class="keyword">where</span> (id, name) <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">select</span> id, name <span class="keyword">from</span> t_student <span class="keyword">where</span> id <span class="keyword">NOT</span> <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">select</span> studentid <span class="keyword">from</span> select_course));</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = red>注意：</font><font color = green>在插入记录前，需要检查这条记录是否已经存在，只有当记录不存在时才执行插入操作，可以通过使用 EXISTS 条件句防止插入重复记录。</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TableIn (ANAME,ASEX) </span><br><span class="line"><span class="keyword">SELECT</span> top <span class="number">1</span> <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span> <span class="keyword">FROM</span> TableIn</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> TableIn <span class="keyword">where</span> TableIn.AID <span class="operator">=</span> <span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<br/>
<style type="text/css">
.tg  {border-collapse:collapse;border-spacing:0;}
.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}
.tg .tg-9wq8{border-color:inherit;text-align:center;vertical-align:middle}
.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
.tg .tg-nrix{text-align:center;vertical-align:middle}
.tg .tg-0lax{text-align:left;vertical-align:top}
</style>
<table class="tg">
  <tr>
    <th class="tg-0pky"><span style="font-weight:700">Relational  Algebra</span></th>
    <th class="tg-0pky"><span style="font-weight:700">SQL  Predicate</span></th>
  </tr>
  <tr>
    <td class="tg-nrix" rowspan="3">natural join</td>
    <td class="tg-0lax">IN</td>
  </tr>
  <tr>
    <td class="tg-0lax">=SOME</td>
  </tr>
  <tr>
    <td class="tg-0lax">EXISTS</td>
  </tr>
  <tr>
    <td class="tg-9wq8" rowspan="3">difference</td>
    <td class="tg-0pky">NOT IN</td>
  </tr>
  <tr>
    <td class="tg-0pky">&lt;&gt;ALL</td>
  </tr>
  <tr>
    <td class="tg-0pky">NOT EXISTS</td>
  </tr>
</table>
<br/>
<p><font color = blue size = 4>1. Retrieve all customer names where the customer places an order through agent a05.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span>  <span class="keyword">distinct</span>  c.cname</span><br><span class="line"><span class="keyword">From</span>  customers c</span><br><span class="line"><span class="keyword">Where</span>  <span class="keyword">EXISTS</span>  (</span><br><span class="line">		<span class="keyword">Select</span></span><br><span class="line">		<span class="keyword">From</span>  orders x</span><br><span class="line">		<span class="keyword">Where</span>  c.cid<span class="operator">=</span>x.cid  <span class="keyword">and</span>  x.aid<span class="operator">=</span>‘a05’ );</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> c.cname </span><br><span class="line"><span class="keyword">from</span> customers c, <span class="keyword">order</span> o <span class="keyword">where</span> o.cid <span class="operator">=</span> c.cid <span class="keyword">and</span> o.aid <span class="operator">=</span> <span class="string">&#x27;a05&#x27;</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Find all customer names where the customer does not place an order through agent a05.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>    customers c</span><br><span class="line"><span class="keyword">WHERE</span>   cid  <span class="keyword">NOT</span> <span class="keyword">IN</span> ( </span><br><span class="line">		<span class="keyword">SELECT</span>  o.cid</span><br><span class="line">		<span class="keyword">FROM</span>  orders  o</span><br><span class="line">		<span class="keyword">WHERE</span>  o.aid <span class="operator">=</span> ‘a05’ ) ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>    customers  c</span><br><span class="line"><span class="keyword">WHERE</span>   <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>   orders  o</span><br><span class="line">		<span class="keyword">WHERE</span>   o.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  o.aid <span class="operator">=</span> ‘a05’ ) ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Find cids of all customers who don’t place any order through agent a03.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid</span><br><span class="line"><span class="keyword">FROM</span>    customers</span><br><span class="line"><span class="keyword">WHERE</span>   cid  <span class="keyword">NOT</span> <span class="keyword">IN</span> ( </span><br><span class="line">        <span class="keyword">SELECT</span>  o.cid</span><br><span class="line">		<span class="keyword">FROM</span>  orders  o</span><br><span class="line">		<span class="keyword">WHERE</span>  o.aid <span class="operator">=</span> ‘a03’ ) ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid</span><br><span class="line"><span class="keyword">FROM</span>    customers  c</span><br><span class="line"><span class="keyword">WHERE</span>   <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  orders  o</span><br><span class="line">		<span class="keyword">WHERE</span>   o.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  o.aid <span class="operator">=</span> ‘a03’ );</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = red size = 5>注意：</font></p>
<p><font color = green size = 4>EXISTS用于检查子查询是否至少会返回一行数据，该子查询实际上并不返回任何数据，而是返回值True或False</font></p>
</blockquote>
<br/>
<p><font color = blue size = 5>not in和not exists的区别：</font></p>
<p><font color = green>1. not in 只有当子查询中，select 关键字后的字段有not null约束或者有这种暗示时用not in,另外如果主查询中表大，子查询中的表小但是记录多，则应当使用not in,</font></p>
<p><font color = blue size = 4>例如:查询那些班级中没有学生的：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class <span class="keyword">where</span> cid <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> cid <span class="keyword">from</span> stu);</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = green>2. 当表中cid存在null值，not in 不对空值进行处理</font></p>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">解决:</span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class <span class="keyword">where</span> cid <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">distinct</span> cid <span class="keyword">from</span> stu <span class="keyword">where</span> cid <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = green>not in的执行顺序是：是在表中一条记录一条记录的查询(查询每条记录）符合要求的就返回结果集，不符合的就继续查询下一条记录，直到把表中的记录查询完。也就是说为了证明找不到，所以只能查询全部记录才能证明，并没有用到索引。<br />
not exists：如果主查询表中记录少，子查询表中记录多，并有索引。</font></p>
</blockquote>
<p><font color = blue size = 4>例如:查询那些班级中没有学生的</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> class2</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">not</span> <span class="keyword">exists</span></span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> stu1 <span class="keyword">where</span> stu1.cid <span class="operator">=</span>class2.cid)</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = green>not exists的执行顺序是：在表中查询，是根据索引查询的，如果存在就返回true，如果不存在就返回false，不会每条记录都去查询。<br />
之所以要多用not exists，而不用not in，也就是not exists查询的效率远远高与not in查询的效率。</font></p>
</blockquote>
<br/>
<h4 id="4-the-like-predicate"><a class="markdownIt-Anchor" href="#4-the-like-predicate"></a> 4. The LIKE Predicate</h4>
<p><img data-src="http://image.zxkidea.top/1550455574345.png" alt="zxk" /></p>
<br/>
<p><font color = blue size = 4>1. Get pids of products not ordered by any customer living in a city whose name begin with the letter D.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  p.pid</span><br><span class="line"><span class="keyword">FROM</span>    products  p</span><br><span class="line"><span class="keyword">WHERE</span>   p.pid  <span class="keyword">NOT</span>  <span class="keyword">IN</span>  (</span><br><span class="line">	<span class="keyword">SELECT</span>  o.pid</span><br><span class="line">	<span class="keyword">FROM</span>    orders  o,  customers  c</span><br><span class="line">	<span class="keyword">WHERE</span>   o.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  c.city <span class="keyword">LIKE</span> ‘D<span class="operator">%</span>’  ) ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Retrieve cid values of customers whose cname <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">does not have a third letter</span> equal to ‘%’.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span>  cid</span><br><span class="line"><span class="keyword">From</span>  customers</span><br><span class="line"><span class="keyword">Where</span>  cname  <span class="keyword">NOT</span> <span class="keyword">LIKE</span>  ‘_ _ \ <span class="operator">%</span> <span class="operator">%</span>’</span><br><span class="line">		<span class="keyword">ESCAPE</span>  ‘ \ ’ ;	</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：% 原为通配符，指定用 ’ \ '符号来说明跟在其后面的通配符字符为普通字符。</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>3. Retrieve cid values of customers whose cname <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">begins “Tip_”</span> and has an arbitrary number of characters following.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span>  cid</span><br><span class="line"><span class="keyword">From</span>  customers</span><br><span class="line"><span class="keyword">Where</span>  cname  <span class="keyword">LIKE</span>  ‘Tip\_<span class="operator">%</span>’</span><br><span class="line"><span class="keyword">ESCAPE</span>  <span class="string">&#x27;\&#x27;</span> ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Retrieve cid values of customers whose cname <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">starts with the sequence “ab\”</span>.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">From</span>  customers</span><br><span class="line"><span class="keyword">Where</span>  cname  <span class="keyword">LIKE</span>  ‘ab\ \<span class="operator">%</span>’  <span class="keyword">ESCAPE</span>  ‘\’ ;</span><br></pre></td></tr></table></figure>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>( 连续的两个转义指示字符表示 ‘转义指示符 ’自己)</font></span></p>
<br/>
<blockquote>
<p><font color = red size = 5>注意：</font></p>
<p><font color = green size = 4>‘A_Z’: 所有以 ‘A’ 起头，另一个任何值的字原，且以 ‘Z’ 为结尾的字串。</font></p>
<p><font color = green size = 4>‘ABC%’: 所有以 ‘ABC’ 起头的字串。</font></p>
<p><font color = green size = 4>‘%XYZ’: 所有以 ‘XYZ’ 结尾的字串。</font></p>
<p><font color = green size = 4>‘%AN%’: 所有含有 ‘AN’ 这个套式的字串。</font></p>
<p><font color = green size = 4>使用   ESCAPE   关键字定义转义符。</font></p>
<p><font color = green size = 4>WHERE   ColumnA   LIKE   ‘%5/%%’   ESCAPE   ‘/’   即 ‘/’为转义字符，第二个‘%’为普通字符，第一、第三个为通配符。</font></p>
</blockquote>
<br/>
<h4 id="5-the-null-predicate"><a class="markdownIt-Anchor" href="#5-the-null-predicate"></a> 5. The NULL Predicate</h4>
<blockquote>
<p>NULL表示不可知不确定，NULL不与任何值相等（包括其本身）</p>
<p>IS NULL 判断某个字符是否为空，并不代表空字符或者是0</p>
<p>=NULL 是判断某个值是否等于NULL</p>
<p>总之，要判断一个数是否等于NULL只能用 IS NULL 或者 IS NOT NULL 来判断</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 选择非空列</span><br><span class="line">select * from tableName where colName IS NOT NULL;</span><br><span class="line"></span><br><span class="line">-- 删除列为NULL的行</span><br><span class="line">delete from tableName where colName IS NULL;</span><br></pre></td></tr></table></figure>
<br>
<h4 id="6example-of-subqueries"><a class="markdownIt-Anchor" href="#6example-of-subqueries"></a> 6.Example  of Subqueries</h4>
<p><font color = blue size = 4>1. Retrieve all customer names where the customer places an order through agent a05.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>    customers c, orders o</span><br><span class="line"><span class="keyword">WHERE</span>   c.cid <span class="operator">=</span> o.cid  <span class="keyword">and</span>  o.aid <span class="operator">=</span> ‘a05’ ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>    customers</span><br><span class="line"><span class="keyword">WHERE</span>   cid   <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> cid  <span class="keyword">FROM</span> orders  <span class="keyword">WHERE</span> aid<span class="operator">=</span>‘a05’) ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">distinct</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>    customers  c</span><br><span class="line"><span class="keyword">WHERE</span>   <span class="keyword">EXISTS</span> </span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders o <span class="keyword">WHERE</span>  o.cid<span class="operator">=</span>c.cid <span class="keyword">and</span> o.aid<span class="operator">=</span>‘a05’) ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Get cids of customers who order <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">both</span> products p01 and p07.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  o1.cid  <span class="keyword">FROM</span>  orders  o1, orders  o2</span><br><span class="line"><span class="keyword">WHERE</span>  o1.cid<span class="operator">=</span>o2.cid  <span class="keyword">and</span></span><br><span class="line">o1.pid<span class="operator">=</span>‘p01’  <span class="keyword">and</span>  o2.pid<span class="operator">=</span>‘p07’;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  o1.cid  <span class="keyword">FROM</span> orders  o1</span><br><span class="line"><span class="keyword">WHERE</span>  o1.pid<span class="operator">=</span>‘p01’ <span class="keyword">and</span> o1.cid <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span>  o2.cid   <span class="keyword">FROM</span>  orders  o2</span><br><span class="line"><span class="keyword">WHERE</span>  o2.pid<span class="operator">=</span>‘p07’ );</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> cid <span class="keyword">from</span> orders <span class="keyword">where</span> pid <span class="operator">=</span> <span class="string">&#x27;p01&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">Select</span> cid <span class="keyword">from</span> orders <span class="keyword">where</span> pid <span class="operator">=</span> <span class="string">&#x27;p07&#x27;</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Get cids of customers who <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">place an order</span> through at least one agent who <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">places an order</span> for product p03.</font></p>
<blockquote>
<p><font color = green size = 4>T1 := (O where pid = ‘p03’)[aid]</font></p>
<p><font color = green size = 4>T2 := (T1 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi><mtext> </mtext></mrow><annotation encoding="application/x-tex">\infty </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span><span class="mord"> </span></span></span></span> O) [cid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  o2.cid</span><br><span class="line"><span class="keyword">FROM</span>    orders  o1,  orders  o2</span><br><span class="line"><span class="keyword">WHERE</span>   o1.pid<span class="operator">=</span>‘p03’  <span class="keyword">and</span>  o1.aid<span class="operator">=</span>o2.aid;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Get cids of all customers who <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">have the same discount</span> as any customer in Dallas or Boston.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  c1.cid</span><br><span class="line"><span class="keyword">FROM</span>    customers  c1,  customers  c2</span><br><span class="line"><span class="keyword">WHERE</span>  ( c1.city <span class="operator">=</span> ‘Dallas’  <span class="keyword">or</span>  c1.city <span class="operator">=</span> ‘Boston’ )</span><br><span class="line"><span class="keyword">and</span>  c1.discnt <span class="operator">=</span> c2.discnt <span class="keyword">and</span> c1.cid <span class="operator">&lt;</span> c2.cid;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>5. Find all customer names where the customer <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">does not place</span> an order through agent a05.</font></p>
<blockquote>
<p><font color = green size = 4>((C[cid] – (O where aid = ‘a05’) [cid]) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∞</mi><mtext> </mtext></mrow><annotation encoding="application/x-tex">\infty </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord">∞</span><span class="mord"> </span></span></span></span> C) [cname]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>  customers</span><br><span class="line"><span class="keyword">WHERE</span>  cid  <span class="keyword">NOT</span> <span class="keyword">IN</span> ( </span><br><span class="line">    <span class="keyword">SELECT</span>  o.cid</span><br><span class="line">	<span class="keyword">FROM</span>  orders  o</span><br><span class="line">	<span class="keyword">WHERE</span>  o.aid <span class="operator">=</span> ‘a05’ ) ;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>    customers  c</span><br><span class="line"><span class="keyword">WHERE</span>   <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>   orders  o</span><br><span class="line"><span class="keyword">WHERE</span>  o.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  o.aid <span class="operator">=</span> ‘a05’ ) ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font><font color = green size = 4>此处可以看见NOT EXISTS需要将索引联结起来；而NOT IN则不需要</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>6. Find all cid, aid pairs where the customer <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">does not place</span> an order through the agent.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid,  aid</span><br><span class="line"><span class="keyword">FROM</span>  customers  c,  agents  a</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span>  orders  o</span><br><span class="line"><span class="keyword">WHERE</span>  o.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  o.aid <span class="operator">=</span> a.aid );</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid,  aid</span><br><span class="line"><span class="keyword">FROM</span>  customers  c,  agents  a</span><br><span class="line"><span class="keyword">WHERE</span>   (cid,  aid)  <span class="keyword">NOT</span>  <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span>  o.cid,  o.aid  <span class="keyword">FROM</span>  orders  o );</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font><font color = green size = 4>此处也可以看见NOT EXISTS需要将索引联结起来；而NOT IN则不需要</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>7. Get the names of customers who order <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">at least one</span> product priced at $0.50.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cname</span><br><span class="line"><span class="keyword">FROM</span>  products  p, orders  o, customers  c</span><br><span class="line"><span class="keyword">WHERE</span>  price<span class="operator">=</span><span class="number">0.50</span> <span class="keyword">and</span> p.pid<span class="operator">=</span>o.pid <span class="keyword">and</span></span><br><span class="line">o.cid<span class="operator">=</span>c.cid ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>8. Retrieve customers who place orders <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">only through</span> agent a03</font></p>
<blockquote>
<p><font color = green size = 4>O [cid] - (O where aid &lt;&gt; ‘a03’) [cid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  o1.cid</span><br><span class="line"><span class="keyword">FROM</span>    orders  o1</span><br><span class="line"><span class="keyword">WHERE</span>  o1.cid  <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> o2.cid</span><br><span class="line"><span class="keyword">FROM</span>  orders  o2</span><br><span class="line"><span class="keyword">WHERE</span>  o2.aid <span class="operator">&lt;&gt;</span> ‘a03’) ;</span><br></pre></td></tr></table></figure>
<br/>
<hr />
<h3 id="四union-operators-and-for-all-conditions"><a class="markdownIt-Anchor" href="#四union-operators-and-for-all-conditions"></a> 四.UNION Operators and FOR ALL Conditions</h3>
<h4 id="1-the-union-operator并集交集拓展"><a class="markdownIt-Anchor" href="#1-the-union-operator并集交集拓展"></a> 1. The UNION Operator(并集/交集拓展)</h4>
<p><font color = blue size = 4>1. Retrieve all cities where either a customer or an agent, or both, is based.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  city  <span class="keyword">from</span>  customers </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">select</span>  city  <span class="keyword">from</span>  agents</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  city  <span class="keyword">from</span>  customers </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">select</span>  city  <span class="keyword">from</span>  agents</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  city  <span class="keyword">from</span>  customers</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">select</span>  city  <span class="keyword">from</span>  agents</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green size = 4>如果我们需要将两个或多个select语句的结果作为一个整体显示出来，这是我们就需要用到union或者union all关键字。</font></p>
<p><font color = green size = 4>union和union all的区别是,union会自动压缩多个结果集合中的重复结果，而union all则将所有的结果全部显示出来，不管是不是重复。</font></p>
</blockquote>
<br/>
<p><font color = red size = 5>拓展：求交集</font></p>
<p><font color = blue size = 4>1. Get cid values of customers who order both products p01 and p07.</font></p>
<blockquote>
<p><font color = green size = 4>(Orders where pid = ‘p01’) [cid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∩</mo></mrow><annotation encoding="application/x-tex">\cap</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∩</span></span></span></span> (Orders where pid = ‘p07’) [cid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> o1.cid <span class="keyword">from</span> Orders o1</span><br><span class="line"><span class="keyword">where</span> pid <span class="operator">=</span> <span class="string">&#x27;p01&#x27;</span> <span class="keyword">and</span> pid <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">select</span> o2.cid <span class="keyword">from</span> Orders o2</span><br><span class="line"><span class="keyword">where</span> pid <span class="operator">=</span> <span class="string">&#x27;p02&#x27;</span> <span class="keyword">and</span> o1.cid <span class="operator">=</span> o2.cid);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> cid <span class="keyword">from</span> (<span class="keyword">select</span> cid <span class="keyword">from</span> Orders <span class="keyword">where</span> pid <span class="operator">=</span> <span class="string">&#x27;p01&#x27;</span>) t1,</span><br><span class="line">(<span class="keyword">select</span> cid <span class="keyword">from</span> Orders <span class="keyword">where</span> pid <span class="operator">=</span> <span class="string">&#x27;p07&#x27;</span>) t2</span><br><span class="line"><span class="keyword">where</span> t1.cid <span class="operator">=</span> t2.cid;</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="2-the-span-stylebackground-linear-gradientto-right-f2994a-f2c94cdivision-operationspan-in-relational-algebra"><a class="markdownIt-Anchor" href="#2-the-span-stylebackground-linear-gradientto-right-f2994a-f2c94cdivision-operationspan-in-relational-algebra"></a> 2. The <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Division Operation</span> in Relational Algebra</h4>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green size = 4>1. 可将关系代数中的除法运算<font color = red>转换为</font>SQL语句的NOT EXISTS<font color = red>二重</font>条件判断</font></p>
<p><font color = green size = 4>2. 写出关系代数式(包含除法运算)<font color = red>根据表关系</font>构造NOT EXISTS二重条件判断</font></p>
<p><font color = green size = 4>3. NOT EXISTS判断为Select *，且需要建立索引</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4>1. Find cids of customers who place orders with <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">ALL agents</span> based in New York.</font></p>
<blockquote>
<p><font color = green size = 4>o[cid, aid] <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> (a where city=‘New York’)[aid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  c.cid</span><br><span class="line"><span class="keyword">FROM</span>    customers  c</span><br><span class="line"><span class="keyword">WHERE</span>  	<span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">    	<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  agents  a</span><br><span class="line">		<span class="keyword">WHERE</span>  a.city <span class="operator">=</span> ‘<span class="keyword">New</span> York’  <span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  orders  o</span><br><span class="line">		<span class="keyword">WHERE</span>  o.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  o.aid <span class="operator">=</span> a.aid ) );</span><br></pre></td></tr></table></figure>
<br/>
<p><img data-src="https://image.zxkidea.top/1550381521441.png" alt="zxk" /></p>
<br/>
<p><font color = blue size = 4>2. Get the aid values of agents in New York or Duluth who place orders for <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">all products</span> costing more than a dollar.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  aid</span><br><span class="line"><span class="keyword">FROM</span>    agents  a</span><br><span class="line"><span class="keyword">WHERE</span>  (city<span class="operator">=</span>‘<span class="keyword">New</span> York’ <span class="keyword">or</span> city<span class="operator">=</span>‘Duluth’) <span class="keyword">and</span></span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">	<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">	<span class="keyword">FROM</span>  products  p</span><br><span class="line">	<span class="keyword">WHERE</span>  p.price <span class="operator">&gt;</span> <span class="number">1</span>  <span class="keyword">and</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">	<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">	<span class="keyword">FROM</span>  orders  o</span><br><span class="line">	<span class="keyword">WHERE</span>  o.aid<span class="operator">=</span>a.aid <span class="keyword">and</span> o.pid<span class="operator">=</span>p.pid  ) );</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Find aid values of agents who <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">place orders for product p01</span> as well as for <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">all products</span> costing more than a dollar.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  aid    <span class="keyword">FROM</span>  agents  a</span><br><span class="line"><span class="keyword">WHERE</span>   aid <span class="keyword">IN</span> (  </span><br><span class="line">    <span class="keyword">select</span> aid <span class="keyword">from</span> orders</span><br><span class="line">	<span class="keyword">where</span> pid<span class="operator">=</span>‘p01’ )</span><br><span class="line">	<span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">	<span class="keyword">SELECT</span>  <span class="operator">*</span>    <span class="keyword">FROM</span>  products  p</span><br><span class="line">	<span class="keyword">WHERE</span>  p.price <span class="operator">&gt;</span> <span class="number">1</span>  <span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">	<span class="keyword">SELECT</span>  <span class="operator">*</span>    <span class="keyword">FROM</span>  orders  o</span><br><span class="line">	<span class="keyword">WHERE</span>  o.aid<span class="operator">=</span>a.aid <span class="keyword">and</span> o.pid<span class="operator">=</span>p.pid));</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Get cids of customers who order <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">all products</span> that <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">anybody orders</span>.</font></p>
<blockquote>
<p><font color = green size = 4>O[cid, pid] ÷ O[pid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  c.cid  <span class="keyword">FROM</span>  customers  c</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span>  <span class="keyword">FROM</span> orders  o1</span><br><span class="line">		<span class="keyword">WHERE</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span>  <span class="keyword">FROM</span> orders  o2</span><br><span class="line">		<span class="keyword">WHERE</span>  o2.cid<span class="operator">=</span>c.cid  <span class="keyword">and</span>  o2.pid<span class="operator">=</span>o1.pid ));</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>5. Get aids of agents who take orders on <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">at least</span> that set of products ordered by c004.</font></p>
<blockquote>
<p><font color = green size = 4>O[aid, pid] ÷ (O where cid = ‘c004’)[pid]</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  a.aid</span><br><span class="line"><span class="keyword">FROM</span>  agents  a</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  orders o1</span><br><span class="line">		<span class="keyword">WHERE</span>  o1.cid<span class="operator">=</span>‘c004’  <span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  orders o2</span><br><span class="line">		<span class="keyword">WHERE</span>  o2.aid<span class="operator">=</span>a.aid  <span class="keyword">and</span>  o2.pid<span class="operator">=</span>o1.pid  ));</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>6. Get cids for customers with the following property: </font></p>
<p><font color = blue size = 4>If customer c006 orders a product x through agent y, so the customer orders the product x through the agent y.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  cid</span><br><span class="line"><span class="keyword">FROM</span>    customers  c</span><br><span class="line"><span class="keyword">WHERE</span>   <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>   orders o1</span><br><span class="line">		<span class="keyword">WHERE</span>   o1.cid<span class="operator">=</span>‘c006’  <span class="keyword">and</span>  <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  orders o2</span><br><span class="line">		<span class="keyword">WHERE</span>   o2.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  o2.pid <span class="operator">=</span> o1.pid</span><br><span class="line">	   	<span class="keyword">and</span>  o2.aid <span class="operator">=</span> o1.aid  ) );</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>7. Get aids of agents who place orders for <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">all customers</span> who place orders for <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">all products</span> costing more than a dollar through the agent.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  aid</span><br><span class="line"><span class="keyword">FROM</span>  agents  a</span><br><span class="line"><span class="keyword">WHERE</span>  <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  customers  c,  products  p</span><br><span class="line">		<span class="keyword">WHERE</span>  p.price <span class="operator">&gt;</span> <span class="number">1</span>  <span class="keyword">and</span>  <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">		<span class="keyword">SELECT</span>  <span class="operator">*</span></span><br><span class="line">		<span class="keyword">FROM</span>  orders  x</span><br><span class="line">		<span class="keyword">WHERE</span>   x.cid <span class="operator">=</span> c.cid  <span class="keyword">and</span>  x.pid <span class="operator">=</span> p.pid</span><br><span class="line">	  	<span class="keyword">and</span>  x.aid <span class="operator">=</span> a.aid  ) );</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = red size = 5>注意：</font></p>
<p><font color = green size = 4>Relational Algebra：</font></p>
<p>R(x, y) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>÷</mo></mrow><annotation encoding="application/x-tex">\div</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord">÷</span></span></span></span> S(y)</p>
<p><font color = green size = 4>Relational Calculus：</font></p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∀</mi></mrow><annotation encoding="application/x-tex">\forall</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∀</span></span></span></span>z ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∃</mi></mrow><annotation encoding="application/x-tex">\exists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">∃</span></span></span></span> y ( P(z, y) )) <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⟷</mo></mrow><annotation encoding="application/x-tex">\longleftrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.522em;vertical-align:-0.011em;"></span><span class="mrel">⟷</span></span></span></span> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∄</mi></mrow><annotation encoding="application/x-tex">\nexists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord amsrm">∄</span></span></span></span>z ( <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∄</mi></mrow><annotation encoding="application/x-tex">\nexists</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68889em;vertical-align:0em;"></span><span class="mord amsrm">∄</span></span></span></span> y ( P(z, y) ))</p>
</blockquote>
<br/>
<h4 id="3-set-functions-in-sql聚合函数"><a class="markdownIt-Anchor" href="#3-set-functions-in-sql聚合函数"></a> 3.  Set Functions in SQL(聚合函数)</h4>
<p><img data-src="https://image.zxkidea.top/1550405574789.png" alt="zxk" /></p>
<br/>
<p><font color = blue size = 4>1. Get the total dollar amount of all orders.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="built_in">sum</span> ( dollars )  <span class="keyword">as</span>  totaldollars</span><br><span class="line"><span class="keyword">from</span>  orders;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Get the total quantity of product p03 that has been ordered.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="built_in">sum</span> ( qty )  <span class="keyword">as</span>  TOTAL</span><br><span class="line"><span class="keyword">from</span>  orders</span><br><span class="line"><span class="keyword">where</span>  pid <span class="operator">=</span> ‘p03’;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. List the cid values of all customers who have a discount <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">less than</span> the maximum discount.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  cid</span><br><span class="line"><span class="keyword">from</span>  customers  c1</span><br><span class="line"><span class="keyword">where</span>  discnt <span class="operator">&lt;</span> <span class="keyword">all</span> ( </span><br><span class="line">    <span class="keyword">select</span>  <span class="built_in">max</span>(c2.discnt)</span><br><span class="line">	<span class="keyword">from</span>  customers  c2 );</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Find products ordered by <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">at least</span> two customers.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>   p.pid</span><br><span class="line"><span class="keyword">from</span>     products  p</span><br><span class="line"><span class="keyword">where</span>  <span class="number">2</span> <span class="operator">&lt;=</span> <span class="keyword">ALL</span> (   </span><br><span class="line">    <span class="keyword">select</span>  <span class="built_in">count</span> ( <span class="keyword">distinct</span>  cid )</span><br><span class="line">	<span class="keyword">from</span>     orders  o</span><br><span class="line">	<span class="keyword">where</span>  o.pid <span class="operator">=</span> p.pid );</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green size = 4>1. 此处表示至少有两个顾客购买的产品；</font></p>
<p><font color = green size = 4>2. 具体语句运行过程：</font></p>
<p><font color = brown size = 4>a. 先将两表连接；</font></p>
<p><font color = brown size = 4>b. 然后返回相等pid下cid不重复的记录数；</font></p>
<p><font color = brown size = 4>c. 若相同pid的该记录数大于2，则返回其pid；</font></p>
</blockquote>
<br/>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> p.pid <span class="keyword">from</span> (</span><br><span class="line">	<span class="keyword">select</span> pid, <span class="built_in">count</span>(<span class="keyword">distinct</span> cid) dcd </span><br><span class="line">    <span class="keyword">from</span> orders <span class="keyword">as</span> o <span class="keyword">group</span> <span class="keyword">by</span> pid) t, products p </span><br><span class="line"><span class="keyword">where</span> t.pid <span class="operator">=</span> t.pid <span class="keyword">and</span> t.dcd <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green size = 4>1. 先将orders表pid，cid不重复记录分组构造新表t；</font></p>
<p><font color = green size = 4>2. 再将produsts表与t表连接，最后返回cid不重复记录数大于2的pid；</font></p>
</blockquote>
<br/>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  pid</span><br><span class="line"><span class="keyword">FROM</span>    orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  pid</span><br><span class="line"><span class="keyword">HAVING</span>   <span class="built_in">count</span> ( <span class="keyword">distinct</span>  cid ) <span class="operator">&gt;=</span> <span class="number">2</span> ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font><font color = green size = 4>使用Group By对pid进行分组，Having对cid进行过滤</font></p>
</blockquote>
<br/>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green size = 4>1. count(*)：获取数量</font></p>
<p><font color = green size = 4>2. sum()：求和（这里要注意求和是忽略null值的，null与其他数值相加结果为null，所以可以通过ifnull(xxx,0)将null的值赋为0</font></p>
<p><font color = green size = 4>3. avg()：求平均数</font></p>
<p><font color = green size = 4>4. max()：求最大值</font></p>
<p><font color = green size = 4>5. min()：求最小值</font></p>
</blockquote>
<br/>
<h4 id="4-groups-of-rows-in-sql"><a class="markdownIt-Anchor" href="#4-groups-of-rows-in-sql"></a> 4. Groups of Rows in SQL</h4>
<p><font color = blue size = 4>GROUP BY clause &amp; HAVING clause</font></p>
<blockquote>
<p><em><strong><font color = red size = 4>SQL语句的执行顺序：</font></strong></em></p>
<p><font color = red size = 4>from–where–group by–having–select–order by</font></p>
<p>from：需要从哪个数据表检索数据<br />
where：过滤表中数据的条件<br />
group by：如何将上面过滤出的数据分组<br />
having：对上面已经分组的数据进行过滤的条件<br />
select：查看结果集中的哪个列，或列的计算结果<br />
order by：按照什么样的顺序来查看返回的数据</p>
</blockquote>
<br/>
<p><font color = blue size = 4>1) GROUP BY</font></p>
<ul>
<li>
<p>GROUP BY语句用来与聚合函数(aggregate functions such as COUNT, SUM, AVG, MIN, or MAX.)联合使用来得到一个或多个列的结果集。</p>
</li>
<li>
<p>因为聚合函数通过作用于一组数据而只返回一个单个值，因此，在SELECT语句中出现的元素要么为一个聚合函数的输入值，要么为GROUP BY语句的参数，否则会出错。</p>
</li>
</ul>
<br/>
<p><font color = blue size = 4>例如，对于上面提到的表格，我们做一个这样的查询：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, <span class="built_in">COUNT</span>(course) <span class="keyword">as</span> numcourse, score</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = green size = 4>此时查询便会出错，错误提示如下：</font></p>
<p><font color = green size = 4>Column ‘student.score’ is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.</font></p>
<p><font color = green size = 4>出现以上错误的原因是因为一个学生id对应多个分数，如果我们简单的在</font></p>
<p><font color = green size = 4>SELECT语句中写上score，则无法判断应该输出哪一个分数。如果想用score作为</font></p>
<p><font color = green size = 4>select语句的参数可以将它用作一个聚合函数的输入值，如下例，我们可以得到每个</font></p>
<p><font color = green size = 4>学生所选的课程门数以及每个学生的平均分数：</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, <span class="built_in">COUNT</span>(course) <span class="keyword">as</span> numcourse, <span class="built_in">AVG</span>(score) <span class="keyword">as</span> avgscore</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>1. Find the agent name and aid, and the product name and pid, together with the total quantity each agent supplies of that product to customers c002 and c003.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  a.aid, a.aname, p.pid, p.pname, <span class="built_in">sum</span>(qty)</span><br><span class="line"><span class="keyword">FROM</span>  agents  a, products  p, orders  o</span><br><span class="line"><span class="keyword">WHERE</span>  a.aid <span class="operator">=</span> o.aid <span class="keyword">and</span> p.pid <span class="operator">=</span> o.pid <span class="keyword">and</span></span><br><span class="line">o.cid <span class="keyword">IN</span> (<span class="string">&#x27;c002&#x27;</span>,<span class="string">&#x27;c003&#x27;</span>)</span><br><span class="line"><span class="keyword">GROUP</span>  <span class="keyword">BY</span>  a.aid, a.aname, p.pid, p.pname</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font><font color = green size = 4>多表连接也可以使用Group By进行分组</font></p>
</blockquote>
<br/>
<p><font color = red size = 4>2.对某个字段分组且进行数据统计，可使用count(*)技巧</font></p>
<p><font color = blue>例如说明现在有一个这样的表：每个部门有多少人 就要用到分组的技术</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select DepartmentID as &#x27;部门名称&#x27;,</span><br><span class="line">COUNT(*) as &#x27;个数&#x27; from BasicDepartment group by DepartmentID</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个就是使用了group by +字段进行了分组，其中我们就可以理解为我们按照了部门的名称ID，DepartmentID将数据集进行了分组；然后再进行各个组的统计数据分别有多少；<br />
<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">通俗一点说</span>：group by 字段1，字段2。。。(整个表中不止这两个字段)表示数据集中字段1相等，字段2也相等的数据归为一组，只显示一条数据。那么你可以对字段3进行统计（求和，求平均值等）;</p>
</blockquote>
<br/>
<p><font color = red size = 4>3.MySQL中group by的时候字段不加聚合函数的情况</font></p>
<blockquote>
<p>首先对于不加聚合函数的sql语句来说，它的功能<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">结合了limit</span>来得出结果，仔细想想的时候有点Oracle分析函数的味道，limit的时候得到的并不是最大最小的值(元素按照原来在<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">表中的默认顺序结合分组</span>)，而是某一下group by结果集中第一行，也就是刚才说的<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">相当于先group by， 然后在每个group by下面进行limit 1</span>。</p>
</blockquote>
<br/>
<blockquote>
<p>其次，刚才还说了常规的group by结合聚合函数的时候，选择的字段除了聚合函数外，必须在group by中存在，但是在mysql中不是这样了，它具有<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">隐含字段</span>的功能，例如：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select a,b,c,count(*) from test1 group by a,b;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">a</th>
<th style="text-align:center">b</th>
<th style="text-align:center">c</th>
<th style="text-align:center">count(*)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">5</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
<blockquote>
<p><font color = red>注意：</font>对于没有选择的字段，上面是c，c的值还是和上面说到的一样，是根据得到的结果集然后根据每个group by 进行limit 1得到的结果。</p>
</blockquote>
<br/>
<p><font color = blue size = 4>2) HAVING</font></p>
<ul>
<li>
<p>HAVING语句通常与GROUP BY语句联合使用，用来过滤由GROUP BY语句返回的记录集。</p>
</li>
<li>
<p>HAVING语句的存在弥补了WHERE关键字不能与聚合函数联合使用的不足（只能接聚合函数进行筛选）。</p>
</li>
</ul>
<br/>
<p><font color = blue size = 4>1. Find all product and agent IDs and the total quantity ordered of the product by the agent, when this quantity exceeds 1000.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  pid,  aid,  <span class="built_in">sum</span>(qty)  <span class="keyword">as</span>  total</span><br><span class="line"><span class="keyword">FROM</span>    orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  pid,  aid</span><br><span class="line"><span class="keyword">HAVING</span>  <span class="built_in">sum</span>(qty) <span class="operator">&gt;</span> <span class="number">1000</span> ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Provide pid values of all products purchased by at least two customers.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  pid</span><br><span class="line"><span class="keyword">FROM</span>    orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  pid</span><br><span class="line"><span class="keyword">HAVING</span>  <span class="built_in">count</span> ( <span class="keyword">distinct</span>  cid ) <span class="operator">&gt;=</span> <span class="number">2</span> ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Find the average, over all agents, of the maximum dollar sales made by each agent.</font></p>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Right：</span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="built_in">avg</span> ( t.x )</span><br><span class="line"><span class="keyword">FROM</span> ( <span class="keyword">select</span>  aid, <span class="built_in">max</span>(dollars)  <span class="keyword">as</span>  x</span><br><span class="line">	   <span class="keyword">from</span>   orders</span><br><span class="line">	   <span class="keyword">group</span> <span class="keyword">by</span>  aid ) t ;</span><br></pre></td></tr></table></figure>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Wrong：</span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="built_in">avg</span> ( <span class="keyword">select</span> <span class="built_in">max</span> ( dollars ) <span class="keyword">from</span> orders )</span><br><span class="line"><span class="keyword">FROM</span>    orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span>  aid ;</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="5-insert-update-and-delete-statements"><a class="markdownIt-Anchor" href="#5-insert-update-and-delete-statements"></a> 5. Insert, Update, and Delete Statements</h4>
<p><font color = green size = 4>1) The Insert Statement</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tablename [ ( colname, ...... ) ]</span><br><span class="line"><span class="keyword">VALUES</span> ( expr<span class="operator">|</span><span class="keyword">NULL</span>, ...... ) <span class="operator">|</span> subquery</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue>带有子查询</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T_ReaderFavorite2 (FCategoryId, FReaderId)</span><br><span class="line"><span class="keyword">SELECT</span> FCategoryId, FReaderId <span class="keyword">FROM</span> T_ReaderFavorite <span class="keyword">Where</span> ....</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = brown>这里使用SELECT FCategoryId,FReaderId FROM T_ReaderFavorite将T_ReaderFavorite表中的数据读出，然后使用INSERT INTO T_ReaderFavorite2(FCategoryId,FReaderId)将检索结果插入到T_ReaderFavorite2 表中，注意上下的列顺序必须是<b>一一对应</b>的。</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> T_ReaderFavorite(FCategoryId,FReaderId)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">1</span>,FId <span class="keyword">FROM</span> T_Reader <span class="keyword">Where</span> ....</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = brown>SELECT语句从T_Reader表中检索所有的读者信息，并且将第一列设定为固定值1，而将第二列设定为读者的主键，执行完毕查看T_ReaderFavorite表中的内容。</font></p>
</blockquote>
<br/>
<p><font color = green size = 4>2) The Update Statements</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  tablename</span><br><span class="line"><span class="keyword">SET</span>  colname <span class="operator">=</span> expr <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> subquery, ......</span><br><span class="line">[ <span class="keyword">WHERE</span>  <span class="keyword">search</span><span class="operator">-</span><span class="keyword">condition</span> ];</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>1. Give all customers who have total orders of more than $1000 a 10% increase in the discnt they receive.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  customers</span><br><span class="line"><span class="keyword">SET</span>  discnt <span class="operator">=</span> <span class="number">1.1</span> <span class="operator">*</span> discnt</span><br><span class="line"><span class="keyword">WHERE</span>  cid  <span class="keyword">in</span>  ( <span class="keyword">select</span>  cid</span><br><span class="line">		<span class="keyword">from</span>  orders</span><br><span class="line">		<span class="keyword">group</span>  <span class="keyword">by</span>  cid</span><br><span class="line">		<span class="keyword">having</span>  <span class="built_in">sum</span>(dollars) <span class="operator">&gt;</span> <span class="number">1000</span> );</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font><font color = green size = 4>可利用Select不包含聚合函数，Having包含聚合函数进行单一筛选！</font></p>
</blockquote>
<br/>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> customers c</span><br><span class="line"><span class="keyword">SET</span>  discnt <span class="operator">=</span> <span class="number">1.1</span> <span class="operator">*</span> discnt</span><br><span class="line"><span class="keyword">WHERE</span> <span class="number">1000</span> <span class="operator">&lt;</span> ( <span class="keyword">Select</span> <span class="built_in">sum</span>(dollars) </span><br><span class="line">      <span class="keyword">from</span> orders o <span class="keyword">where</span> o.cid <span class="operator">=</span> c.cid);</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue>多张表UPDATE用法</font></li>
<li><font color = blue>当用一个表中的数据来更新另一个表中的数据，T-SQL提供多种写法(下面列出了二种)，但建议用第一种写法，虽然传统，但结构清晰。<br />
并且要注意，当用一个表中的数据来更新另一个表中的数据时，<font color = red>二个表一定要有关联！</font></font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> t1.c2 <span class="operator">=</span> t2.c2</span><br><span class="line"><span class="keyword">from</span> t2 </span><br><span class="line"><span class="keyword">where</span> t1.c1 <span class="operator">=</span> t2.c1;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> t1 <span class="keyword">set</span> t1.c2 <span class="operator">=</span> t2.c2</span><br><span class="line"><span class="keyword">from</span> t1 <span class="keyword">inner</span> <span class="keyword">join</span> t2 <span class="keyword">on</span> t1.c1 <span class="operator">=</span> t2.c1;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Update</span> t1 <span class="keyword">set</span> t1.c2 <span class="operator">=</span> t2.c2</span><br><span class="line"><span class="keyword">from</span> t1 <span class="keyword">inner</span> <span class="keyword">join</span> t2 <span class="keyword">using</span>(c1);</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：用using关键字进行简化</font></p>
<p><font color = green size = 4>1.查询必须是等值连接。</font></p>
<p><font color = green size = 4>2.等值连接中的列必须具有相同的名称和数据类型。</font></p>
</blockquote>
<br/>
<blockquote>
<p><font color = red size = 4>表联结（join）拓展：</font></p>
</blockquote>
<p><font color = blue size = 4>相同多列联结：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select... <span class="keyword">from</span> table1 <span class="keyword">inner</span> <span class="keyword">join</span> table2</span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span>(column1,column2)</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>相当于</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select... <span class="keyword">from</span> table1 <span class="keyword">inner</span> <span class="keyword">join</span> table2</span><br><span class="line"> </span><br><span class="line"><span class="keyword">on</span> table1.column1<span class="operator">=</span>table2.column1</span><br><span class="line"> </span><br><span class="line"><span class="keyword">and</span> table1.column2<span class="operator">=</span>table2.column2;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select... <span class="keyword">from</span> table1, table2</span><br><span class="line"> </span><br><span class="line"><span class="keyword">where</span> table1.column1<span class="operator">=</span>table2.column1</span><br><span class="line"> </span><br><span class="line"><span class="keyword">and</span> table1.column2<span class="operator">=</span>table2.column2;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>多表联结：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select... <span class="keyword">from</span> table1</span><br><span class="line"> </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table2 <span class="keyword">using</span>(column1)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table3 <span class="keyword">using</span>(column2);</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>相当于</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select... <span class="keyword">from</span> table1,table2,table3</span><br><span class="line"> </span><br><span class="line"><span class="keyword">where</span> table1.column1<span class="operator">=</span>table2.column1</span><br><span class="line"> </span><br><span class="line"><span class="keyword">and</span> table1.column2<span class="operator">=</span>table3.column2;</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">select... <span class="keyword">from</span> table1 </span><br><span class="line"></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table2 <span class="keyword">on</span> table1.column1<span class="operator">=</span>table2.column1</span><br><span class="line"> </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> table3 <span class="keyword">on</span> table1.column2<span class="operator">=</span>table3.column2;</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue>FROM 子句中指定的表的别名不能作为 SET column_name 子句中<font color = red>被修改字段</font>的限定符使用。</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> titles</span><br><span class="line"><span class="keyword">SET</span> t.ytd_sales <span class="operator">=</span> t.ytd_sales <span class="operator">+</span> s.qty   <span class="comment">--此处的t.ytd_sales使用不当</span></span><br><span class="line"><span class="keyword">FROM</span> titles t, sales s</span><br><span class="line"><span class="keyword">WHERE</span> t.title_id <span class="operator">=</span> s.title_id</span><br><span class="line"><span class="keyword">AND</span> s.ord_date <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sales.ord_date) <span class="keyword">FROM</span> sales);</span><br></pre></td></tr></table></figure>
<ul>
<li><font color = blue>若要使上例合法，请从列名中删除别名 t 或使用本身的表名。</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> titles</span><br><span class="line"><span class="keyword">SET</span> ytd_sales <span class="operator">=</span> t.ytd_sales <span class="operator">+</span> s.qty     <span class="comment">--将别名t改为表名</span></span><br><span class="line"><span class="keyword">FROM</span> titles t, sales s</span><br><span class="line"><span class="keyword">WHERE</span> t.title_id <span class="operator">=</span> s.title_id</span><br><span class="line"><span class="keyword">AND</span> s.ord_date <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(sales.ord_date) <span class="keyword">FROM</span> sales);</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue>更新多列</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mytab a </span><br><span class="line"><span class="keyword">set</span> (name,address)<span class="operator">=</span>(<span class="keyword">select</span> b.name,b.address </span><br><span class="line"><span class="keyword">from</span> goal b </span><br><span class="line"><span class="keyword">where</span> b.id<span class="operator">=</span>a.id)</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">from</span> goal b</span><br><span class="line"><span class="keyword">where</span> b.id<span class="operator">=</span>a.id );</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>1. 多表关联update的时候,记得要加exists()条件,否则不满足条件的记录被update称NULL：<br />
比如：stu表存在,但stu1表不存在的数据,对应的字段会被update成NULL;</font></p>
<p><font color = red size = 4>2. oracle在进行更新时无法join,  所以我们用exists来进行连表条件查询,相当于mytab表和goal表关联，当id相等时才执行更新！</font></p>
</blockquote>
<br/>
<ul>
<li><font color = blue >Update与判断操作的结合</font></li>
</ul>
<blockquote>
<p><font color = green size = 4>1. if(true,a,b),  if(false,a,b) 这个就是第一个如果是true，就等于a，false就等于b，有点像三元表达式</font></p>
<p><font color = green size = 4>2. case when  then else end</font></p>
</blockquote>
<p><font color = red size = 4>(Eg.)性别互换：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex <span class="operator">=</span> if(sex <span class="operator">=</span> <span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> (<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">when</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">end</span> ) <span class="keyword">from</span> salary;</span><br><span class="line"><span class="keyword">update</span> salary <span class="keyword">set</span> sex <span class="operator">=</span> <span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">&#x27;f&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;m&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;f&#x27;</span> <span class="keyword">end</span> ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = green size = 4>3) The Delete Statement</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span>  tablename</span><br><span class="line">[ <span class="keyword">WHERE</span>  <span class="keyword">search</span><span class="operator">-</span><span class="keyword">condition</span> ] </span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> c1, c2, ...]</span><br><span class="line">[LIMIT row_count];</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li>
<p><font color = blue>多表删除</font></p>
</li>
<li>
<p><font color = blue>多表删除是指从一个或多个表中删除满足条件的数据，其中的 table_references代表了多个表的join操作，例如以下两个例子代表</font></p>
</li>
<li>
<p><font color = blue>从t 1和t 2表中删除满足条件的数据</font></p>
</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> somelog <span class="keyword">WHERE</span> <span class="keyword">user</span> <span class="operator">=</span> <span class="string">&#x27;jcole&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> timestamp_column LIMIT <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DELETE</span> t1, t2 <span class="keyword">FROM</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">on</span> t1.id<span class="operator">=</span>t2.id <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t3 <span class="keyword">on</span> t1.id<span class="operator">=</span>t3.id;</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue>对多表删除语句而言，如果想对表使用别名，则只能在 table_references子句中使用，否则会报错。</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a1, a2 <span class="keyword">FROM</span> t1 <span class="keyword">AS</span> a1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">AS</span> a2 <span class="keyword">ON</span> a1.id<span class="operator">=</span>a2.id;      <span class="comment">-- 正确</span></span><br><span class="line"><span class="keyword">DELETE</span> t1 <span class="keyword">AS</span> a1, t2 <span class="keyword">AS</span> a2 <span class="keyword">FROM</span> t1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> t2 <span class="keyword">WHERE</span> a1.id<span class="operator">=</span>a2.id;      <span class="comment">-- 错误</span></span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>1. Give all agents in New York a 10% raise in the percent commission they earn on an order.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  agents</span><br><span class="line"><span class="keyword">SET</span>  <span class="keyword">percent</span> <span class="operator">=</span> <span class="number">1.1</span> <span class="operator">*</span> <span class="keyword">percent</span></span><br><span class="line"><span class="keyword">WHERE</span>  city <span class="operator">=</span> ‘<span class="keyword">New</span> York’;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2. Give all customers who have total orders of more than $1000 a 10% increase in the discnt they receive.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span>  customers</span><br><span class="line"><span class="keyword">SET</span>  discnt <span class="operator">=</span> <span class="number">1.1</span> <span class="operator">*</span> discnt</span><br><span class="line"><span class="keyword">WHERE</span>  cid  <span class="keyword">in</span>  ( <span class="keyword">select</span>  cid</span><br><span class="line"><span class="keyword">from</span>  orders</span><br><span class="line"><span class="keyword">group</span>  <span class="keyword">by</span>  cid</span><br><span class="line"><span class="keyword">having</span>  <span class="built_in">sum</span>(dollars) <span class="operator">&gt;</span> <span class="number">1000</span> );</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3. Delete all agents in New York.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span>  <span class="keyword">FROM</span>  agents</span><br><span class="line"><span class="keyword">WHERE</span>  city <span class="operator">=</span> ‘<span class="keyword">New</span> York’;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>4. Delete all agents who have total orders of less than $600.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span>  <span class="keyword">FROM</span>  agents</span><br><span class="line"><span class="keyword">WHERE</span>  aid  <span class="keyword">IN</span>  (</span><br><span class="line"><span class="keyword">select</span>  aid</span><br><span class="line"><span class="keyword">from</span>  orders</span><br><span class="line"><span class="keyword">group</span>  <span class="keyword">by</span>  aid</span><br><span class="line"><span class="keyword">having</span>  <span class="built_in">sum</span>(dollars) <span class="operator">&lt;</span> <span class="number">600</span>  );</span><br></pre></td></tr></table></figure>
<br/>
<hr />
<h2 id="ch4object-relational-sql"><a class="markdownIt-Anchor" href="#ch4object-relational-sql"></a> Ch4.Object-Relational SQL</h2>
<h3 id="一-object-types"><a class="markdownIt-Anchor" href="#一-object-types"></a> 一. Object Types</h3>
<h4 id="1定义新的数据类型对象类型"><a class="markdownIt-Anchor" href="#1定义新的数据类型对象类型"></a> 1.定义新的数据类型（对象类型）</h4>
<ul>
<li><font color = blue size = 4>对象类型的创建与删除</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  TYPE  typename  <span class="keyword">AS</span>  OBJECT</span><br><span class="line">(attrname  datatype, ......);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span>  TYPE  typename;</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue size = 4>创建一个 ’姓名’(name_t) 类型</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TYPE name_t <span class="keyword">AS</span> OBJECT (</span><br><span class="line">lname  <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">fname  <span class="type">varchar</span>(<span class="number">30</span>),</span><br><span class="line">mi  <span class="type">char</span>(<span class="number">1</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="2对象类型的使用方法"><a class="markdownIt-Anchor" href="#2对象类型的使用方法"></a> 2.对象类型的使用方法</h4>
<ul>
<li><font color = blue size = 4>使用已有的对象类型来创建新的类型或表</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  TYPE  person_t  <span class="keyword">AS</span>  OBJECT (</span><br><span class="line">ssno          <span class="type">int</span>,</span><br><span class="line">pname      	  name_t,    <span class="comment">-- (类型的嵌套定义关系)</span></span><br><span class="line">age           <span class="type">int</span>  );</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="3使用对象数据类型来直接创建一张表"><a class="markdownIt-Anchor" href="#3使用对象数据类型来直接创建一张表"></a> 3.使用对象数据类型来直接创建一张表</h4>
<ul>
<li><font color = blue size = 4>  CREATE TABLE tablename OF typename<br />
{  ( constraint-define ) } ;</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  <span class="keyword">TABLE</span>  people  <span class="keyword">OF</span>  person_t (<span class="keyword">PRIMARY</span>  KEY(ssno)) ;</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="4对象值的创建-查询与更新"><a class="markdownIt-Anchor" href="#4对象值的创建-查询与更新"></a> 4.对象值的创建、查询与更新</h4>
<ul>
<li><font color = blue size = 4>对象值的创建</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Insert</span>  <span class="keyword">into</span>  teachers  <span class="keyword">values</span></span><br><span class="line">(<span class="number">1234</span>, name_t(‘Einstein’, ‘Albert’, ‘E’), <span class="number">120</span>);  <span class="comment">-- 对象构造函数</span></span><br></pre></td></tr></table></figure>
<ul>
<li><font color = blue size = 4>对象值的查询</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span>   t.tid, t.name_t.fname, t.name_t.lname</span><br><span class="line"><span class="keyword">From</span>    teachers  t</span><br><span class="line"><span class="keyword">Where</span>  t.room <span class="operator">=</span> <span class="number">123</span></span><br></pre></td></tr></table></figure>
<ul>
<li><font color = blue size = 4>对象值的更新</font></li>
</ul>
<p><font color = green size = 4>1) 修改元组中的对象属性值</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span>  people  p</span><br><span class="line"><span class="keyword">set</span>  p.pname <span class="operator">=</span> name_t(<span class="string">&#x27;Gould&#x27;</span>, <span class="string">&#x27;Ben&#x27;</span>, <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">where</span>  ssno <span class="operator">=</span> <span class="number">321341223</span>;</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>2) 修改某个对象属性值的成员属性</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span>  people  p</span><br><span class="line"><span class="keyword">set</span>  p.pname.mi <span class="operator">=</span> ‘C’</span><br><span class="line"><span class="keyword">where</span>  ssno <span class="operator">=</span> <span class="number">321341223</span>;</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>3) 修改整个元组</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span>  people  p</span><br><span class="line"><span class="keyword">set</span>  p <span class="operator">=</span> person_t (</span><br><span class="line"><span class="number">332341223</span>,</span><br><span class="line">name_t(<span class="string">&#x27;Gould&#x27;</span>, <span class="string">&#x27;Glen&#x27;</span>, <span class="string">&#x27;A&#x27;</span>), <span class="number">55</span> )</span><br><span class="line"><span class="keyword">where</span>  ssno <span class="operator">=</span> <span class="number">321341223</span>;</span><br></pre></td></tr></table></figure>
<br/>
<h4 id="5对象的引用类型"><a class="markdownIt-Anchor" href="#5对象的引用类型"></a> 5.对象的引用类型</h4>
<ul>
<li><font color = blue size = 4>对象的引用类型：REF  &lt; object type &gt;</font></li>
</ul>
<blockquote>
<ol>
<li>
<p>是指向某个元组对象的指针类型</p>
</li>
<li>
<p>可用于实现对象类型之间的嵌套引用</p>
</li>
</ol>
</blockquote>
<br/>
<ul>
<li><font color = blue size = 4>在使用含有 REF类型的对象类型(Object Type)来创建关系表时，必须使用<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Scope for子句来限制REF属性的取值范围</span>。</font></li>
</ul>
<p><font color = red size =4>1) 定义类型之间的引用关系</font></p>
<blockquote>
<p><font color = brown size = 4>定义基本的对象类型：</font><br />
<font color = green size = 4>customer_t,  agents_t,  products_t</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  type customer_t <span class="keyword">as</span> object (</span><br><span class="line">cid  <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line">cname  <span class="type">varchar</span>(<span class="number">13</span>),</span><br><span class="line">city  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">discnt  <span class="type">real</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  type  agent_t <span class="keyword">as</span> object (  </span><br><span class="line">aid  <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">aname  <span class="type">varchar</span>(<span class="number">13</span>),</span><br><span class="line">city  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">percent</span>  <span class="type">smallint</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  type  product_t <span class="keyword">as</span> object (</span><br><span class="line">pid  <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">pname  <span class="type">varchar</span>(<span class="number">13</span>),</span><br><span class="line">city  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">quantity  <span class="type">integer</span>,</span><br><span class="line">price  <span class="keyword">double</span>  <span class="keyword">precision</span>);</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = brown size = 4>定义类型之间的引用关系 :</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> type order_t <span class="keyword">as</span> object  (</span><br><span class="line">ordno      <span class="type">int</span>,</span><br><span class="line"><span class="keyword">month</span>      <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">cid        <span class="type">char</span>(<span class="number">4</span>),</span><br><span class="line">aid        <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">pid        <span class="type">char</span>(<span class="number">3</span>),</span><br><span class="line">qty        <span class="type">int</span>,</span><br><span class="line">dollars    <span class="type">double precision</span>,  </span><br><span class="line">ordcust    <span class="keyword">ref</span>  customer_t,</span><br><span class="line">ordagent   <span class="keyword">ref</span>  agent_t,</span><br><span class="line">ordprod    <span class="keyword">ref</span>  product_t);</span><br></pre></td></tr></table></figure>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = blue size = 4>(新增三个REF属性，分别引用（指向）三个不同的元组对象（Row Object）)</font></span></p>
<br/>
<p><font color = red size = 5>2) 创建含有引用类型的关系表</font></p>
<blockquote>
<p><font color = brown size = 4>使用前面定义的对象类型创建基本关系表 :</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> customers <span class="keyword">of</span> customer_t</span><br><span class="line">(<span class="keyword">primary</span> key (cid));</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> products <span class="keyword">of</span> product_t</span><br><span class="line">(<span class="keyword">primary</span> key (pid));</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> agents <span class="keyword">of</span> agent_t</span><br><span class="line">(<span class="keyword">primary</span> key (aid));</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = brown size = 4>创建含有引用类型的关系表</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> orders <span class="keyword">of</span> order_t  (</span><br><span class="line">    <span class="keyword">primary</span> key (ordno),</span><br><span class="line">    <span class="keyword">scope</span> <span class="keyword">for</span> (ordcust)  <span class="keyword">is</span>  customers,</span><br><span class="line">    <span class="keyword">scope</span> <span class="keyword">for</span> (ordagent) <span class="keyword">is</span>  agents,</span><br><span class="line">    <span class="keyword">scope</span> <span class="keyword">for</span> (ordprod)  <span class="keyword">is</span>  products );</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = red size = 5>3) 引用关系查询</font></p>
<blockquote>
<p><font color = brown size = 4>根据元组之间的REF引用关系进行查询</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>   o.ordno, o.ordcust.cname</span><br><span class="line"><span class="keyword">from</span>     orders  o</span><br><span class="line"><span class="keyword">where</span>  o.dollars <span class="operator">&gt;</span> <span class="number">200.00</span></span><br></pre></td></tr></table></figure>
<p><font color = blue size = 4>1. Find pid values of products that have been ordered by at least two customers.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">distinct</span>  x1.pid </span><br><span class="line"><span class="keyword">from</span>    orders x1, orders x2</span><br><span class="line"> <span class="keyword">where</span>  x1.pid <span class="operator">=</span> x2.pid <span class="keyword">and</span> x1.ordcust <span class="operator">&lt;</span> x2.ordcust;</span><br></pre></td></tr></table></figure>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>ordcust 承担起了 cid 所担负的责任！</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">distinct</span>  x1.pid </span><br><span class="line"><span class="keyword">from</span>    orders x1, orders x2</span><br><span class="line"><span class="keyword">where</span>  x1.pid <span class="operator">=</span> x2.pid <span class="keyword">and</span> x1.cid <span class="operator">&lt;</span> x2.cid;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = red size = 5>4) 函数与谓词</font></p>
<ul>
<li><font color = blue size = 4>函数与谓词</font></li>
</ul>
<blockquote>
<p>1.获取对象(元组)的引用指针: REF(……)</p>
<p>2.返回引用指针所指向对象的值: DEREF(……)</p>
</blockquote>
<br/>
<ul>
<li>
<p><font color = blue size = 4>两个谓词</font></p>
<ul>
<li>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">IS DANGLING</span></p>
<blockquote>
<ol>
<li>
<p>用于判断所引用的元组对象是否存在</p>
</li>
<li>
<p>如果所引用的元组对象不存在，那么该谓词返回逻辑真(TRUE)，否则返回逻辑假(FALSE)。</p>
</li>
<li>
<p>该谓词主要用于检查那些错误的对象引用指针。</p>
</li>
</ol>
</blockquote>
</li>
<li>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">IS NULL</span></p>
</li>
</ul>
</li>
</ul>
<br/>
<p><font color = blue size = 4>1. Retrieve all customer names where the customer does not place an order through agent a05.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  c.cname</span><br><span class="line"><span class="keyword">from</span>   customers  c</span><br><span class="line"><span class="keyword">where</span>  <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line"><span class="keyword">select</span>  <span class="operator">*</span>  <span class="keyword">from</span> orders x </span><br><span class="line"><span class="keyword">where</span>  x.ordcust <span class="operator">=</span> <span class="keyword">ref</span>(c) <span class="keyword">and</span> x.aid <span class="operator">=</span> <span class="string">&#x27;a05‘ );</span></span><br></pre></td></tr></table></figure>
<br/>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  o.cid    <span class="keyword">from</span>  orders o</span><br><span class="line"><span class="keyword">where</span>  o.ordcust  <span class="keyword">IS</span> DANGLING;</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>等价于：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> o.cid   <span class="keyword">from</span> orders o</span><br><span class="line"><span class="keyword">where</span> o.ordcust <span class="operator">&lt;&gt;</span></span><br><span class="line">(<span class="keyword">select</span> <span class="keyword">ref</span>(c) <span class="keyword">from</span> customers c</span><br><span class="line"><span class="keyword">where</span> c.cid <span class="operator">=</span> o.cid)</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = red size = 5>5) 类型的循环嵌套定义</font></p>
<ul>
<li><font color = blue size = 4>对象类型(object type)不能嵌套定义，但 REF 关系可以实现嵌套引用。</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  type  police_officer_t <span class="keyword">as</span> object</span><br><span class="line">( pol_person   person_t,</span><br><span class="line">  badge_number <span class="type">integer</span>,</span><br><span class="line">  partner  <span class="keyword">ref</span> police_officer_t );</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue size = 4>可以使用对象类型 police_officer_t 来创建表</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> police_officers <span class="keyword">of</span> police_officer_t</span><br><span class="line">( <span class="keyword">primary</span> key (badge_number),</span><br><span class="line">  <span class="keyword">scope</span> <span class="keyword">for</span> (partner) <span class="keyword">is</span> police_officers );</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = blue size = 4>在表 police_officers 上的对象查询的例子</font></li>
</ul>
<p><font color = green size = 4>1. Retrieve the last names of all police officers who have partners over sixty years of age.</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  p.pol_person.pname.lname</span><br><span class="line"><span class="keyword">from</span>    police_officers  p</span><br><span class="line"><span class="keyword">where</span>   p.partner.pol_person.age <span class="operator">&gt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = red size = 5>6) 其它约束</font></p>
<ul>
<li><font color = blue size = 4>有关 REF定义的其它约束 (REF Dependencies)</font></li>
</ul>
<p><font color = green size = 4>1)  两张表之间的相互 REF关系的定义</font></p>
<blockquote>
<ol>
<li>
<p>首先，定义两个具有相互REF关系的对象类型 (create type …… )</p>
</li>
<li>
<p>再用创建好的对象类型创建关系表</p>
</li>
</ol>
</blockquote>
<br/>
<p><font color = green size  = 4>2)  两个具有相互REF关系的表/类型的删除</font></p>
<blockquote>
<ol>
<li>
<p>在删除类型(drop type)之前需要先删除表(drop table)</p>
</li>
<li>
<p>在删除类型(drop type)时需要采用强制删除的方式</p>
</li>
</ol>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> TYPE typename FORCE;</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p>先不管REF属性的赋值(先置为NULL)，然后再使用UPDATE操作修改REF属性上的取值</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span>  orders  o</span><br><span class="line"> <span class="keyword">set</span>   ordcust <span class="operator">=</span> (<span class="keyword">select</span> <span class="keyword">ref</span>(c) <span class="keyword">from</span> customers c</span><br><span class="line">                        <span class="keyword">where</span> c.cid <span class="operator">=</span> o.cid),</span><br><span class="line">     ordagent <span class="operator">=</span> (<span class="keyword">select</span> <span class="keyword">ref</span>(a) <span class="keyword">from</span> agents a</span><br><span class="line">                        <span class="keyword">where</span> a.aid <span class="operator">=</span> o.aid),</span><br><span class="line">     ordprod <span class="operator">=</span> (<span class="keyword">select</span> <span class="keyword">ref</span>(p) <span class="keyword">from</span> products p</span><br><span class="line">                        <span class="keyword">where</span> p.pid <span class="operator">=</span> o.pid);</span><br></pre></td></tr></table></figure>
<br/>
<hr />
<h3 id="二-collection-types集合类型"><a class="markdownIt-Anchor" href="#二-collection-types集合类型"></a> 二. Collection Types(集合类型)</h3>
<h4 id="1table-types-nested-tables"><a class="markdownIt-Anchor" href="#1table-types-nested-tables"></a> 1.Table Types ( Nested Tables )</h4>
<p><font color = blue size = 4>1) 创建一个新的表类型 (table type)</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  TYPE  dependents_t</span><br><span class="line"><span class="keyword">AS</span>  <span class="keyword">TABLE</span>  <span class="keyword">OF</span>  person_t;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2) 使用类型dependents_t来定义表employees中的属性并形成一个嵌套表(nested table)定义。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employees (</span><br><span class="line">    eid       <span class="type">int</span>,</span><br><span class="line">    eperson   person_t,</span><br><span class="line">    dependents  dependents_t,</span><br><span class="line">    <span class="keyword">primary</span> key (eid)</span><br><span class="line">) nested <span class="keyword">table</span> dependents store <span class="keyword">as</span> dependents_tab;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>3) Nested table的访问</font></p>
<ul>
<li>
<p><font color = red size = 4>table ( … ) 的使用</font><br></p>
<p><font color = brown size = 4>Oracle 不支持直接对嵌套表属性的统计查询功能，即下述的统计查询操作是错误的：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="built_in">count</span>(e.dependents)</span><br><span class="line"><span class="keyword">from</span>    employees  e </span><br><span class="line"><span class="keyword">where</span>  e.eid <span class="operator">=</span> <span class="number">101</span>;</span><br></pre></td></tr></table></figure>
<p><font color = brown size = 4>应为：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span>  <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">From</span>   <span class="keyword">table</span> (</span><br><span class="line">    <span class="keyword">select</span> e.dependents</span><br><span class="line">    <span class="keyword">from</span> employees e  <span class="keyword">where</span> e.eid <span class="operator">=</span> <span class="number">101</span>);</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p><font color = red size = 4>Oracle 数据库没有提供 nested table 的相等比较运算。</font><br></p>
<p><font color = brown size = 4>可以使用 IN 操作符来实现某些需要通过 nested table 进行的查询功能</font></p>
<br/>
</li>
<li>
<p><font color = red size = 4>Oracle提供了单个对象的相等比较功能</font></p>
<p><font color = blue size = 4>1. Retrieve eids with dependents that have name given by<br />
name_t(‘Lukas’, ‘David’, ‘E’)</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  eid  <span class="keyword">from</span>  employees e</span><br><span class="line"><span class="keyword">where</span>  name_t(‘Lukas’, ‘David’, ‘E’) <span class="keyword">in</span> </span><br><span class="line">      ( <span class="keyword">select</span>  d.pname</span><br><span class="line">        <span class="keyword">from</span>  <span class="keyword">table</span>(e.dependents)  d);</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p><font color = red size = 4>Nested Cursors （嵌套游标）</font><br></p>
<p><font color = brown size = 4>(i) 普通的查询操作</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.eid, d.ssno <span class="keyword">as</span> dep_sso</span><br><span class="line"><span class="keyword">from</span> employees e, <span class="keyword">table</span>(e.dependents) d</span><br><span class="line"><span class="keyword">where</span> d.age <span class="operator">&lt;</span> <span class="number">16</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = brown size = 4>(ii) 使用 nested cursor 的查询操作</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.eid, <span class="keyword">cursor</span>(<span class="keyword">select</span> d.ssno <span class="keyword">as</span> dep_ssno </span><br><span class="line"><span class="keyword">from</span> <span class="keyword">table</span>(e.dependents) d</span><br><span class="line"><span class="keyword">where</span> d.age <span class="operator">&lt;</span> <span class="number">16</span>) dep_tab</span><br><span class="line"><span class="keyword">from</span> employees e;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<h4 id="2array-types"><a class="markdownIt-Anchor" href="#2array-types"></a> 2.Array Types</h4>
<p><font color = blue size = 4>1) Array Types for VARRAYs</font></p>
<blockquote>
<p><font color = green size = 4>1. 自定义一个TYPE使用 VARRAY来得到一个数组但只能对基本类型定义。</font></p>
<p><font color = green size = 4>2. VARRAY数据结构可存储相同类型元素的一个固定大小的连续集合。</font><br />
<font color = green size = 4>3. VARRAY用于存储数据的有序集合，但它往往是更加有用认为数组作为相同类型的变量的集合。</font></p>
</blockquote>
<br/>
<ul>
<li><font color = red size = 4>一个VARRAY类型是用CREATE TYPE语句创建。必须指定最大长度，并存储在 VARRAY元素的类型。<br />
PL/SQL 块创建 VRRAY类型的基本语法：</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">TYPE  varray_type_name  <span class="keyword">IS</span>  VARRAY(n) <span class="keyword">of</span> <span class="operator">&lt;</span>element_type<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = blue size = 4>create type extensions_t as varray(<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">4</span>) of <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">int</span>;</font></p>
<p><font color = blue size = 4>使用 Array Types 定义表中的属性</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span>  <span class="keyword">table</span>  phonebook  (</span><br><span class="line">phperson   person_t,</span><br><span class="line">extensions  extensions_t );</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>考研</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>DatabaseNotes-Ch5,6</title>
    <url>/posts/780f9bb4.html</url>
    <content><![CDATA[<h2 id="ch5-embedded-sql-嵌入式sql"><a class="markdownIt-Anchor" href="#ch5-embedded-sql-嵌入式sql"></a> Ch5. Embedded SQL （嵌入式SQL）</h2>
<h3 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1. 定义</h3>
<p><font color = blue size = 4>嵌入式SQL是将SQL嵌入到某一种高级语言之中，如C/C++,Java等 这种高级语言被称为宿主语言</font></p>
<br/>
<h3 id="2-特性"><a class="markdownIt-Anchor" href="#2-特性"></a> 2. 特性</h3>
<p>​	<font color = blue size = 4>1）继承了高级语言的过程控制性</font></p>
<span id="more"></span>
<p>​	<font color = blue size = 4>2) 结合了SQL语言的复杂结果集操作的非过程性</font></p>
<p>​	<font color = blue size = 4>3) 为数据库操作者提供了安全可靠的操作方式：通过应用程序进行操作</font></p>
<br/>
<h3 id="3-和交互式sql的对比"><a class="markdownIt-Anchor" href="#3-和交互式sql的对比"></a> 3. 和交互式SQL的对比</h3>
<p><font color = blue size = 4>1) 交互式(Interactive SQL ):</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> Sname,Sage <span class="keyword">from</span> Students <span class="keyword">where</span> Sname <span class="operator">=</span> &quot;张三&quot;；</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size = 4>2) 嵌入式(Embedded SQL, 此文宿主语言为C):</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">select</span> Sname,Sage <span class="keyword">into</span> :vSname,:vSage <span class="keyword">from</span> Students <span class="keyword">where</span> Sname <span class="operator">=</span>  &quot;张三&quot;；</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = green size  = 4>1. exec sql : 引导SQL语句，提供给C编译器,以便对SQl语句预编译成C编译器可识别的语句</font></p>
<p><font color = green size = 4>2. into 子句: 用于把SQL 语句的检索结果赋给高级语言的程序变量</font></p>
<p><font color = green size = 4>3. 用冒号开头: </font></p>
<ul>
<li><font color = green size = 4>表示高级语言的程序变量  :vsname  , :vsage</font></li>
<li><font color = green size = 4>冒号很重要, 用于区分是程序变量还是表的字段!!</font></li>
</ul>
</blockquote>
<br/>
<h3 id="4-宿主语言如何与数据库连接"><a class="markdownIt-Anchor" href="#4-宿主语言如何与数据库连接"></a> 4. 宿主语言如何与数据库连接</h3>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>连接：</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">connect</span> <span class="keyword">to</span> target<span class="operator">-</span>server <span class="keyword">as</span> <span class="keyword">connect</span><span class="operator">-</span>name <span class="keyword">user</span> <span class="keyword">user</span><span class="operator">-</span>name;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">connect</span> <span class="keyword">to</span> <span class="keyword">default</span>;</span><br></pre></td></tr></table></figure>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>断开：</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">disconnect</span> <span class="keyword">connect</span><span class="operator">-</span>name;</span><br><span class="line"><span class="keyword">or</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">disconnect</span> <span class="keyword">current</span>;</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="5-如何将宿主语言的变量传递给sql语句"><a class="markdownIt-Anchor" href="#5-如何将宿主语言的变量传递给sql语句"></a> 5. 如何将宿主语言的变量传递给SQL语句</h3>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>变量声明：</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">begin</span> <span class="keyword">declare</span> section;</span><br><span class="line">     <span class="type">char</span> vSname[<span class="number">10</span>],specName[<span class="number">10</span>]<span class="operator">=</span>&quot;张三&quot;</span><br><span class="line">     <span class="type">int</span> vSage;</span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">end</span> <span class="keyword">declare</span> section;</span><br></pre></td></tr></table></figure>
<br/>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>变量使用：</font></span></p>
<ul>
<li><font color = green size = 4>变量可传递给SQL语句的where等字句，以便SQL语言能够按照指定的要求进行检索</font></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">select</span> Sname,Sage <span class="keyword">into</span> </span><br><span class="line"><span class="comment">--宿主程序的变量</span></span><br><span class="line">:vSname.:vSage <span class="keyword">from</span> Student <span class="keyword">where</span> Sname<span class="operator">=</span>:specName;</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="6-sql语句如何执行"><a class="markdownIt-Anchor" href="#6-sql语句如何执行"></a> 6. SQL语句如何执行</h3>
<p><font color = blue size = 4>1) SQL语句在执行过程中，必须有提交和撤销语句才能确认其操作结果 </font></p>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>提交：</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">commit</span> work </span><br></pre></td></tr></table></figure>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>撤销：</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">rollback</span> work</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="7-事务"><a class="markdownIt-Anchor" href="#7-事务"></a> 7. 事务</h3>
<p><font color = blue size = 4>1) 定义: </font></p>
<ul>
<li><font color = green size = 4>事务是一个存取或改变数据库内容的程序的一次执行，或者说一条或多条SQL语句的一次执行被看做一个事务，一般由应用程序提出，有开始和结束，结束前需要提交或撤销</font></li>
</ul>
<br/>
<p><font color = blue size = 4>2) 事务的ACID 特性</font></p>
<ul>
<li><font color = red size = 4>原子性Atoomicity：</font>DBMS能够保证事务的一组更新操作是原子不可分的，要么全做，要么全不做</li>
<li><font color = red size = 4>一致性Consistency: </font> DBMS保证事务的操作状态是正确的</li>
<li><font color = red size = 4>隔离性Isolation:</font> DBMS保证并发的多个事务之间相互不受影响</li>
<li><font color = red size = 4>持久性Durability：</font>DBMS保证已提交事务的影响是持久的，被撤销事务的影响是可恢复的</li>
</ul>
<br/>
<h3 id="8-如何将sql检索到的结构传递回宿主程序进行处理"><a class="markdownIt-Anchor" href="#8-如何将sql检索到的结构传递回宿主程序进行处理"></a> 8. 如何将SQL检索到的结构传递回宿主程序进行处理</h3>
<p><font color = blue size = 4>1) 单行结果处理</font></p>
<ul>
<li>
<p><font color = green size = 4>检索单行结果，可以将结果直接传到<mark>宿主程序的变量</mark>中</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">select</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>] expression [,expression...]</span><br><span class="line">     <span class="keyword">INTO</span> host<span class="operator">-</span>variable,[host<span class="operator">-</span>variable,...]</span><br><span class="line">     <span class="keyword">From</span> tableref [corr_name][,tableref[corr_name]...]</span><br><span class="line">     <span class="keyword">Where</span> search_condition;</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>Eg：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">select</span> Sname,Sage <span class="keyword">into</span> :vSname,:vSage <span class="keyword">from</span> Student <span class="keyword">where</span> Sname<span class="operator">=</span>:specName;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<p><font color = blue size = 4>2) 多行结果处理</font></p>
<p><font color = red size = 4>游标(Cursor)</font></p>
<blockquote>
<p><font color = green size  = 4>1. 游标是指向某检索记录集的指针，通过这个指针的移动，每次读一行，处理一行，再读一行，直到处理完毕 ;</font></p>
<p><font color = green size  = 4>2. 读一行的操作是通过Fetch…into实现的，每一次Fetch，都是先向下移动指针，然后再读取，记录集有结束表示EOF,用来标记后面已经没有记录了 ;</font></p>
<p><font color = green size  = 4>3. 游标的使用需要先定义，再打开，接着一条一条处理，最后关闭 。</font></p>
</blockquote>
<br/>
<ul>
<li>
<p><font color = green size = 4>Cursor的定义：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> <span class="keyword">SQL</span> <span class="keyword">DECLARE</span> cursor_name <span class="keyword">CURSOR</span> <span class="keyword">FOR</span></span><br><span class="line">     Subquery</span><br><span class="line">     [<span class="keyword">ORDER</span>　<span class="keyword">BY</span> result_column [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>][,result_column...]]</span><br><span class="line">     [<span class="keyword">FOR</span> [READ <span class="keyword">ONLY</span> <span class="operator">|</span><span class="keyword">UPDATE</span> [<span class="keyword">OF</span> columnname[,columnname....]]]]</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>Eg：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">declare</span> cur_student <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">     <span class="keyword">select</span> Sno ,Sname,Sclass <span class="keyword">from</span> Student <span class="keyword">where</span> Sclass<span class="operator">=</span>:vClass</span><br><span class="line">     <span class="keyword">order</span> <span class="keyword">by</span> Sno</span><br><span class="line"><span class="comment">--只读属性</span></span><br><span class="line">     <span class="keyword">for</span> read <span class="keyword">only</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>Cursor的打开和关闭 </font></p>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green szie = 4>打开：</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">open</span> cursor_name; </span><br></pre></td></tr></table></figure>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>关闭：</font></span></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">close</span> cursor_name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>Cursor的数据读取（多行，并传入宿主程序变量）</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">fetch</span> cursor_name</span><br><span class="line">     <span class="keyword">into</span> host<span class="operator">-</span>variable,[host<span class="operator">-</span>variable,...]</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>Eg：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">fetch</span> cur_student <span class="keyword">into</span> :vSno,:vSname,:vSage;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<h3 id="9-数据库的删除与更新"><a class="markdownIt-Anchor" href="#9-数据库的删除与更新"></a> 9. 数据库的删除与更新</h3>
<p><font color = blue size = 4>1) 删除</font></p>
<ul>
<li>
<p><font color = green size = 4>查找删除：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">delete</span> <span class="keyword">from</span> tablename [corr_name] <span class="keyword">where</span> search_condition</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>Eg：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">delete</span> <span class="keyword">from</span> customers c <span class="keyword">where</span> c.city<span class="operator">=</span><span class="string">&#x27;Harbin&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders o <span class="keyword">where</span> o.cid<span class="operator">=</span>c.cid)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>定位删除：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">delete</span> <span class="keyword">from</span> tablename [corr_name] <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> cursor_name</span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>Eg：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 声明游标</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">declare</span> delcust <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">     <span class="keyword">select</span> cid <span class="keyword">from</span> customers c <span class="keyword">where</span> c.city<span class="operator">=</span><span class="string">&#x27;harbin&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> orders o <span class="keyword">where</span> o.cid<span class="operator">=</span>c.cid)</span><br><span class="line"><span class="comment">-- 更新属性</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">of</span> cid;</span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">open</span> delcust</span><br><span class="line"><span class="comment">-- 提取变量并删除</span></span><br><span class="line">while(<span class="literal">TRUE</span>)&#123;</span><br><span class="line"><span class="comment">-- 循环提取游标内变量到宿主程序的变量</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">fetch</span> delcust <span class="keyword">into</span> :cust_id;</span><br><span class="line"><span class="comment">-- 删除当前行</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">delete</span> <span class="keyword">from</span> customers <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> delcust;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<p><font color = blue size = 4>2) 更新</font></p>
<ul>
<li>
<p><font color = green size = 4>查找更新：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">update</span> tablename [corr_name] <span class="keyword">SET</span> columname<span class="operator">=</span> expr [,columname<span class="operator">=</span>expr...] <span class="keyword">where</span> search_condition </span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>Eg：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">update</span> student s <span class="keyword">set</span> sclass<span class="operator">=</span><span class="string">&#x27;035102&#x27;</span> <span class="keyword">where</span> s.sclass<span class="operator">=</span><span class="string">&#x27;034101‘;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>定位更新:</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">update</span> tablename [corr_name] <span class="keyword">SET</span> columname<span class="operator">=</span> expr [,columname<span class="operator">=</span>expr...] <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> cursor_name </span><br></pre></td></tr></table></figure>
<p><font color = green size = 4>Eg：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 声明游标</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">declare</span> stud <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">     <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student s <span class="keyword">where</span> s.class<span class="operator">=</span><span class="string">&#x27;034101&#x27;</span></span><br><span class="line"><span class="comment">-- 更新属性</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">update</span> <span class="keyword">of</span> sclass;</span><br><span class="line"><span class="comment">-- 打开游标</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">open</span> stud</span><br><span class="line">while(<span class="literal">TRUE</span>)&#123;</span><br><span class="line"><span class="comment">-- 循环提取游标内变量到宿主程序的变量</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">fetch</span> stud <span class="keyword">into</span> :vSno,:vSname,:vSclass;</span><br><span class="line"><span class="comment">-- 更新当前行</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">update</span> student  <span class="keyword">set</span> sclass<span class="operator">=</span><span class="string">&#x27;035102&#x27;</span> <span class="keyword">where</span> <span class="keyword">current</span> <span class="keyword">of</span> stud;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<h3 id="10-宿主程序如何知道sql语句的执行状态是否发生错误"><a class="markdownIt-Anchor" href="#10-宿主程序如何知道sql语句的执行状态是否发生错误"></a> 10. 宿主程序如何知道SQL语句的执行状态，是否发生错误</h3>
<p><font color  = blue size = 4>1) 状态：</font></p>
<ul>
<li><font color = green size = 4>是指嵌入式SQL语句的执行状态，尤其指一些出错状态，有时程序需要知道这些状态并对这些状态进行处理 </font></li>
</ul>
<br/>
<p><font color = blue size = 4>2) 状态捕获及处理由三部分构成:</font></p>
<ul>
<li>
<p><font color = green size = 4>设置SQL通信区：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> include sqlca;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中SQLCA是一个已被声明过的具有C语言的结构形式的内存信息区，其中的成员变量用来记录SQL语句的执行状态，便于宿主程序读取与处理</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>设置状态捕获语句：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">whenever</span> <span class="keyword">condition</span> action;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>
<p>可设置多次</p>
</li>
<li>
<p>该语句会对所有由exec sql语句所引起的对数据库系统的调用自动检查它是否满足条件</p>
</li>
<li>
<p>condition包括 sqlerror；not found；sqlwarning ; action包括continue;goto;stop;do|call</p>
</li>
<li>
<p>状态捕获语句Whenever的作用范围是其后的所有exec sql 语句，直到程序中出现另一条相同条件的whenever为止</p>
</li>
</ol>
</blockquote>
<br/>
</li>
<li>
<p><font color = green size = 4>状态处理语句：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">report_error:<span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">rollback</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>某一段程序以应对SQL操作的某种状态</p>
</blockquote>
</li>
</ul>
<br/>
<h3 id="11-动态sql依据条件动态构造sql语句但欲访问的表名和字段对编程者是已知的"><a class="markdownIt-Anchor" href="#11-动态sql依据条件动态构造sql语句但欲访问的表名和字段对编程者是已知的"></a> 11. 动态SQL,依据条件动态构造SQL语句，但欲访问的表名和字段对编程者是已知的</h3>
<p><font color = blue size = 4>1) 静态SQL:</font></p>
<ul>
<li>
<p><font color = green size = 4>SQL语句在程序中已经按要求写好，只需要把一些参数通过变量传送给嵌入式SQL语句即可 </font></p>
</li>
<li>
<p><font color = green size = 4>示例：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">SpecName<span class="operator">=</span><span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">select</span> Sno,Sname,Sclass <span class="keyword">into</span> :vSno,:vSname,:vSclass <span class="keyword">from</span> Student <span class="keyword">where</span> Sname<span class="operator">=</span>:SpecName;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<p><font color = blue size = 4>2) 动态SQL:</font></p>
<ul>
<li>
<p><font color = green size = 4>SQL语言可以在程序中动态构造，形成一个字符串，然后再交给DBMS执行，交给DBMS执行时仍然可以传递变量</font></p>
</li>
<li>
<p><font color = green size = 4>示例：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#include <span class="operator">&lt;</span>stdio.h<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">--设置SQL通信区</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> include sqlca;</span><br><span class="line"></span><br><span class="line"><span class="comment">--变量声明</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">begin</span> <span class="keyword">declare</span> section;</span><br><span class="line">     <span class="type">char</span> user_name[]<span class="operator">=</span>&quot;Scott&quot;; <span class="type">char</span> user_pwd[]<span class="operator">=</span>&quot;tiger&quot;;</span><br><span class="line">     <span class="type">char</span> sqltext[]<span class="operator">=</span>&quot;delete from customers where cid=\&#x27;c006\&#x27;&quot;;</span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">end</span> <span class="keyword">declare</span> section;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">--设置状态捕获语句</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">whenever</span> sqlerror goto report_error;</span><br><span class="line"><span class="comment">--连接数据库</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">connect</span> :user_name identified <span class="keyword">by</span> :user_pwd;</span><br><span class="line"><span class="comment">--立即执行语句</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">execute</span>  immediate :sqltext;</span><br><span class="line"><span class="comment">--提交事务</span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">commit</span> <span class="keyword">release</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">--状态处理语句</span></span><br><span class="line">     report_error:print_dberror(); </span><br><span class="line"><span class="comment">--撤销事务    </span></span><br><span class="line">     <span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">rollback</span> <span class="keyword">release</span> :<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>动态SQL的两种执行方式：</font></p>
<ul>
<li>
<p><font color = brown>立即执行语句(构造的字符串SQL内部没有变量参数)：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">execute</span> immediate:host<span class="operator">-</span>variable; </span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = blue size = 4>运行时编译并执行</font></p>
</blockquote>
<br/>
</li>
<li>
<p><font color = brown>Prepare-Execute-Using语句（构造的字符串内部有变量参数）：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">prepare</span> sql_temp <span class="keyword">from</span> :host<span class="operator">-</span>variable;</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line"><span class="keyword">exec</span> <span class="keyword">sql</span> <span class="keyword">execute</span> sql_temp <span class="keyword">using</span> :cond<span class="operator">-</span>variable;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = blue size = 4>1) Prepare语句先编译，编译后的SQL语句允许动态参数</font></p>
<p><font color = blue size = 4>2) Execute语句执行，用using语句将动态参数传送给编译好的Sql语句</font></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<h3 id="12-数据字典data-dictionary"><a class="markdownIt-Anchor" href="#12-数据字典data-dictionary"></a> 12. 数据字典（Data dictionary）</h3>
<ul>
<li>
<p><font color = blue size = 4>定义：</font></p>
<ul>
<li><font color = green size = 4>是系统维护的一些表或视图的集合，存储了数据库中各类对象的定义，这些信息又称数据库的元数据–关于数据的数据</font></li>
</ul>
</li>
<li>
<p><font color = blue size = 4>内容：</font></p>
<ul>
<li><font color = green size = 4>与关系相关的信息；用户与账户信息；统计与描述性数据；物理文件组织信息；索引相关信息</font></li>
</ul>
</li>
</ul>
<br/>
<hr />
<h2 id="ch6-database-design"><a class="markdownIt-Anchor" href="#ch6-database-design"></a> Ch6. Database Design</h2>
<h3 id="1e-r概念简介"><a class="markdownIt-Anchor" href="#1e-r概念简介"></a> 1.E-R概念简介</h3>
<h4 id="font-color-blue-size-41-定义font"><a class="markdownIt-Anchor" href="#font-color-blue-size-41-定义font"></a> <font color = blue size = 4>1) 定义：</font></h4>
<p><font color = green size = 4>E-R(Entity-Relationship)模型即实体-联系模型, E-R模型可以成功描述数据库所存储的数据。</font></p>
<br/>
<h4 id="font-color-blue-size-42-e-r模型的基本要素-font"><a class="markdownIt-Anchor" href="#font-color-blue-size-42-e-r模型的基本要素-font"></a> <font color = blue size = 4>2) E-R模型的基本要素: </font></h4>
<ul>
<li><font color = green size = 4>实体(Entity):</font>
<ul>
<li>实体是E-R模型的基本对象，是现实世界中各种事物的抽象，凡是可以相互区别，并可以被识别的事、物概念等均可认为是实体。</li>
</ul>
</li>
<li><font color = green size = 4>属性(Attribute):</font>
<ul>
<li>每个实体都具有各种特征，称其为实体的属性，如学生有学号，姓名，年龄等属性。实体的属性值是数据库存储的主要数据</li>
<li>可设置主键(primary key)和其他候选键(candidate key)等</li>
</ul>
</li>
<li><font color = green size = 4>联系(Relationship):</font>
<ul>
<li>实体间会存在各种关系，如人与人之间可能存在领导与雇员关系等，实体间的关系被抽象为联系。</li>
</ul>
</li>
<li><font color = green size = 4>图例: </font></li>
</ul>
<p><img data-src="https://image.zxkidea.top/1550801364139.png" alt="zxk" /></p>
<br/>
<h4 id="font-color-blue-size-43-e-r图像关系模型的转换font"><a class="markdownIt-Anchor" href="#font-color-blue-size-43-e-r图像关系模型的转换font"></a> <font color = blue size = 4>3) E-R图像关系模型的转换：</font></h4>
<ul>
<li>
<p><font color = green size = 4>一个1：1联系可以转换成一个独立的关系模式，也可以与任意一端对应的关系模式合并。</font></p>
<p><img data-src="https://image.zxkidea.top/1550819223540.png" alt="zxk" /></p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>一个1：n联系可以转换为一个独立的关系模式，也可以与n端对应的关系模式合并。</font></p>
<p><img data-src="https://image.zxkidea.top/1550819281705.png" alt="zxk" /></p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>一个m：n联系转换为一个关系模式</font></p>
<p><img data-src="https://image.zxkidea.top/1550819339152.png" alt="zxk" /></p>
</li>
</ul>
<br/>
<ul>
<li><font color = green size = 4>三个或三个以上实体间的一个多元联系可以转换为一个关系模式。</font></li>
<li><font color = green size = 4>具有相同码的关系可以合并。</font></li>
</ul>
<br/>
<h4 id="font-color-blue-4关联基数font"><a class="markdownIt-Anchor" href="#font-color-blue-4关联基数font"></a> <font color = blue >4）关联基数</font></h4>
<p><img data-src="https://image.zxkidea.top/blog/20200305/hIbetOLmvo1p.png?imageslim" alt="zxk" /></p>
<br/>
<blockquote>
<p><font color = red size = 4>基数表示的含义：</font></p>
<p><font color = green>1. Purchase Order右边的(1, 1)表示一个Purchase Order有且必须有一个Party </font></p>
<p><font color = green>2. Party左边的(0, n)表示一个Party可以拥有多个Purchase Order，也可以没有</font></p>
<p><font color = green>3. Purchase Order左边的(1, n)表示Purchase Order必须有一个或多个Order Line</font></p>
<p><font color = green>4. Order Line右边的(1, 1)表示每个Order Lien必须属于一个Purchase Order</font></p>
<p><font color = green>5. Order Line下面的(1, 1)和菱形符号一起表示每个Order Line要么是一个Product要么是一个Service </font></p>
<p><font color = green>6. Product和Service上面的(0, n)表示Product和Service可以属于0个或多个Order Line</font></p>
</blockquote>
<blockquote>
<p><font color = red>注意：</font></p>
<p><font color = blue>(E, R) = (x, y)中x只能为0或1；y只能为1或n</font></p>
</blockquote>
<br/>
<h4 id="font-color-red-size-45-用例-将下面的e-r图转换为关系模式关系的码用下划线标出font"><a class="markdownIt-Anchor" href="#font-color-red-size-45-用例-将下面的e-r图转换为关系模式关系的码用下划线标出font"></a> <font color = red size = 4>5) 用例 (将下面的E-R图转换为关系模式，关系的码用下划线标出)：</font></h4>
<ul>
<li><font  color = green size = 4>用例1</font></li>
</ul>
<blockquote>
<ol>
<li>
<p>部门（部门号，部门名，经理的职工号，…）；此为部门实体对应的关系模式，该关系模式已包含了联系&quot;领导&quot;所对应的关系模式。经理的职工号是关系的候选码。</p>
</li>
<li>
<p>职工（职工号，部门号，职工名，职务，…）；此为职工实体对应的关系模式，该关系模式已包含了联系“属于”所对应的关系模式。</p>
</li>
<li>
<p>产品（产品号，产品名，产品组长的职工号，…）；此为产品实体对应的关系模式。</p>
</li>
<li>
<p>供应商(供应商号，姓名，…）；此为供应商实体对应的关系模式 。</p>
</li>
<li>
<p>零件（零件号，零件名，…）；此为零件实体对应的关系模式。</p>
</li>
<li>
<p>生产（职工号，产品号，工作天数，…）；此为联系“生产”所对应的关系模式。</p>
</li>
<li>
<p>供应（产品号，供应商号，零件号，供应量）；此为联系“联系”所对应的关系模式。</p>
</li>
</ol>
</blockquote>
  <br/>
<p><img data-src="https://image.zxkidea.top/blog/20200305/yObnKWDQl3Pw.jpg?imageslim" alt="zxk" /></p>
<br/>
<ul>
<li><font color = green size = 4>用例2</font></li>
</ul>
<blockquote>
<p><font color = blue size = 4>设有一个图书借阅管理数据库，已知：</font></p>
<ol>
<li>
<p>图书的属性有书号（具有唯一性）、书名</p>
</li>
<li>
<p>读者的属性有借书证号（具有唯一性，每个读者只能有一个借书证号）、姓名、身份证号、住址、电话</p>
</li>
<li>
<p>出版社的属性有出版社名称（具有唯一性）、地址、联系电话。</p>
</li>
</ol>
<p><font color = blue size = 4>其中：</font></p>
<ol>
<li>
<p>每本图书只能有一个出版社出版发行</p>
</li>
<li>
<p>每个读者可以同时借阅多本图书，也可以在不同时候借阅同一本图书</p>
</li>
<li>
<p>系统需要记录每本图书被借阅的借阅日期和归还日期</p>
</li>
</ol>
</blockquote>
  <br/>
<p><font color = red size = 4>请用E-R模型表示该数据库系统的概念模型，并将其转换成等价的关系模式。</font></p>
<table>
<thead>
<tr>
<th><img data-src="https://image.zxkidea.top/1550972584581.png" alt="zxk" /></th>
<th><img data-src="https://image.zxkidea.top/1550972612189.png" alt="zxk" /></th>
<th><img data-src="https://image.zxkidea.top/1550972829882.png" alt="zxk" /></th>
</tr>
</thead>
<tbody>
<tr>
<td><img data-src="https://image.zxkidea.top/1550972896178.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1550973002005.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1550973163185.png" alt="zxk" /></td>
</tr>
<tr>
<td><img data-src="https://image.zxkidea.top/1550973274552.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1550973308600.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1550973358353.png" alt="zxk" /></td>
</tr>
<tr>
<td><img data-src="https://image.zxkidea.top/1550973397877.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1550973473571.png" alt="zxk" /></td>
<td><img data-src="https://image.zxkidea.top/1550973533008.png" alt="zxk" /></td>
</tr>
</tbody>
</table>
<br/>
<h3 id="2函数依赖fd"><a class="markdownIt-Anchor" href="#2函数依赖fd"></a> 2.函数依赖(FD)</h3>
<h4 id="font-color-blue-size-41-定义-font"><a class="markdownIt-Anchor" href="#font-color-blue-size-41-定义-font"></a> <font color = blue size = 4>1） 定义: </font></h4>
<ul>
<li><font color = green size = 4>函数依赖是数据依赖的一种，它反映属性或属性组之间相依存，互相制约的关系，即反映现实世界的约束关系。</font></li>
<li><font color = green size = 4>设R（U）是属性U上的一个关系模式，X和Y均为U={A1，A2，…，An}的子集，r为R的任一关系，如果对于r中的任意两个元组u，v，只要有u[X]=v[X]，就有u[Y]=v[Y]，则称X函数决定Y，或称Y函数依赖于X，记为X→Y。</font></li>
</ul>
<br/>
<blockquote>
<p>示例：</p>
<p>(sno-学生ID，tno-教师ID，cno-课程ID，sname-学生姓名，tname-教师姓名，cname-课程名称，grade-成绩）</p>
<ol>
<li>
<p>sno→sname, cno→cname, (sno, cno)→grade <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">√</mi></mrow><annotation encoding="application/x-tex">\surd</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.2em;"></span><span class="mord">√</span></span></span></span></p>
</li>
<li>
<p>sname→sno, tno→cno, sno→tname × （不存在一一对应关系）</p>
</li>
</ol>
</blockquote>
<br/>
<p><img data-src="https://image.zxkidea.top/1551058200955.png" alt="zxk" /></p>
<p><img data-src="https://image.zxkidea.top/1551058364790.png" alt="zxk" /></p>
<br/>
<h4 id="font-color-blue-size-42完全函数依赖和部分函数依赖font"><a class="markdownIt-Anchor" href="#font-color-blue-size-42完全函数依赖和部分函数依赖font"></a> <font color = blue size = 4>2）完全函数依赖和部分函数依赖</font></h4>
<ul>
<li><font color = green size = 4>在完全函数依赖：R(U)中，如果X→Y，并且对于X的任何真子集X’ , 都有X’<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↛</mo></mrow><annotation encoding="application/x-tex">\nrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel amsrm">↛</span></span></span></span> Y，则称Y完全依赖于X，记作X→Y；</font></li>
<li><font color = green size = 4>在部分函数依赖：如果X→Y，且X中存在一个真子集X’ ，使得X’→Y成立，则称Y部分依赖于X。</font></li>
</ul>
<br/>
<blockquote>
<p>示例:</p>
<ul>
<li>
<p><font color = blue size = 4>学生ID，学生姓名，所修课程ID，课程名称，成绩</font></p>
<p>（学生ID，所修课程ID）→成绩</p>
<p>成绩既不能单独依赖于学生ID，也不能单独依赖于所修课程ID，因此成绩完全函数依赖于关键字。</p>
<p><font color = red size = 4>(学生ID不能唯一决定成绩，所选修课程ID也不能唯一决定成绩，需要(学生ID,所选修课程ID)一起才能唯一决定一个成绩)。</font></p>
</li>
<li>
<p><font color = blue size = 4>（学生ID，所修课程ID）→学生姓名</font></p>
<p>学生ID→学生姓名</p>
<p>学生姓名可以依赖于关键字的一个主属性——学生ID，因此学生姓名部分函数依赖于（学生ID，所修课程ID）。</p>
</li>
</ul>
</blockquote>
<br/>
<h4 id="font-color-blue-size-43平凡函数依赖和非平凡函数依赖font"><a class="markdownIt-Anchor" href="#font-color-blue-size-43平凡函数依赖和非平凡函数依赖font"></a> <font color = blue size = 4>3）平凡函数依赖和非平凡函数依赖</font></h4>
<ul>
<li><font color = green size = 4>非平凡 函数依赖: X <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> Y, 但是Y <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊈</mo></mrow><annotation encoding="application/x-tex">\nsubseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.09657em;vertical-align:-0.30274em;"></span><span class="mrel amsrm">⊈</span></span></span></span> X,则称X <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>  Y是非平凡的函数依赖。</font></li>
<li><font color = green size = 4>平凡函数依赖： X <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> Y, 但是Y <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> X,则称X <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>  Y是平凡的函数依赖。</font></li>
</ul>
<br/>
<h4 id="font-color-blue-size-44传递函数依赖font"><a class="markdownIt-Anchor" href="#font-color-blue-size-44传递函数依赖font"></a> <font color = blue size = 4>4）传递函数依赖</font></h4>
<ul>
<li><font color = green size = 4>设X,Y,Z是关系R中互不相同的属性集合，存在X→Y(Y<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↛</mo></mrow><annotation encoding="application/x-tex">\nrightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel amsrm">↛</span></span></span></span>X), Y→Z，则称Z传递函数依赖于X。</font></li>
</ul>
<br/>
<h3 id="3多值依赖"><a class="markdownIt-Anchor" href="#3多值依赖"></a> 3.多值依赖</h3>
<h4 id="font-color-blue-size-41-定义font-2"><a class="markdownIt-Anchor" href="#font-color-blue-size-41-定义font-2"></a> <font color = blue size = 4>1) 定义</font></h4>
<ul>
<li><font color = green size = 4>设R(U)是属性集U上的一个关系模式。X，Y，Z是U的子集,并且Z=U-X-Y。关系模式R(U)中多值依赖X→→Y成立，当且仅当对R(U)的任一关系R,给定的一对(X，Z)值有<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">一组Y（依赖的属性集合）</span>的值，这组值仅仅决定于X值而与Z值无关；<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">即U=X+Y+Z，有（X,Z）→ Y，但Y仅由X唯一确定，此时记X→→Y，称多值依赖。</span></font></li>
</ul>
<br/>
<ul>
<li><font color = green size = 4>若X→→Y，而Z＝φ，则称X→→Y为平凡的多值依赖。否则称X→→Y为非平凡的多值依赖；多值依赖属4NF的定义范围，比函数依赖要复杂得多，很多书上都没有讲清楚。</font></li>
</ul>
<br/>
<ul>
<li><font color = red size = 4>说得简单点就是：</font><font color = green size = 4>在关系模式中，函数依赖不能表示属性值之间的一对多联系，这些属性之间有些虽然没有直接关系，但存在间接的关系，把没有直接联系、但有间接的联系称为多值依赖的数据依赖。例如，教师和学生之间没有直接联系，但教师和学生可通过系名，或任课把教师和学生联系起来。</font></li>
</ul>
<br/>
<blockquote>
<p>可以看出，如果把上面的一组改为一个，那么多值依赖就变成了函数依赖。当然一个值组成的组也是组，所以说，<font color = green>函数依赖是多值依赖的特殊情况。</font></p>
</blockquote>
<br/>
<h4 id="font-color-blue-size-42-示例font"><a class="markdownIt-Anchor" href="#font-color-blue-size-42-示例font"></a> <font color = blue size = 4>2) 示例：</font></h4>
<table>
<thead>
<tr>
<th style="text-align:left">课程C</th>
<th>教师T</th>
<th>参考书B</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">数学</td>
<td>邓军</td>
<td>数学分析</td>
</tr>
<tr>
<td style="text-align:left">数学</td>
<td>邓军</td>
<td>高等代数</td>
</tr>
<tr>
<td style="text-align:left">数学</td>
<td>邓军</td>
<td>微分方程</td>
</tr>
</tbody>
</table>
<br/>
<blockquote>
<p><font color = green >分析：</font></p>
<ol>
<li>
<p>表中，U = C+T+B，（C,T）确定一组B（依赖的属性集合），但是这组B其实<font color = red>与T无关，仅由C确定</font>，所以(C,T)-&gt;-&gt;B。又因为T不是空集，所以(C,T)-&gt;-&gt;B为<font color = red>非平凡多值依赖</font>。</p>
</li>
<li>
<p>要想消除多值依赖，可以分解为：(C,T), (C,B)即表1，表2</p>
</li>
</ol>
</blockquote>
<p><font color = green>表1：</font></p>
<table>
<thead>
<tr>
<th>课程C</th>
<th>教师T</th>
</tr>
</thead>
<tbody>
<tr>
<td>数学</td>
<td>邓军</td>
</tr>
</tbody>
</table>
<p><font color = green>表2：</font></p>
<table>
<thead>
<tr>
<th>课程C</th>
<th>参考书B</th>
</tr>
</thead>
<tbody>
<tr>
<td>数学</td>
<td>数学分析</td>
</tr>
<tr>
<td>数学</td>
<td>高等代数</td>
</tr>
<tr>
<td>数学</td>
<td>微分方程</td>
</tr>
</tbody>
</table>
<br/>
<blockquote>
<p><font color = green>结论：</font></p>
<ol>
<li>
<p>对于R中的每个非平凡多值依赖X-&gt;-&gt;Y（Y不属于X)，X都含有候选码，则R属于4NF。</p>
</li>
<li>
<p>对于每一个非平凡多值依赖X-&gt;-&gt;Y，X若含有候选码，也就是X-&gt;Y，所以4NF所允许的非平凡多值依赖是函数依赖。</p>
</li>
</ol>
</blockquote>
<br/>
<p><font color = red size = 4>实例解释:</font></p>
<blockquote>
<p>有这样一个关系 &lt;仓库管理员，仓库号，库存产品号&gt; ，假设一个产品只能放到一个仓库中，但是一个仓库可以有若干管理员，那么对应于一个 &lt;仓库管理员，库存产品号&gt;有一个仓库号，而实际上，<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">这个仓库号只与库存产品号有关，与管理员无关，就说这是多值依赖。</span></p>
</blockquote>
<blockquote>
<p>（C，B）上的一个值（物理，光学原理）对应一组T值（李平，王强，刘明），这组值仅仅决定于课程C上的值，也就是说对于（C，B）上的另一个值（物理，普通物理学），它对应的一组T值仍是（李平，王强，刘明），尽管这时参考书B的值已经改变了。因此T多值依赖于C，即C→→T。</p>
</blockquote>
<br/>
<h4 id="font-color-blue-size-43性质font"><a class="markdownIt-Anchor" href="#font-color-blue-size-43性质font"></a> <font color = blue size = 4>3）性质：</font></h4>
<ul>
<li><font color = green size = 4>多值依赖具有对称性；即若X→→Y，则X→→Z，其中Z＝U－X－Y。</font></li>
<li><font color = green size = 4>多值依赖具有传递性；即若X→→Y，Y→→Z，则X→→Z－Y。</font></li>
<li><font color = green size = 4>若X→→Y，X→→Z，则X→→YZ。</font></li>
<li><font color = green size = 4>若X→→Y，X→→Z，则X→→Y∩Z。</font></li>
<li><font color = green size = 4>若X→→Y，X→→Z，则X→→Y－Z，X→→Z－Y。</font></li>
</ul>
<br/>
<h3 id="4函数依赖的推理规则"><a class="markdownIt-Anchor" href="#4函数依赖的推理规则"></a> 4.函数依赖的推理规则</h3>
<h4 id="font-color-blue-size-41-逻辑蕴涵font"><a class="markdownIt-Anchor" href="#font-color-blue-size-41-逻辑蕴涵font"></a> <font color = blue size = 4>1) 逻辑蕴涵</font></h4>
<p><font color = green size = 4>给定一个关系模式，只考虑给定的函数依赖是不够的，必须找出在该关系模式上成立的其他函数依赖。</font></p>
<p><font color = red size = 4>逻辑蕴含：设F是关系模式R（U）的函数依赖集合，由F出发，可以证明其他某些函数依赖也成立，我们称这些函数依赖被F逻辑蕴含。&quot;F蕴含X→Y&quot;意味着关系实例只要满足F就满足X→Y。</font></p>
<blockquote>
<p>例如，设F={ A→B，B→C }，则函数依赖A→C被F逻辑蕴含，记作：F |= A→C。即函数依赖集 F 逻辑蕴含函数依赖A→C。</p>
</blockquote>
<br/>
<h4 id="font-color-blue-size-42-f的闭包f-font"><a class="markdownIt-Anchor" href="#font-color-blue-size-42-f的闭包f-font"></a> <font color = blue size = 4>2) F的闭包F<sup>+</sup> </font></h4>
<p><font color = green size = 4>对于一个关系模式，如何由已知的函数依赖集合F，找出F逻辑蕴涵的所有函数依赖集合呢？这就是我们下面要讨论的问题。</font></p>
<p><font color = red size = 4>F的闭包F<sup>+</sup>：设F为一个函数依赖集，F的闭包是指F逻辑蕴涵的所有函数依赖集合。 F的闭包记作F<sup>+</sup>。</font></p>
<br/>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>示例：</font></span></p>
<blockquote>
<p>给定关系模式R(A, B, C, G, H, I)，函数依赖集合F={A→B，A→C，CG→H，CG→I，B→H}。</p>
<p>可以证明函数依赖A→H被F逻辑蕴涵。</p>
</blockquote>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>证明：</font></span></p>
<blockquote>
<p>设有元组s和t，满足s[A]=t[A]，根据函数依赖的定义，由已知的A→B，可以推出s[B]=t[B]。又根据函数依赖B→H，可以有 s[H]=t[H]。因此，已经证明对任意的两个元组s和t，只要有s[A]=t[A]，就有s[H]=t[H]。所以，函数依赖A→H被F逻辑蕴涵。</p>
</blockquote>
<br/>
<blockquote>
<p><font color = red size = 4><em>注意：</em></font><font color = green size = 4>当F很大时，计算的过程会很长。为了从已知的函数依赖推导出其它函数依赖，Armstrong 提出了一套推理规则，称为Armstrong 公理 ，通过反复使用这些规则，可以找出给定F的闭包F<sup>+</sup>。</font></p>
</blockquote>
<br/>
<h4 id="font-color-blue-size-43-armstrong-公理font"><a class="markdownIt-Anchor" href="#font-color-blue-size-43-armstrong-公理font"></a> <font color = blue size = 4>3) Armstrong 公理</font></h4>
<p><font color = green size = 4>a. 定义：</font>从已知的一些，可以推导出另外一些函数依赖的推理规则称作“Armstrong 公理”。</p>
<br/>
<p><font color = green size = 4>b. 基本公理：</font></p>
<ul>
<li>
<p><font color = red size = 4>自反律：</font>如果 Y <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> X<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> U，则 X → Y 成立。（平凡函数依赖）</p>
<blockquote>
<p>证明：</p>
<p>设t1, t2是关系R中的任意两个元组(t1<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span>R, t2<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span>R), 且它们在属性集X上的值相等(t1[X] = t2[X])；</p>
<p>由于Y是X的子集，即X <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊇</mo></mrow><annotation encoding="application/x-tex">\supseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊇</span></span></span></span> Y；</p>
<p>因此必有t1[Y] = t2[Y]。</p>
</blockquote>
<br/>
</li>
<li>
<p><font color = red size = 4>增广律：</font>如果 X → Y 在 R(U)  成立，且 Z<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> U，则 XZ <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>→ YZ成立</p>
<blockquote>
<p>证明：</p>
<p>设 t1<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span>R, t2<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span>R, 如果 t1[XZ] = t2[XZ], 则：<br />
t1[X] = t2[X] …………………………(1)<br />
t1[Z] = t2[Z] …………………………(2)；</p>
<p>由(1)及X→Y得： t1[Y] = t2[Y] …………(3)；</p>
<p>由(2)及(3)得：t1[YZ] = t2[YZ]。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = red size = 4>传递律：</font>如果 X → Y，Y → Z 成立，则 X → Z 成立。</p>
<blockquote>
<p>证明：</p>
<p>设 t1<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span>R, t2<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∈</mo></mrow><annotation encoding="application/x-tex">\in</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">∈</span></span></span></span>R, 如果 t1[X] = t2[X] ………………(1)；</p>
<p>由(1)及X→Y得：t1[Y] = t2[Y] ……………… (2)；</p>
<p>由(2)及Y→Z得：t1[Z] = t2[Z]。</p>
</blockquote>
<br/>
</li>
</ul>
<p><font color = green size = 4>c. 推理规则：</font></p>
<blockquote>
<p><font color = red size = 4>(合并)：</font>{X → Y，X → Z}，则 X → YZ</p>
<p><font  color = red size = 4>(分解)：</font>{X → Y，Z ∈ Y}，则 X → Z（或：X → YZ，那么 X → Y，X → Z）</p>
<p><font color = red size = 4>(伪传递)：</font>{X → Y , YW → Z}，则 WX → Z</p>
<p><font color = red size = 4>(复合)：</font>{X → Y，W → Z},则 XW → YZ</p>
<p><font color = red size = 4>(自积律)：</font>{X → YZ，Z → W}，则 X → YZW</p>
</blockquote>
<br/>
<h4 id="font-color-blue-size-44-armstrong公理系统的有效性和完备性font"><a class="markdownIt-Anchor" href="#font-color-blue-size-44-armstrong公理系统的有效性和完备性font"></a> <font color = blue size = 4>4) Armstrong公理系统的有效性和完备性</font></h4>
<ul>
<li>
<p><font color = green size = 4>Armstrong公理系统的有效性指的是：</font></p>
<p>由F出发根据Armstrong公理系统推导出来的每一个函数依赖一定在F<sup>+</sup>中。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>Armstrong公理系统的完备性指的是：</font></p>
<p>对于F<sup>+</sup>所逻辑蕴含的每一函数依赖，必定可以由F出发根据Armstrong公理系统推导出来。</p>
</li>
</ul>
<br/>
<h4 id="font-color-blue-size-45-属性集的闭包font"><a class="markdownIt-Anchor" href="#font-color-blue-size-45-属性集的闭包font"></a> <font color = blue size = 4>5) 属性集的闭包</font></h4>
<blockquote>
<p>原则上讲，对于一个关系模式R(U, F)，根据已知的函数依赖F，反复使用前面的规则，可以计算函数依赖集合F的闭包F+。但是，利用推理规则求出其全部的函数依赖F+是非常困难的，而且也没有必要。因此，可以计算闭包的子集，即选择一个属性子集，判断该属性子集能函数决定哪些属性，这就是利用属性集闭包的概念。</p>
</blockquote>
<ul>
<li>
<p><font color = green size = 4>定义：</font></p>
<p>设F为属性集U上的函数依赖集，X∈U，即X为U的一个子集。在函数依赖集F下被X函数决定的所有属性为F<sup>+</sup>下属性集X的闭包，记作X<sup>+</sup>。即X<sup>+</sup>＝{ A| X→A } 。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>计算属性集闭包X<sup>+</sup>的算法如下：</font></p>
<p>输入：X，F<br />
输出： X<sup>+</sup></p>
<br/>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>迭代算法的步骤：</font></span></p>
<blockquote>
<ol>
<li>
<p>选取X<sup>+</sup>的初始值为X ，即X<sup>+</sup>＝{X}；</p>
</li>
<li>
<p>计算X<sup>+</sup>， X<sup>+</sup>＝{X, Z} ，其中Z要满足如下条件：</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">Y是X<sup>+</sup>的真子集，且F中存在一函数依赖Y→Z。</span>实际上就是以X<sup>+</sup>中的属性子集作为函数依赖的决定因素，在F中搜索函数依赖集，找到函数依赖的被决定属性Z放到X<sup>+</sup>中。</p>
</li>
<li>
<p>判断：如果X<sup>+</sup>没有变化？或X<sup>+</sup>等于U？则X<sup>+</sup>就是所求的结果，算法终止。否则转②。</p>
</li>
<li>
<p>因为U是有穷的，所以上述迭代过程经过有限步骤之后就会终止。</p>
</li>
</ol>
</blockquote>
<br/>
</li>
<li>
<p><font color = red size = 4>示例：</font></p>
<p><img data-src="https://image.zxkidea.top/1551150366580.png" alt="zxk" /></p>
</li>
</ul>
<br/>
<h4 id="font-color-blue-size-46-极小函数依赖集最小函数依赖集font"><a class="markdownIt-Anchor" href="#font-color-blue-size-46-极小函数依赖集最小函数依赖集font"></a> <font color = blue size = 4>6) 极小函数依赖集（最小函数依赖集）</font></h4>
<ul>
<li>
<p><font color = green size = 4>定义：</font></p>
<p>如果函数依赖集F满足下列条件，则称F为最小函数依赖集或最小覆盖。</p>
<blockquote>
<ol>
<li>
<p>F中的任何一个函数依赖的右部仅含有一个属性；</p>
</li>
<li>
<p>F中不存在这样一个函数依赖X→A，使得F与F-{X→A}等价；</p>
</li>
<li>
<p>F中不存在这样一个函数依赖X→A，X有真子集Z使得F-{X→A}∪{Z→A}与F等价。</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = red size = 4>计算最小函数依赖集的算法:</font></p>
<blockquote>
<ol>
<li>将F中的所有依赖右边化为单一元素</li>
<li>去掉F各函数依赖左边的冗余属性<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">（只检查左部不是单个属性的函数依赖）</span></li>
<li>去掉F中所有冗余依赖关系<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">（逐个求，在去掉某个函数依赖的F中求该函数依赖左边的闭包，如果闭包能包含右边属性，则表示这个函数依赖要去掉）</span></li>
</ol>
</blockquote>
<br/>
</li>
<li>
<p><font color = red size = 4>举例：</font></p>
<blockquote>
<p>已知关系模式R&lt;U, F&gt;，U={A, B, C, D, E, G}，F={AB→C, D→EG, C→A, BE→C, BC→D, CG→BD, ACD→B, CE→AG}，求F的最小函数依赖集。</p>
</blockquote>
<br/>
<p><font color = brown size = 4>求解步骤：</font></p>
<p><font color = green size = 4>1. 将F中的所有依赖右边化为单一元素</font></p>
<p><font color = red size = 4>F = {AB→C, D→E, D→G, C→A, BE→C, BC→D, CG→B, CG→D, ACD→B, CE→A, CE→G}</font></p>
<br/>
<p><font color = green size = 4>2. 去掉F各函数依赖左边的冗余属性(只检查左部不是单个属性的函数依赖)</font></p>
<p><font color = blue size = 4>AB→C:</font></p>
<blockquote>
<ol>
<li>去掉A, B<sup>+</sup> = B, 不包含C,A不为冗余属性，所以A不能去掉</li>
<li>去掉B, A<sup>+</sup> = A, 不包含C,B不为冗余属性，所以B不能去掉</li>
</ol>
</blockquote>
  <br/>
<p><font color = blue size = 4>BE→C:</font></p>
<blockquote>
<ol>
<li>去掉B, E<sup>+</sup> = E, 不包含C,B不为冗余属性，所以B不能去掉</li>
<li>去掉E, B<sup>+</sup> = B, 不包含C,E不为冗余属性，所以E不能去掉</li>
</ol>
</blockquote>
<br/>
<p><font color = blue size = 4>BC→D:</font></p>
<blockquote>
<ol>
<li>
<p>去掉B, C<sup>+</sup> = {A,C}, 不包含D, B不为冗余属性，所以B不能去掉</p>
</li>
<li>
<p>去掉C, B<sup>+</sup> = B, 不包含D, C不为冗余属性，所以C不能去掉</p>
</li>
</ol>
</blockquote>
  <br/>
<p><font color = blue size = 4>CG→B:</font></p>
<blockquote>
<ol>
<li>
<p>去掉C, G<sup>+</sup> = G, 不包含B, C不为冗余属性，所以C不能去掉</p>
</li>
<li>
<p>去掉G, C<sup>+</sup> = {A,C}, 不包含B, G不为冗余属性，所以G不能去掉</p>
</li>
</ol>
</blockquote>
<br/>
<p><font color = blue size = 4>ACD→B:</font></p>
<blockquote>
<ol>
<li>
<p>去掉A, (CD)<sup>+</sup> = {A, B, C, D, E, G}, 包含B, A为冗余属性，所以把A去掉,则为<font color = red size = 4>CD→B</font></p>
</li>
<li>
<p>去掉C, D<sup>+</sup> = {D, E, G}, 不包含B, C不为冗余属性，所以C不能去掉</p>
</li>
<li>
<p>去掉D, C<sup>+</sup> = {A, C}, 不包含B, D不为冗余属性，所以D不能去掉</p>
</li>
</ol>
</blockquote>
  <br/>
<p><font color = blue size = 4>CE→A:</font></p>
<blockquote>
<ol>
<li>
<p>去掉C, E<sup>+</sup> = E, 不包含A, C不为冗余属性，所以C不能去掉</p>
</li>
<li>
<p>去掉E, C<sup>+</sup> = {A, C}, 包含A, E不为冗余属性，所以把E去掉,则为<font color = red size = 4>C→A</font></p>
</li>
<li>
<p>与存在依赖重复，故舍去</p>
</li>
</ol>
</blockquote>
<br/>
<p><font color = blue size = 4>CE→G:</font></p>
<blockquote>
<ol>
<li>
<p>去掉C, E<sup>+</sup> = E, 不包含G, C不为冗余属性，所以C不能去掉</p>
</li>
<li>
<p>去掉E, C<sup>+</sup> = {A, C}, 不包含G, E不为冗余属性，所以E不能去掉</p>
</li>
</ol>
</blockquote>
<p><font color = red size = 4>所以：F = {AB→C, D→E, D→G, C→A, BE→C, BC→D, CG→B, CG→D, CD→B, CE→G}</font></p>
<br/>
<p><font color = green size = 4>3. 去掉F中所有冗余依赖关系(逐个求，在去掉某个函数依赖的F中求闭包，如果包含右边属性，则表示这个函数依赖要去掉)</font></p>
<p><font color = blue size = 4>AB→C:</font></p>
<blockquote>
<p>(AB)<sup>+</sup> = {A, B}, 不包含C, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = blue size = 4>D→E:</font></p>
<blockquote>
<p>D<sup>+</sup> = {D, G}, 不包含E, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = blue size = 4>D→G:</font></p>
<blockquote>
<p>D<sup>+</sup> = {D, E}, 不包含G, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = blue size = 4>C→A:</font></p>
<blockquote>
<p>C<sup>+</sup> = C, 不包含A, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = blue size = 4>BE→C:</font></p>
<blockquote>
<p>(BE)<sup>+</sup> = {B, E}, 不包含C, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = blue size = 4>BC→D:</font></p>
<blockquote>
<p>(BC)<sup>+</sup> = {A, B, C}, 不包含D, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = blue size = 4>CG→B:</font></p>
<blockquote>
<p>(CG)<sup>+</sup> = {A, B, C, D, E, G}, 包含B, 则<b>去掉</b></p>
</blockquote>
<br/>
<blockquote>
<p><font color = red size = 4>注意：</font><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>此时CG→B已被去掉，函数依赖集F需要更新后再求新的函数依赖的闭包</font></span></p>
</blockquote>
<p><font color = blue size = 4>CG→D:</font></p>
<blockquote>
<p>(CG)<sup>+</sup> = {A, C, G}, 不包含D, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = blue size = 4>CD→B:</font></p>
<blockquote>
<p>(CD)<sup>+</sup> = {A, C, D, E, G}, 不包含B, 则不用去掉</p>
</blockquote>
  <br/>
<p><font color = blue size = 4>CE→G:</font></p>
<blockquote>
<p>(CE)<sup>+</sup> = {A, C, E}, 不包含G, 则不用去掉</p>
</blockquote>
<br/>
<p><font color = red size = 4>故最小依赖集为：F<sub>m</sub>= {AB→C, D→E, D→G, C→A, BE→C, BC→D, CG→D, CD→B, CE→G}</font></p>
</li>
</ul>
<br/>
<h4 id="font-color-blue-size-47-超码候选码与主码font"><a class="markdownIt-Anchor" href="#font-color-blue-size-47-超码候选码与主码font"></a> <font color = blue size = 4>7) 超码，候选码与主码</font></h4>
<ul>
<li>
<p><font color = green size = 4>关系：</font></p>
<blockquote>
<p>超码包括候选码，候选码包括主码</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>超码：</font></p>
<blockquote>
<ol>
<li>
<p>是一个或多个属性的集合，这些属性可以让我们在一个实体集中地标识一个实体</p>
</li>
<li>
<p>如果K是超码，那么所有包含K的集合也是超码</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>候选码：</font></p>
<blockquote>
<ol>
<li>
<p>从超码中选出的，自然地，候选码也是一个或多个属性的集合；</p>
</li>
<li>
<p>可能大多数超码中含有多余的属性。所以我们需要候选码，<font color = red>不含有多余属性的超码称为候选码，候选码是可以标识一个元组的最少的属性集合。</font></p>
</li>
<li>
<p>关系中的一个超码，其值能标识一个元组，若从<font color = red>该超码中去掉任何一个属性，它就不具有这一性质了。</font>（即该超码不应该存在一个真子集也能标识一个元组）。这样的属性组称作候选码。</p>
</li>
<li>
<p><font color = red>候选码是最小超码</font>，它们的<font color = red>任意真子集都不能成为超码</font>。例如，如果K是超码，那么所有包含K的集合都不能是候选码；如果K，J都不是超码，那么K和J组成的集合（K，J）有可能是候选码。</p>
</li>
</ol>
</blockquote>
<br/>
</li>
<li>
<p><font color = green size = 4>主码：</font></p>
<blockquote>
<p>一个表的候选码可能有多个，从这些个候选码中选择一个做为主码，至于选择哪一个候选码，这个是无所谓的，只要是从候选码中选的就行。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>主属性：</font></p>
<blockquote>
<p>一个表可以有多个候选码，那么对于某个属性来说，如果这个属性存在于所有的候选码中，它就称之为主属性。<font color = red>简单来说，主属性是候选码属性的并集。</font></p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>非主属性：</font></p>
<blockquote>
<p>不包含在候选码中的属性称为非主属性。 非主属性是相对于主属性来定义的。</p>
</blockquote>
</li>
</ul>
<br/>
<blockquote>
<p><font color = dark size = 5>&lt;各类码及属性整理&gt;</font></p>
<p><a href="https://blog.csdn.net/sumaliqinghua/article/details/85872446">https://blog.csdn.net/sumaliqinghua/article/details/85872446</a></p>
</blockquote>
<br/>
<h4 id="font-color-blue-size-48-求解候选码font"><a class="markdownIt-Anchor" href="#font-color-blue-size-48-求解候选码font"></a> <font color = blue size = 4>8) 求解候选码</font></h4>
<ul>
<li>
<p><font color = green size = 4>对于给定的关系R（A1，A2，…An）和函数依赖集F，可将其属性分为4类：</font></p>
<blockquote>
<p>L类：仅出现在函数依赖左部的属性。</p>
<p>R 类：仅出现在函数依赖右部的属性。</p>
<p>N类：在函数依赖左右两边均未出现的属性。</p>
<p>LR类：在函数依赖左右两边均出现的属性。</p>
</blockquote>
  <br/>
<blockquote>
<p><font color = red>定理1：</font>对于给定的关系模式R及其函数依赖集F，若X（X∈R）是L类属性，则X必为R的<font color = blue>任一候选码的成员。</font></p>
<p><font color = red>推论1：</font>对于给定的关系模式R及其函数依赖集F，若X（X∈R）是L类属性，且X<sup>+</sup>包含了R的全部属性；则X必为R的<span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = blue>唯一候选码。</font></span></p>
</blockquote>
<br/>
<blockquote>
<p><font color = red>定理2：</font>对于给定的关系模式R及其函数依赖集F，若X（X∈R）是R类属性，则X<font color = blue>不在任何候选码中。</font></p>
<p><font color = red>定理3：</font>对于给定的关系模式R及其函数依赖集F，若X（X∈R）是N类属性，则X<font color = blue>必包含在R的任一候选码中。</font></p>
<p><font color = red>推论2：</font>对于给定的关系模式R及其函数依赖集F，若X（X∈R）是L类和N类组成的属性集，且X<sup>+</sup>包含了<font color = blue>R的全部属性</font>；则X是R的<span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = blue>唯一候选码。</font></span></p>
</blockquote>
</li>
</ul>
<br/>
<p><font color = red size = 4>具体步骤：</font></p>
<p><strong>算法描述：</strong></p>
<blockquote>
<ol>
<li>
<p>将R 的所有属性分为L、R、LR 和N 四类，并令X 代表L、N 类，Y 代表LR 类。</p>
</li>
<li>
<p>求X<sup>+</sup>。若X<sup>+</sup>包含了R 的全部属性，则即为R 的<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">唯一候选码</span>，转（5）；否则，转（3）。</p>
</li>
<li>
<p>在Y 中取一属性A，求(XA)<sup>+</sup> ，若它包含了R 的全部属性，则是<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">候选码</span>，转（4）；否则，调换一属性反复进行这一过程，直到试完所有Y 中的属性。</p>
</li>
<li>
<p>如果已找出所有候选码，则转（5）；否则在Y 中依次取2 个、3 个、…，求它们的属性闭包，若其闭包包含R 的全部属性，则是<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">候选码</span>。</p>
</li>
<li>
<p>结束。</p>
</li>
</ol>
</blockquote>
<br/>
<p><font color = green size = 4>示例1：</font></p>
<blockquote>
<p>如设有关系模式R(U), 其函数依赖集为F, 其中U={A, B, C, D, E}, F={A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>C, C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>A, B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>AC, D<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>AC}<br />
求R 的候选码。</p>
</blockquote>
<br/>
<p><font color = brown size = 4>求解方法：</font></p>
<p><font color = green size = 4>根据函数依赖可得：</font></p>
<blockquote>
<p>属性<font color = red>B 、D</font> 为L 类，<font color = red>E</font> 为N 类，因此属性<font color = red>B 、D 、E</font> 必为候选码的成员， 且此三个属性的闭包： <font color = blue>B<sup>+</sup>=ABC, (BD)<sup>+</sup>=ABCD, (BDE)<sup>+</sup>=ABCDE</font>, 根据推论2 可得BDE 是R 的唯一候选码。所以R 的候选码为BDE 。</p>
</blockquote>
<blockquote>
<p><font color = red>变式：</font>如果把例题中关系模式<font color = blue>R(U) 中的属性E</font> 去掉，那么再求R 的候选码的话可以根据推论1得出<br />
BD 为R 的唯—候选码。</p>
</blockquote>
<br/>
<p><font color = green size = 4>示例2：</font></p>
<blockquote>
<p>如设有关系模式R(U), 其函数依赖集为F, 其中U={A, B, C, D, E}, F={B<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>A, D<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>A, A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>E, AC<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>B}<br />
求R 的候选码。</p>
</blockquote>
<p><font color = brown size = 4>求解方法：</font></p>
<p><font color = green size = 4>根据函数依赖可得：</font></p>
<blockquote>
<p>属性<font color = red>C、D</font> 为L 类，因此属性<font color = red>C、D </font> 必为候选码的成员， 且此两个属性的闭包： <font color = blue>C<sup>+</sup>=C, (CD) <sup>+</sup>=ABCDE</font>, 根据推论1可得CD 是R 的唯一候选码。所以R 的候选码为CD 。</p>
</blockquote>
<br/>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<ul>
<li>
<p>快速求解方法适用于判断有属性是属于L 类、N 类或其中一种的情况下求解。如果有L 类和N类的属性， 则求解候选码速度非常快。</p>
</li>
<li>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">简而言之：</span> L、R、N、LR 类。根据定理， L、N 类必为侯选码之一，如果L<sup>+</sup>包含全部R, 则L为唯一侯选。R 类不在任何侯选码中。L+N 类且(L+N)<sup>+</sup>包含所有R, 则L+N 为唯一侯选。(适于有L、N 类至少一种的情况。)</p>
</li>
</ul>
</blockquote>
<br/>
<h3 id="5关系模式的分解"><a class="markdownIt-Anchor" href="#5关系模式的分解"></a> 5.关系模式的分解</h3>
<h4 id="font-color-blue1-无损联接font"><a class="markdownIt-Anchor" href="#font-color-blue1-无损联接font"></a> <font color = blue>1) 无损联接</font></h4>
<ul>
<li>
<p><font color = green size = 4>定义：</font></p>
<p>无损联接分解是将一个关系模式分解成若干个关系模式后，通过自然联接和投影等运算仍能还原到原来的关系模式，则称这种分解为无损联接分解。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>示例：</font></p>
<blockquote>
<p>关系模式：成绩（学号，姓名，课程号，课程名，分数）</p>
<p>函数依赖：学号-&gt;姓名，课程号-&gt;课程名， （学号，课程号）-&gt;分数</p>
</blockquote>
<blockquote>
<p>若将其分解为下面三个关系模式：</p>
<p>成绩（学号，课程号，分数）</p>
<p>学生（学号，姓名）</p>
<p>课程（课程号，课程名）</p>
</blockquote>
<br/>
<p><font color = red size = 4>1. 这样的分解是无损分解吗？</font></p>
<blockquote>
<p><font color = green size = 4><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span></span></span></span> 学号-&gt;姓名</font></p>
<p><font color = green size = 4> <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">\therefore</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span></span></span></span>  成绩（<font color = red  size = 4>学号</font>，课程号，分数，<font color = blue size = 4>姓名</font>）</font></p>
<p><font color = green size = 4><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo></mrow><annotation encoding="application/x-tex">\because</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span></span></span></span> 课程号-&gt;课程名</font></p>
<p><font color = green size = 4><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∴</mo></mrow><annotation encoding="application/x-tex">\therefore</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span></span></span></span> 成绩（学号，<font color = red size = 4>课程号</font>，分数，姓名，<font color = blue size = 4>课程名</font>）</font></p>
</blockquote>
<p><font color = red size = 4>因此这个例子是无损分解的</font></p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>无损分解判定算法：</font></p>
<ol>
<li>
<p>建立一张k行n列的表来检验连接是否失真(第i行对应于Ri，第j列对应于属性Aj)；</p>
<p><img data-src="https://image.zxkidea.top/1551253082653.png" alt="zxk" /></p>
</li>
<li>
<p>填表：若A属于Ri，则将第i行第j列填为aj否则填入bij；</p>
</li>
<li>
<p>修改表：逐一考察F中的函数依赖X -&gt; Y，X可能包含一个或者多个属性，如果这（个）些属性对应于表中的列的值相同，则值相等的行所对应的Y属性所有的列的值也相等。（比方说X -&gt; Y，X是A1A2所对应的属性，Y是属性A4。由第一步，如果表中第一行和第二行的值相等，那么表中A4对应的第一行和第二行的值也要修改成一样的。）如果其中有aj，则将bij改成aj；如果没有aj，就将他们都改成bij，一般来说i是值相等的行中最小的行号。</p>
</li>
<li>
<p>反复（指在前一次修改地基础上，反复进行直到表中的数据不再改变）进行（3），若发现某一行变成a1，a2，…aj，则可以得出分解p{(R1,F1)，(R2,F2)，…(Rk,Fk)}具有连接不失真性（即无损分解）</p>
</li>
</ol>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>具体示例：</font></p>
<p><font color = blue size = 4>设R=ABCDE, R1=AD, R2=BC, R3=BE, R4=CDE, R5=AE（<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">省略F<sub>i</sub>，若给出U<sub>i</sub>，则表示求R<sub>i</sub>（U<sub>i</sub>，F<sub>i</sub>）</span>）, 设函数依赖：A-&gt;C, B-&gt;C, C-&gt;D, DE-&gt;C, CE-&gt;A. 判断R分解成 ρ={R1,  R2,  R3,  R4,  R5}是否无损联接分解？</font></p>
<br/>
<p><font color = dark size = 4>1. 建表:</font></p>
<table>
<thead>
<tr>
<th></th>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
</tr>
</thead>
<tbody>
<tr>
<td>AD</td>
<td><font color = red >a1</font></td>
<td>b12</td>
<td>b13</td>
<td><font color = red >a4</font></td>
<td>b15</td>
</tr>
<tr>
<td>BC</td>
<td>b21</td>
<td><font color = red >a2</font></td>
<td><font color = red >a3</font></td>
<td>b24</td>
<td>b25</td>
</tr>
<tr>
<td>BE</td>
<td>b31</td>
<td><font color = red >a2</font></td>
<td>b33</td>
<td>b34</td>
<td><font color = red >a5</font></td>
</tr>
<tr>
<td>CDE</td>
<td>b41</td>
<td>b42</td>
<td><font color = red >a3</font></td>
<td><font color = red >a4</font></td>
<td><font color = red >a5</font></td>
</tr>
<tr>
<td>AE</td>
<td><font color = red >a1</font></td>
<td>b52</td>
<td>b53</td>
<td>b54</td>
<td><font color = red >a5</font></td>
</tr>
</tbody>
</table>
<br/>
<blockquote>
<p><font color = green size = 4>分析：</font></p>
<p>(A B C D E)是关系R的属性， AD, BC, BE, CDE, AE 是分解之后每一个关系对应的属性集</p>
<p><font color = green size = 4>填表的过程：</font></p>
<p>当横竖相交的时候，如果在分解关系中存在对应列的单个的属性（譬如第一列第一行AD与A相交的单元格，AD含有A，就填写a1），则填写a下标 ， 下标就是单元格对应所在的列号。否则填写b下标， 下标是单元格对应所在的行列号。</p>
</blockquote>
  <br/>
<p><font color = dark size = 4>2. 根据依赖关系修改原始表：</font></p>
<ol>
<li>对于依赖关系A<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>C，看A列中有两行a1是相等的（第一行和第五行），所以在C列中对应的两行也应该相等，但是看到这两行都是b（b13，b53），所以将这个b都换成b13（上面的较小的标）</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AD</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b12</td>
<td style="text-align:center"><font color = blue >b13</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b15</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center">b24</td>
<td style="text-align:center">b25</td>
</tr>
<tr>
<td style="text-align:center">BE</td>
<td style="text-align:center">b31</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center">b33</td>
<td style="text-align:center">b34</td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">CDE</td>
<td style="text-align:center">b41</td>
<td style="text-align:center">b42</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">AE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b52</td>
<td style="text-align:center"><font color = blue >b53 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> b13</font></td>
<td style="text-align:center">b54</td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
</tbody>
</table>
<br/>
<ol start="2">
<li>对于依赖B <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> C, 同样的道理，看B这一列中，第二行和第三行都是a2,那么对C这一列同样的操作，但是看到C这一列中第二行是a3，那么就将第三行改成a3，优先级比b要高。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AD</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b12</td>
<td style="text-align:center">b13</td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b15</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center">b24</td>
<td style="text-align:center">b25</td>
</tr>
<tr>
<td style="text-align:center">BE</td>
<td style="text-align:center">b31</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = blue >b33 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> a3</font></td>
<td style="text-align:center">b34</td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">CDE</td>
<td style="text-align:center">b41</td>
<td style="text-align:center">b42</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">AE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b52</td>
<td style="text-align:center">b13</td>
<td style="text-align:center">b54</td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
</tbody>
</table>
<br/>
<ol start="3">
<li>对依赖C<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>D，C列的1，5行相等，D的1，5行也应该相等，D的第1行有a，所以b54换成a4；另外C列的2，3，4行也相等，D的2，3，4行也应该相等，D的第4行有a，所以将对应的行都换成a4。</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AD</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b12</td>
<td style="text-align:center">b13</td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b15</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = blue >b24 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> a4</font></td>
<td style="text-align:center">b25</td>
</tr>
<tr>
<td style="text-align:center">BE</td>
<td style="text-align:center">b31</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = blue >b34 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">CDE</td>
<td style="text-align:center">b41</td>
<td style="text-align:center">b42</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">AE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b52</td>
<td style="text-align:center">b13</td>
<td style="text-align:center"><font color = blue >b54 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
</tbody>
</table>
  <br/>
<ol start="4">
<li>对于DE<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>C, DE公共的相等的行是3，4，5行，对应C的3，4，5行也应该相等，故将C列最后的b13换成a3，所以表格经过这个函数依赖关系，就是：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AD</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b12</td>
<td style="text-align:center">b13</td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b15</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b25</td>
</tr>
<tr>
<td style="text-align:center">BE</td>
<td style="text-align:center">b31</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">CDE</td>
<td style="text-align:center">b41</td>
<td style="text-align:center">b42</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">AE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b52</td>
<td style="text-align:center"><font color = blue >b13 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
</tbody>
</table>
<br/>
<ol start="5">
<li>对于CE<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span>A, CE的公共行是3，4，5行，所以将A的3，4，5行也对应相等，因为A列的第五行含有a1，所以将3，4行的b31,b41都换成a1</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AD</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b12</td>
<td style="text-align:center">b13</td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b15</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b25</td>
</tr>
<tr>
<td style="text-align:center">BE</td>
<td style="text-align:center"><font color = blue >b31 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> a1</font></td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">CDE</td>
<td style="text-align:center"><font color = blue >b41 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>→</mo></mrow><annotation encoding="application/x-tex">\rightarrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">→</span></span></span></span> a1</font></td>
<td style="text-align:center">b42</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">AE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b52</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
</tbody>
</table>
<br/>
<ol start="6">
<li>最终得到的表格就是：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
<th style="text-align:center">D</th>
<th style="text-align:center">E</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AD</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b12</td>
<td style="text-align:center">b13</td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b15</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center">b25</td>
</tr>
<tr>
<td style="text-align:center">BE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">CDE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b42</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
<tr>
<td style="text-align:center">AE</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b52</td>
<td style="text-align:center"><font color = red >a3</font></td>
<td style="text-align:center"><font color = red >a4</font></td>
<td style="text-align:center"><font color = red >a5</font></td>
</tr>
</tbody>
</table>
<br/>
<p><font color = dark size = 4>3. 最后，我们从表格里看到对于BE行来说，变成a1…a5，所以得出结论，题中的分解是无损联接分解</font></p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>无损分解的一个简便的判别方法（<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">适用于分解成2个关系的情况</span>）</font></p>
<blockquote>
<p>例如：</p>
<p>有关系R=ABC, 依赖关系F = {A–&gt;B}那么下面哪个是无损分解：</p>
<p>A. {R1(AB), R2(AC)}<br />
B. {R1(AB), R3(BC)}</p>
</blockquote>
  <br/>
<p><font color = brown size = 4>求解方法：</font></p>
<p><font color = blue size = 4>1. 建表法：</font></p>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>选项A：</font></span></p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AB</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center">b13</td>
</tr>
<tr>
<td style="text-align:center">AC</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center">b22</td>
<td style="text-align:center"><font color = red >a3</font></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AB</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center">b13</td>
</tr>
<tr>
<td style="text-align:center">AC</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
</tr>
</tbody>
</table>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>选项B：</font></span></p>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AB</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center">b13</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:center">A</th>
<th style="text-align:center">B</th>
<th style="text-align:center">C</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AB</td>
<td style="text-align:center"><font color = red >a1</font></td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center">b13</td>
</tr>
<tr>
<td style="text-align:center">BC</td>
<td style="text-align:center">b21</td>
<td style="text-align:center"><font color = red >a2</font></td>
<td style="text-align:center"><font color = red >a3</font></td>
</tr>
</tbody>
</table>
<blockquote>
<p><font color = red size = 4>结论：</font><font color = green size = 4>选项A的AC一行为a1…a3，故此时为无损分解；而选项B无法化成，所以不是无损分解。</font></p>
</blockquote>
<p><font color = blue size = 4>2. 快速判别法：</font></p>
<blockquote>
<ol>
<li>
<p>首先看选项A，R1∩R2=A，R1-R2=B，R1∩ R2–&gt;(R1-R2) F+.所以它是无损分解</p>
</li>
<li>
<p>再看选项B， R1∩R2=B, R1-R2=A, R2-R1=C,</p>
</li>
<li>
<p>所以它不是无损分解</p>
</li>
</ol>
</blockquote>
<br/>
<blockquote>
<p><font color = red size = 4>快速判断无损分解的方法就是:</font></p>
<p><font color = green size = 4>1. 对两个集合先求集合的∩，然后求集合的差(2个集合有两个差的结果)<br />
如果集合的∩–&gt;集合的差（得到差结果的任意一个）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>⊆</mo></mrow><annotation encoding="application/x-tex">\subseteq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mrel">⊆</span></span></span></span> F<sup>+</sup> 成立，那么就是无损分解</font></p>
<p><font color = green size = 4>2. 如果R1∩R2是R1或R2的超码，则R上的分解（R1，R2）是无损分解。这是一个<font color = red>充分条件</font>，当所有的约束都是函数依赖时它才是必要条件（例如多值依赖就是一种非函数依赖的约束），不过这已经足够了。</font></p>
</blockquote>
  <br/>
</li>
</ul>
<h4 id="font-color-blue2-保持函数依赖font"><a class="markdownIt-Anchor" href="#font-color-blue2-保持函数依赖font"></a> <font color = blue>2) 保持函数依赖</font></h4>
<ul>
<li>
<p><font color = green size = 4>定义:</font></p>
<blockquote>
<p>如果F上的每一个函数依赖都在其分解后的<font color = red>某一个关系上</font>成立，则这个分解是保持依赖的（这是一个<font color = red >充分条件</font>）。如果上述判断失败，并不能断言分解不是保持依赖的，还要使用下面的通用方法来做进一步判断。</p>
</blockquote>
<br/>
<blockquote>
<p>设F是关系模式R的函数依赖集，ρ={R1&lt;U1,F1&gt;, R2&lt;U2,F2&gt;,…, Rk&lt;Uk,Fk&gt;}为R的一个分解，如果Fi=π<sub>Ri</sub>(F)<font color = red >(Fi为函数依赖集F在Ri上的投影)</font>的并集(F1∪F2∪…∪Fk) ≡ F（i=1,2,…,k）,则称分解ρ具有函数依赖保持性。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>保持依赖判定算法：</font></p>
<ul>
<li>
<p>对F上的每一个α→β使用下面的过程：</p>
<blockquote>
<p><font color = dark size = 4>result:=α;</font><br />
<font color = dark size = 4>while(result发生变化)do</font><br />
<font color = dark size = 4> 	for each 分解后的Ri</font><br />
<font color = dark size = 4>t=(result∩Ri)<sup>+</sup>∩Ri</font><br />
<font color = dark size = 4>result=result∪t</font></p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>这里的属性闭包是在函数依赖集F下计算出来的。如果result中包含了β的所有属性，则函数依赖α→β。分解是保持依赖的当且仅当上述过程中F的所有依赖都被保持。</li>
</ul>
<br/>
<blockquote>
<p><font color = red>函数依赖保持判断方法：</font></p>
<ol>
<li><font color = green>先找到要分解的目标R<sub>i</sub>（U<sub>i</sub>），然后求出U<sub>i</sub><sup>+</sup>；</font></li>
<li><font color = green>接着在F中找到所有包含U<sub>i</sub><sup>+</sup>属性的关系 ；</font></li>
<li><font color = green>挑选或推导出仅含有R<sub>i</sub>（U<sub>i</sub>）中属性的关系，组成即为F<sub>i</sub> ；</font></li>
</ol>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>示例：</font></p>
<p><font color = blue size = 4>1. 将R = (ABCD，{A→B，B→C，B→D，C→A})分解为关于U1=AB，U2=ACD两个关系（<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">给出U<sub>i</sub>，则表示求R<sub>i</sub>（U<sub>i</sub>，F<sub>i</sub>）</span>），求R1、R2，<br />
并检验分解的无损联接性和分解的函数依赖保持性。</font></p>
<p><font color = brown size = 4>求解方法：</font></p>
<p><font color = blue>1. 无损分解：</font></p>
<blockquote>
<p>F1 = π<sub>R1</sub>(F) = {A→B, B→A},<br />
F2 = π<sub>R2</sub>(F) = {A→C, C→A, A→D}</p>
<blockquote>
<p><font color = red>注意：</font><font color = green>Fi为仅含有Ui中元素，且在F上的所有关系（包含推导关系）</font></p>
</blockquote>
<p>R1 = (AB, {A→B, B→A})<br />
R2 = (ACD, {A→C, C→A, A→D})</p>
<p><font color = red>U1∩U2 = AB∩ACD = A, </font></p>
<p><font color = red>U1-U2 = AB-ACD = B, A→B∈F, </font></p>
<p><font color = blue>所以ρ是无损分解；</font></p>
</blockquote>
<br/>
<p><font color = blue>2. 函数依赖性：</font></p>
<blockquote>
<p><font color = red>F1UF2 = {A→B, B→A, A→C, C→A, A→D} ≡ {A→B, B→C, B→D, C→A} = F；</font></p>
<p><font color = orange>Tip：</font><font color = green>可用定理对函数依赖进行化简，观察并集是否为F；</font></p>
<p><font color = blue>所以ρ具有函数依赖保持性。</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4 >2. 关系模式R(A, B, C ,D，{F}) 中函数依赖集F = {A→B, C→D}, ρ = {R1(AB，{F<sub>1</sub>})，R2(CD，{F<sub>2</sub>})}，求R1, R2 并检验分解的无损联接性和分解的函数依赖保持性。</font></p>
<br/>
<p><font color = brown size = 4>求解方法：</font></p>
<p><font color = blue>1. 无损分解：</font></p>
<blockquote>
<p>F1 = π<sub>R1</sub>(F) = {A→B},<br />
F2 = π<sub>R2</sub>(F) = {C→D}<br />
R1(AB, {A→B}),<br />
R2(CD, {C→D})<br />
<font color = red>U1∩U2 = AB∩CD = Φ,</font><br />
<font color = red>U1-U2 = AB,</font><br />
<font color = red>U2-U1 = CD,</font><br />
Φ→AB<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">∉</mo></mrow><annotation encoding="application/x-tex">\notin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span></span></span></span></span>F,<br />
Φ→CD<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">∉</mo></mrow><annotation encoding="application/x-tex">\notin</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mrel"><span class="mord"><span class="mrel">∈</span></span><span class="mord vbox"><span class="thinbox"><span class="llap"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="inner"><span class="mord"><span class="mord">/</span><span class="mspace" style="margin-right:0.05555555555555555em;"></span></span></span><span class="fix"></span></span></span></span></span></span></span></span>F,</p>
<p><font color = blue>所以ρ不是无损分解；</font></p>
</blockquote>
<br/>
<p><font color = blue>2. 函数依赖性：</font></p>
<blockquote>
<p><font color = red>F1UF2 = {A→B，C→D} = F</font></p>
<p><font color = blue>所以ρ具有函数依赖保持性。</font></p>
</blockquote>
<br/>
<p><font color = blue size = 4 >3. 已知关系模式R(CITY, ST, ZIP), F = {(CITY, ST)→ZIP, ZIP→CITY}，以及R上的一个分解ρ = {R1(U<sub>1</sub>，F<sub>1</sub>), R2(U<sub>2</sub>，F<sub>2</sub>)}, R1 = {ST, ZIP}, R2 = {CITY, ZIP}，求R1, R2 ,并检验分解的无损联接性和分解的函数依赖保持性。</font></p>
  <br/>
<p><font color = brown size = 4>求解方法：</font></p>
<p><font color = blue>1. 无损分解：</font></p>
<blockquote>
<p>F1= π<sub>R1</sub>(F) = {Φ},<br />
F2 = π<sub>R2</sub>(F) = {ZIP→CITY}</p>
<p>R1 = ({ST, ZIP}, {Φ})，</p>
<p>R2 = (CITY, ZIP, {ZIP→CITY})</p>
<p><font color = red>U1∩U2 = {ST, ZIP}∩{CITY, ZIP} = ZIP,</font></p>
<p><font color = red>U1-U2 = ST,</font><br />
<font color = red>U2-U1 = CITY，ZIP→CITY∈F,</font></p>
<p><font color = blue>所以ρ是无损分解；</font></p>
</blockquote>
<p><font color = blue>2. 函数依赖性：</font></p>
<blockquote>
<p><font color = red>F1UF2 = {ZIP→CITY}<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo mathvariant="normal">≠</mo></mrow><annotation encoding="application/x-tex">\neq</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span></span></span></span>{(CITY, ST)→ZIP, ZIP→CITY} = F</font></p>
<p><font color = blue>所以ρ不具有函数依赖保持性。</font></p>
</blockquote>
</li>
</ul>
<br/>
<blockquote>
<p><font color = red size = 4>总结：</font></p>
<ol>
<li><font color = green size = 4>无损分解：R  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder accentunder="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><msub><mi>F</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mo stretchy="true">→</mo></munder></mrow><annotation encoding="application/x-tex">\underrightarrow{F(F_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.522em;vertical-align:-0.772em;"></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span class="svg-align" style="top:-2.2279999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128
-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20
 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7
 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85
-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.772em;"><span></span></span></span></span></span></span></span></span>   R<sub>i</sub> </font></li>
<li><font color = green size = 4>函数依赖：F  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><munder accentunder="true"><mrow><mi>R</mi><mo stretchy="false">(</mo><msub><mi>U</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mo stretchy="true">→</mo></munder></mrow><annotation encoding="application/x-tex">\underrightarrow{R(U_i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.522em;vertical-align:-0.772em;"></span><span class="mord accentunder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span class="svg-align" style="top:-2.2279999999999998em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="height:0.522em;min-width:0.888em;"><svg width='400em' height='0.522em' viewBox='0 0 400000 522' preserveAspectRatio='xMaxYMin slice'><path d='M0 241v40h399891c-47.3 35.3-84 78-110 128
-16.7 32-27.7 63.7-33 95 0 1.3-.2 2.7-.5 4-.3 1.3-.5 2.3-.5 3 0 7.3 6.7 11 20
 11 8 0 13.2-.8 15.5-2.5 2.3-1.7 4.2-5.5 5.5-11.5 2-13.3 5.7-27 11-41 14.7-44.7
 39-84.5 73-119.5s73.7-60.2 119-75.5c6-2 9-5.7 9-11s-3-9-9-11c-45.3-15.3-85
-40.5-119-75.5s-58.3-74.8-73-119.5c-4.7-14-8.3-27.3-11-40-1.3-6.7-3.2-10.8-5.5
-12.5-2.3-1.7-7.5-2.5-15.5-2.5-14 0-21 3.7-21 11 0 2 2 10.3 6 25 20.7 83.3 67
 151.7 139 205zm0 0v40h399900v-40z'/></svg></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.772em;"><span></span></span></span></span></span></span></span></span>   F<sub>i</sub>  </font></li>
<li><font color = green size = 4>函数依赖和无损分解间没有必然的联系</font></li>
</ol>
</blockquote>
<br/>
<h3 id="6关系模式的范式nf"><a class="markdownIt-Anchor" href="#6关系模式的范式nf"></a> 6.关系模式的范式(NF)</h3>
<h4 id="font-color-green-size-41定义font"><a class="markdownIt-Anchor" href="#font-color-green-size-41定义font"></a> <font color = green size = 4>1）定义</font></h4>
<blockquote>
<p>范式xNF即是满足特定要求的模式，将低一级范式的关系模式通过模式分解转换为高一级范式的关系模式集合的过程叫做<font color = red>规范化</font>；</p>
<p>范式从低级到高级依次为：1NF、2NF、3NF、BCNF、4NF、5NF，高一级的范式总是低一级范式的真子集。</p>
</blockquote>
<br/>
<blockquote>
<p>根据关系模式R的不可约函数依赖集F，可以画出节点是属性或属性集，边是由被依赖节点指向依赖节点的有向图来辅助分析关系模式，叫做<font color = red>函数依赖图</font></p>
</blockquote>
<p>从范式所允许的函数依赖方面进行比较，四种范式之间的关联如下图所示。</p>
<br/>
<p><img data-src="https://image.zxkidea.top/blog/20200304/FnyH4i7YiPew.gif" alt="zxk" /></p>
<br/>
<h4 id="font-color-green-size-42各类范式及其说明font"><a class="markdownIt-Anchor" href="#font-color-green-size-42各类范式及其说明font"></a> <font color = green size = 4>2）各类范式及其说明</font></h4>
<ul>
<li>
<p><font color = blue size = 4>第一范式(1NF)</font><font color = red size = 4>(确保每列保持原子性)</font></p>
<blockquote>
<p>第一范式是最基本的范式。如果数据库表中的<font color = brown>所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。</font></p>
</blockquote>
<br/>
<blockquote>
<p>第一范式的合理遵循需要根据系统的实际需求来定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。<font color = brown>但是如果系统经常会访问“地址”属性中的“城市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。</font>这样设计才算满足了数据库的第一范式，如下表所示：</p>
</blockquote>
<br/>
<p><img data-src="https://image.zxkidea.top/1551266870484.png" alt="zxk" /></p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue size = 4>第二范式(2NF)</font><font color = red size = 4>(确保表中的每列都和主键相关)</font></p>
<blockquote>
<p>第二范式在第一范式的基础之上更进一层。第二范式需要确保数据库表中的每一列都和主键相关，而不能只与主键的某一部分相关（主要针对联合主键而言）。<font color = brown>也就是说在一个数据库表中，一个表中只能保存一种数据，不可以把多种数据保存在同一张数据库表中。</font></p>
</blockquote>
<br/>
<ul>
<li>
<p><font color = green >示例1：</font></p>
<blockquote>
<p><font color = blue >设有关系模式R(学号S#,课程号C#,成绩G,任课教师TN,教师专长TS)，基于R的函数依赖集F={(S#, C#)→G, C#→TN, TN→TS},判断R是否为2NF。</font></p>
</blockquote>
<ul>
<li>
<p><font color = brown>函数依赖图：</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200304/KywgHGFgPUdl.gif" alt="zxk" /></p>
</li>
<li>
<p><font color = brown>阿氏推理规则:</font></p>
<blockquote>
<p>由F可推出：(S#, C#)→{S#, C#, G, TN, TS}，即属性组合(S#, C#)是R的候选关键字(R只有这一个候选键)。(S#, C#)的一个值可惟一标识R中的一个元组(并且没有多余的属性)。</p>
<p>在R中，S#, C#是主属性；其余的属性G, TN, TS为非主属性。</p>
</blockquote>
<br/>
<blockquote>
<p>借助上面的图，我们可以看到，非主属性G对键是完全依赖：(S#, C#)→G。但非主属性TN, TS对键是部分依赖(他们仅依赖于键的真子集C#)。由于R中存在<font color = red><em>非主属性对候选键的部分依赖</em></font>，所以关系模式R不是2NF。</p>
</blockquote>
<br/>
<blockquote>
<p><font color = red>注意：</font></p>
<ol>
<li>
<p>R中存在非主属性对候选键的部分依赖，将会引起<font color = green>插入异常、删除异常、更新异常和数据冗余</font>等问题。<font color = red>可以把关系R无损联接地分解成两个2NF的关系模式：</font></p>
<p>ρ = {R1, R2}，R1 = {S#, C#, G}, R2 = {C#, TN, TS}。</p>
</li>
<li>
<p><font color = orange>具体步骤：</font></p>
<ul>
<li>找出R中所有的候选码(X…Y)，即(X…Y)<sup>+</sup> = F；</li>
<li>得到非主属性，并根据2NF定义判断是否满足2NF；</li>
</ul>
</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green szie = 4>示例2：</font></p>
<blockquote>
<p><font color = blue >选课关系 R（SNO，CNO，GRADE，CREDIT）其中SNO为学号， CNO为课程号，GRADEGE 为成绩，CREDIT 为学分。 </font></p>
</blockquote>
<br/>
<p><font color = brown size = 4>求解方法：</font></p>
<ul>
<li>
<p>由以上条件，关键字为组合关键字（SNO，CNO）</p>
</li>
<li>
<p><font color = brown>原因：</font>非关键字属性CREDIT仅函数依赖于CNO，也就是CREDIT部分依赖组合关键字（SNO，CNO）而不是完全依赖。</p>
</li>
<li>
<p><font color = brown>解决方法：</font>分成两个关系模式 R1（SNO，CNO，GRADE），R2（CNO，CREDIT）。新关系包括两个关系模式，它们之间通过R1中的外关键字CNO相联系，需要时再进行自然联接，恢复了原来的关系</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue size = 4>第三范式(3NF)</font><font color = red size = 4>(确保每列都和主键列直接相关,而不是间接相关；即去除非主属性对于候选关键字的传递依赖)</font></p>
<blockquote>
<p>如果关系模式R为2NF，并且<font color = brown>R中的每一个非主属性都不传递依赖于R的某个候选关键字</font>，则称R是第三范式的，简记为3NF。</p>
</blockquote>
  <br/>
<ul>
<li>
<p><font color = green size = 4>示例1：</font></p>
<blockquote>
<p><font color = blue >续上例R(学号S#, 课程号C#, 成绩G, 任课教师TN, 教师专长TS)，判断关系模式R1 = {S#, C#, G}, R2 = {C#, TN, TS} 是否为3NF。</font></p>
</blockquote>
<br/>
<p><font color = brown size = 4>求解方法：</font></p>
<ul>
<li>
<p>在关系模式R1={S#,C#,G}，候选关键字是(S#,C#)，主属性是S#,C#，非主属性是G，函数依赖为(S#,C#)→G。  由于R1中不存在非主属性对候选关键字的传递依赖，所以关系模式R1是3NF。</p>
</li>
<li>
<p>在关系模式R2={C#,TN,TS}，候选关键字是C#，主属性是C#，非主属性是TN,TS，函数依赖为C#→TN，TN→TS。由于R2中存在非主属性对候选关键字的传递依赖C# ,TS，所以关系模式R2不是3NF。</p>
<p><font color = red>可以把关系R2无损联接地分解成两个3NF的关系模式：</font></p>
<p>ρ={R3,R4}，R3={C#,TN}，R4={TN,TS}。</p>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>示例2：</font></p>
<blockquote>
<p><font color = blue >若关系模式SD（SNO，SNAME，DNO，DNAME，LOCATION） 各属性分别代表学号，<br />
姓名，所在系，系名称，系地址。 判断关系模式SD是否为3NF。</font></p>
</blockquote>
<br/>
<p><font color = brown size = 4>求解方法：</font></p>
<ul>
<li>关键字SNO决定各个属性。由于是单个关键字，没有部分依赖的问题，是2NF。
<ul>
<li><font color = brown>原因：</font>关系中存在传递依赖造成的。关键字 SNO 对 LOCATION 函数决定是通过传递依赖:SNO -&gt; DNO，及DNO -&gt; LOCATION实现的。也就是说，SNO不直接决定非主属性LOCATION，不是3NF。</li>
</ul>
</li>
<li><font color = brown>解决目的：</font>每个关系模式中不能留有传递依赖。
<ul>
<li><font color = brown>解决方法：</font>分为两个关系 S（SNO，SNAME，DNO），D（DNO，DNAME，LOCATION）</li>
</ul>
</li>
</ul>
<br/>
<blockquote>
<p><font color = red>注意：</font></p>
<ol>
<li>关系S中<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">不能没有外关键字DNO</span>；否则两个关系之间失去联系；</li>
<li>分解为3NF时注意保留外关键字。</li>
</ol>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue size = 4>Boyce-Codd范式(BCNF)</font><font color = red size = 4>(3NF基础上去除主属性对于候选关键字的传递依赖)</font></p>
<blockquote>
<p>如果关系模式R为<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">1NF</span>，并且R中的每一个函数依赖X→Y(YÏX),必有X是R的超关键字，则称R是Boyce-Codd范式的，简记为BCNF。</p>
</blockquote>
<br/>
<ul>
<li>
<p><font color = green size =4>BCNF特性：</font></p>
<blockquote>
<ol>
<li>所有非主属性对键是完全函数依赖；</li>
<li>所有主属性对不包含它的键是完全函数依赖；</li>
<li>没有属性完全函数依赖于非键的任何属性组合</li>
<li><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = dark>综上即为</font></span>：<font color = green >消除了主属性对于候选关键字的部分和传递函数依赖；</font></li>
</ol>
</blockquote>
<br/>
<blockquote>
<p>与2NF,3NF的定义不同，BCNF的定义直接建立在1NF的基础上。但实质上BCNF是3NF的改进形式。3NF仅考虑了非主属性对键的依赖情况，<font color = brown>BCNF把主属性对键的依赖情况也包括进去。</font>BCNF要求满足的条件比3NF所要求的更高。<font color = brown>如果关系模式R是BCNF的，那么R必定是3NF</font>，反之，则不一定成立。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>示例1：</font></p>
<blockquote>
<p><font color = blue >续前例R（学号S#, 课程号C#, 成绩G, 任课教师TN, 教师专长TS）,判断两个3NF关系模式R3 = {C#, TN},R4 = {TN, TS}是否为BCNF。</font></p>
</blockquote>
<br/>
<p><font color = brown size = 4>求解方法：</font></p>
<ul>
<li>
<p>在关系模式R3中有函数依赖C#→TN，决定因素C#是R3的键；</p>
<p>在关系模式R4中有函数依赖TN→TS，决定因素TN是R4的键；</p>
<p>R3,R4都满足BCNF的定义，所以，这两个关系模式都是BCNF。</p>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>示例2：</font></p>
<blockquote>
<p><font color = blue >配件管理关系模式 WPE（WNO，PNO，ENO，QNT）分别表仓库号，配件号，职工号，数量。</font></p>
<p><font color = blue >有以下条件:</font> <br />
a.一个仓库有多个职工。<br />
b.一个职工仅在一个仓库工作。<br />
c.每个仓库里一种型号的配件由专人负责，但一个人可以管理几种配件。<br />
d.同一种型号的配件可以分放在几个仓库中。</p>
</blockquote>
<br/>
<p><font color = brown size = 4>求解方法：</font></p>
<ul>
<li>
<p><font color = brown>分析：</font></p>
<p>由以上得 PNO 不能确定QNT，由组合属性（WNO，PNO）来决定，存在函数依赖（WNO，PNO） -&gt; QNT。由于每个仓库里的一种配件由专人负责，而一个人可以管理几种配件，所以有组合属性（WNO，PNO）才能确定负责人，有<font color = red>（WNO，PNO）-&gt; ENO</font>。因为 一个职工仅在一个仓库工作，有<font color = red>ENO -&gt; WNO</font>。由于每个仓库里的一种配件由专人负责，而一个职工仅在一个仓库工作，有 <font color = red>（ENO，PNO）-&gt; QNT</font>。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = brown>候选关键字:</font></p>
<p>因为（WNO，PNO） -&gt; QNT，（WNO，PNO）-&gt; ENO ，因此 （WNO，PNO）可以决定整个元组，是一个候选关键字。根据ENO-&gt;WNO，（ENO，PNO）-&gt;QNT，故（ENO，PNO）也能决定整个元组，为另一个候选关键字。<font color = red>属性ENO，WNO，PNO 均为主属性</font>，只有一个非主属性QNT。它对任何一个候选关键字都是完全函数依赖的，并且是直接依赖，所以该关系模式是3NF。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = brown>主属性:</font></p>
<p>因为ENO-&gt;WNO，主属性ENO是WNO的决定因素，但是它本身不是关键字，只是组合关键字的一部分。这就造成主属性WNO对另外一个候选关键字（ENO，PNO）的部分依赖，因为（ENO，PNO）-&gt; ENO，但反过来不成立，而ENO-&gt;WNO，故（ENO，PNO）-&gt; WNO 也是传递依赖。<br />
虽然没有非主属性对候选关键字的传递依赖，但<font color = red>存在主属性对候选关键字的传递依赖</font>，同样也会带来麻烦。如一个新职工分配到仓库工作，但暂时处于实习阶段，没有独立负责对某些配件的管理任务。由于缺少关键字的一部分PNO而无法插入到该关系中去。又如某个人改成不管配件了去负责安全，则在删除配件的同时该职工也会被删除。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = brown>解决办法：</font></p>
<p>分成管理EP（ENO，PNO，QNT），关键字是（ENO，PNO）；工作EW（ENO，WNO），关键字是ENO</p>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = brown>缺点：</font></p>
<p>分解后函数依赖的保持性较差。如此例中，由于分解,函数依赖（WNO，PNO）-&gt; ENO 丢失了, 因而对原来的语义有所破坏。没有体现出每个仓库里一种部件由专人负责。有可能出现 一部件由两个人或两个以上的人来同时管理。因此，分解之后的关系模式降低了部分完整性约束。</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);"><font color = green size = 4>总结：</font></span></p>
<p><img data-src="https://image.zxkidea.top/1551857237283.png" alt="zxk" /></p>
<br/>
<blockquote>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);"><font color = green size = 4>化简为BCNF：</font></span></p>
<ol>
<li><font color = green >先将关系模式化简为3NF；</font></li>
<li><font color = green >再找出所有候选关键字及其主属性；</font></li>
<li><font color = green >接着根据函数依赖关系判断是否存在主属性对候选关键字的传递依赖或部分依赖；</font></li>
<li><font color = green >最后将造成传递依赖或部分依赖的关系模式分解出去；</font></li>
</ol>
</blockquote>
<br/>
<h3 id="7关系模式分解为范式的分解算法"><a class="markdownIt-Anchor" href="#7关系模式分解为范式的分解算法"></a> 7.关系模式分解为范式的分解算法</h3>
<h4 id="font-color-green-size-41无损连接且保持函数依赖地分解r到3nffont"><a class="markdownIt-Anchor" href="#font-color-green-size-41无损连接且保持函数依赖地分解r到3nffont"></a> <font color = green size = 4>1）无损连接且保持函数依赖地分解R到3NF</font></h4>
<ul>
<li>
<p><font color = blue size = 4>示例1：</font></p>
<blockquote>
<p>U = (A, B, C, D, E, G),  F = {BG-&gt;C，BD-&gt;E，DG-&gt;C，ADG-&gt;BC，AG-&gt;B，B-&gt;D}   若R不是3NF，将R分解为无损且保持函数依赖的3NF。</p>
</blockquote>
<br/>
<p><font color = red size = 4>求解方法：</font></p>
<p><font color = brown>1. 先求出候选码：</font></p>
<ul>
<li>分为L类，N类，R类；</li>
<li>按求候选码规则求得候选码为AG</li>
</ul>
<br/>
<p><font color = brown>2. 再求出最小依赖集F<sub>m</sub>：</font></p>
<ul>
<li>将F中的所有依赖右边化为单一元素</li>
<li>去掉F各函数依赖左边的冗余属性</li>
<li>去掉F中所有冗余依赖关系</li>
<li>求得F<sub>m</sub> = {B-&gt;E，DG-&gt;C，AG-&gt;B，B-&gt;D}</li>
</ul>
<br/>
<p><font color = brown>3. 左部相同原则分组：</font></p>
<ul>
<li>对F<sub>m</sub>按具有相同左部的原则分组，然后<font color = green>左部∪右部。</font></li>
<li>U1 = B∪DE = BDE  ;  U2 = DGC ;  U3 = AGB</li>
</ul>
<br/>
<p><font color = brown>4. 看有没有包含关系，有的话，合并吸收。</font></p>
<ul>
<li>将R分解为ρ = { R1({B, D, E}，{B-&gt;E, B-&gt;D})，R2({C, D, G}，{DG-&gt;C})，R3({A, B, G}，{AG-&gt;B}) }</li>
<li>不存在包含关系</li>
</ul>
<br/>
<p><font color = brown>5. 看分的属性组里有没有包含码，包含了，就是无损且保持函数依赖的3NF，没有包含，就不是无损且保持函数依赖的3NF，就加一个分组，把码加进去。</font></p>
<ul>
<li>因为候选键AG在U3中，所以所求分解ρ具有无损连接性，并保持函数依赖，且每个子模式为3NF。</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue size = 4>示例2：</font></p>
<blockquote>
<p>U=(A, B, C, D, E) ,  F = {AB-&gt;C，C-&gt;B，D-&gt;E，D-&gt;C}   若R不是3NF，将R分解为无损且保持函数依赖的3NF。</p>
</blockquote>
<br/>
<p><font color = red size = 4>求解方法：</font></p>
<p><font color = brown>1. 先求出候选码：</font></p>
<ul>
<li>分为L类，N类，R类；</li>
<li>按求候选码规则求得候选码为AD</li>
</ul>
<br/>
<p><font color = brown>2. 再求出最小依赖集F<sub>m</sub>：</font></p>
<ul>
<li>将F中的所有依赖右边化为单一元素</li>
<li>去掉F各函数依赖左边的冗余属性</li>
<li>去掉F中所有冗余依赖关系</li>
<li>求得F<sub>m</sub> = {AB-&gt;C，C-&gt;B，D-&gt;E，D-&gt;C}</li>
</ul>
<br/>
<p><font color = brown>3. 左部相同原则分组：</font></p>
<ul>
<li>对F<sub>m</sub>按具有相同左部的原则分组，然后<font color = green>左部∪右部。</font></li>
<li>U1 = ABC  ;   U2 = BC  ; U3 = DCE</li>
</ul>
<br/>
<p><font color = brown>4. 看有没有包含关系，有的话，合并吸收。</font></p>
<ul>
<li>
<p>将R分解为ρ = { R1((A, B, C)，{AB-&gt;C})，R2((B, C)，{C-&gt;B})，R3((C, D, E)，{D-&gt;E, D-&gt;C}) }</p>
</li>
<li>
<p><font color = green>合并吸收：</font>ρ = { R1((A, B, C)，{AB-&gt;C, C-&gt;B})，R2((C, D, E)，{D-&gt;E, D-&gt;C}) }</p>
</li>
</ul>
<br/>
<p><font color = brown>5. 看分的属性组里有没有包含码，包含了，就是无损且保持函数依赖的3NF，没有包含，就不是无损且保持函数依赖的3NF，就加一个分组，把码加进去。</font></p>
<ul>
<li>不是无损连接，添加码。</li>
<li>R3((A, D)，{∅})</li>
<li>所以ρ = { R1((A, B, C)，{AB-&gt;C，C-&gt;B})，R2((C, D, E)，{D-&gt;E, D-&gt;C})，R3((A, D)，{∅}) }</li>
</ul>
</li>
</ul>
<br/>
<h4 id="font-color-green-size-42无损联接地分解r到bcnffont"><a class="markdownIt-Anchor" href="#font-color-green-size-42无损联接地分解r到bcnffont"></a> <font color = green size = 4>2）无损联接地分解R到BCNF</font></h4>
<ul>
<li>
<p><font color = blue size = 4>示例：</font></p>
<blockquote>
<p>关系模式R&lt;U, F&gt;, 有U = {A, B, C, D, E, G}, F = {B-&gt;G, CE-&gt;B, C-&gt;A, CE-&gt;G, B-&gt;D, C-&gt;D}</p>
</blockquote>
<br/>
<p><font color = red size = 4>求解方法：</font></p>
<p><font color = brown>1. 先求出候选码：</font></p>
<ul>
<li>
<p>分为L类，N类，R类；</p>
</li>
<li>
<p>按求候选码规则求得候选码为CE</p>
</li>
</ul>
<br/>
<p><font color = brown>2. 再求出最小依赖集F<sub>m</sub>：</font></p>
<ul>
<li>F<sub>m</sub> = {B-&gt;G, CE-&gt;B, C-&gt;A, B-&gt;D, C-&gt;D}。</li>
</ul>
<br/>
<p><font color = brown>3. 循环分解函数依赖集：</font></p>
<ul>
<li>开始找左部不包含CE的关系模式，第一个为B-&gt;G，</li>
<li>将其分为R1 = {(BG), {B-&gt;G}} 与R2 = {(ABCDE), {CE-&gt;B, C-&gt;A, B-&gt;D, C-&gt;D}}。</li>
<li>注意G不能出现在R2中，要根据与G相关的关系模式进行替代。</li>
</ul>
<br/>
<ul>
<li>求R1与R2的最小函数依赖集，步骤均是按照上述算法严格进行的。</li>
<li>R1，R2最小函数依赖集是其本身。</li>
</ul>
<br/>
<ul>
<li>然后再进行分解，R1符合BCNF，继续分解R2：</li>
<li>B-&gt;D,左部不含码，于是分解为R2={(BD), {B-&gt;D}}，R3={(ABCE)，{CE-&gt;B, C-&gt;A}}。</li>
</ul>
<br/>
<ul>
<li>R2，R3的最小函数依赖集均是其本身。</li>
</ul>
<br/>
<ul>
<li>于是BCNF分解的最后结果为{(BG), (BD), (ABCE)}。</li>
</ul>
</li>
</ul>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p><font color = green size= 4>XZ表示X <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∪</span></span></span></span> Z, YZ表示Y <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.55556em;vertical-align:0em;"></span><span class="mord">∪</span></span></span></span> Z</font> <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>考研</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>DatabaseNotes-Ch7,8</title>
    <url>/posts/9c3362dd.html</url>
    <content><![CDATA[<h2 id="ch7-database-manage数据库管理"><a class="markdownIt-Anchor" href="#ch7-database-manage数据库管理"></a> Ch7.  Database Manage(数据库管理)</h2>
<h3 id="1-integrity-constraints-完整性约束"><a class="markdownIt-Anchor" href="#1-integrity-constraints-完整性约束"></a> 1. Integrity Constraints (完整性约束)</h3>
<ul>
<li><font color = green size = 4>数据完整性：</font>存储在数据库中的所有数据值均正确的状态。它是应防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</li>
</ul>
<br/>
<h4 id="1实体完整性"><a class="markdownIt-Anchor" href="#1实体完整性"></a> 1）实体完整性</h4>
<span id="more"></span>
<ul>
<li>
<p><font color = red>实体完整性是对关系中记录的唯一性，也就是主键的约束。</font>准确地说，实体完整性是指关系中的主属性值不能为Null且不能有相同值。定义表中的所有行唯一的标识，一般用主键，唯一索引unique关键字及identity属性；比如说我们的身份证号码，可以唯一标识一个人。</p>
<br/>
<ul>
<li>
<p>将Student表中的Sno属性定义为码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Student</span><br><span class="line">	(Sno CHAR(9) PRIMARY KEY,	/*在列级定义主码*/</span><br><span class="line">	 Sname CHAR(20) NOT NULL,</span><br><span class="line">	 Ssex CHAR(2),</span><br><span class="line">	 Sage SMALLINT,</span><br><span class="line">	 Sdept CHAR(20)</span><br><span class="line">	); </span><br></pre></td></tr></table></figure>
<p><font color = green>或者</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Student</span><br><span class="line">	(Sno CHAR(9),</span><br><span class="line">	 Sname CHAR(20) NOT NULL,	</span><br><span class="line">	 Ssex CHAR(2),</span><br><span class="line">	 Sage SMALLINT,</span><br><span class="line">	 Sdept CHAR(20),</span><br><span class="line">	 PRIMARY KEY(Sno)	/*在表级定义主码*/</span><br><span class="line">	);  </span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p>将SC表中的Sno，Cno属性组定义为码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE SC</span><br><span class="line">	(Sno CHAR(9) NOT NULL,</span><br><span class="line">	 Cno CHAR(4) NOT NULL,</span><br><span class="line">	 Grade SMALLINT,</span><br><span class="line">	 PRIMARY KEY(Sno,Cno)	/*只能在表级定义主码*/</span><br><span class="line">	); </span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = red>实体完整性检查和违约处理</font></p>
<blockquote>
<p>用PRIMARY KEY短语定义了关系的主码后，每当用户程序对基本表插入一条记录或者对主码列进行更新操作时，DBMS将按实体完整性规则自动进行检查。包括：<br />
<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">1.检查主码值是否唯一，如果不唯一则拒绝插入或修改。</span><br />
<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">2.检查主码的各个属性是否为空，只要有一个为空就拒绝插入或修改。</span></p>
<p>从而保证了实体完整性。</p>
</blockquote>
</li>
</ul>
<br/>
<h4 id="2参照完整性"><a class="markdownIt-Anchor" href="#2参照完整性"></a> 2）参照完整性</h4>
<ul>
<li>
<p><font color = red>参照完整性是对关系数据库中建立关联关系的数据表间数据参照引用的约束，也就是对外键的约束。</font>准确地说，参照完整性是指关系中的外键必须是另一个关系的主键有效值，或者是NULL。参考完整性维护表间数据的有效性,完整性,通常通过建立外部键联系另一表的主键实现,还可以用触发器来维护参照完整性。</p>
<br/>
<ul>
<li>
<p>关系SC中一个元组表示一个学生选修的某门课程的成绩，（Sno,Cno）是主码。Sno,Cno分别参照引用Student表的主码和Course表的主码。定义SC中参照完整性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE SC</span><br><span class="line">	(Sno CHAR(9) NOT NULL,</span><br><span class="line">	 Cno CHAR(4) NOT NULL,</span><br><span class="line">	 Grade SMALLINT ,</span><br><span class="line">	 PRIMARY KEY (Sno,Cno),				/*在表级定义实体完整性*/</span><br><span class="line">	 FOREIGN KEY(Sno) REFERENCES Student(Sno),	/*在表级定义参照完整性*/</span><br><span class="line">	 FOREIGN KEY(Cno) REFERENCES Course(Cno)	/*在表级定义参照完整性*/</span><br><span class="line">	);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = red>参照完整性检查和违约处理</font></p>
<p>一个参照完整性将两个表中的相应元组联系起来了。因此，对被参照表和参照表进行增删改操作时有可能破坏参照完整性，必须进行检查。</p>
<p>例如，对表SC和Student有四种可能破坏参照完整性的情况，如下表：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/inWK7fkl2nkt.png?imageslim" alt="zxk" /></p>
<br/>
<blockquote>
<p><font color = green>1.SC表中增加一个元组，该元组的Sno属性的值在表Student中找不到一个元组，其Sno属性的值与之相等。</font><br />
<font color = green>2.修改SC表中的一个元组，修改后该元组的Sno属性的值在表Student中找不到一个元组，其Sno属性的值与之相等。</font><br />
<font color = green>3.从Student表删除一个元组，造成SC表中某些元组的Sno属性的值在表Student中找不到一个元组，其Sno属性的值与之相等。</font></p>
<p><font color = green>4.修改Student表中一个元组的Sno属性，造成SC表中某些元组的Sno属性的值在表Student中找不到一个元组，其Sno属性的值与之相等。</font></p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = red>上述的不一致发生时，系统可以采用以下的策略加以处理。</font></p>
<ul>
<li><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">1.拒绝（NO ACTION）执行</span>
<ul>
<li>不允许该操作执行。该策略一般设置为默认策略。</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">2.级连（CASCADE)操作</span>
<ul>
<li>当删除或修改被参照表（Student)的一个元组造成了与参照表（SC)的不一致，则删除或修改参照表中的所有造成不一致的元组。<br />
例如，删除Student表中的元组，Sno值为14042401，则从要SC表中级连删除SC.Sno=‘14042401’的所元组。</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">3.设置为空值</span></p>
<ul>
<li>
<p>当删除或修改被参照表的一个元组时造成了不一致，则将参照表中的所有造成不一致的元组的对应属性设置为空值。</p>
<ul>
<li>
<p><font color = green>示例：</font></p>
<blockquote>
<p>例如，有下面2个关系<br />
学生（学号，姓名，性别，专业号，年龄）<br />
专业（专业号，专业名）<br />
学生关系的“专业号”是外码，因为专业号是专业关系的主码。</p>
<p>假设专业表中某个元组被删除，专业号为12，按照设置为空值的策略，就要把学生表中专业号=12的所有元组的专业号设置为空值。这对应了这样的语义：某个专业删除了，该专业的所有学生专业未定，等待重新分配专业。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE SC</span><br><span class="line">	      (Sno CHAR(9) NOT NULL,</span><br><span class="line">	       Cno CHAR(4) NOT NULL,</span><br><span class="line">	       Grade SMALLINT,</span><br><span class="line">           /*在表级定义实体完整性*/</span><br><span class="line">	       PRIMARY KEY(Sno,Cno),			 </span><br><span class="line">	       /*在表级定义参照完整性*/</span><br><span class="line">           FOREIGN KEY(Sno) REFERENCES Student(Sno)	 </span><br><span class="line">	       /*当删除student表中的元组时，级连删除SC表中相应的元组*/</span><br><span class="line">           ON DELETE CASCADE	</span><br><span class="line">           /*当更新student表中的Sno时，级连更新SC表中相应的元组*/</span><br><span class="line">	       ON UPDATE CASCADE,    </span><br><span class="line">           /*在表级定义参照完整性*/</span><br><span class="line">	       FOREIGN KEY(Cno) REFERENCES Course(Cno) </span><br><span class="line">	       /*当删除course表中的元组造成了与SC表不一致时拒绝删除*/</span><br><span class="line">           ON DELETE NO ACTION	</span><br><span class="line">	       /*当更新course表中的cno时，级连更新SC表中相应的元组*/</span><br><span class="line">           ON UPDATE CASCADE,    </span><br><span class="line">	       );</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = red>示例：</font></p>
<p>std3表结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table std3 (</span><br><span class="line">     id number(6) ,</span><br><span class="line">     name varchar(200) constraint std3_name_nn not null,</span><br><span class="line">     score number(10,2) ,</span><br><span class="line">     email varchar(20) ,   -- 表级约束</span><br><span class="line">     constraint std3_email_uk unique(email) ,</span><br><span class="line">     constraint std3_id_pk primary key(id)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>std3中数据如下：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/ge38zfuXOaq9.png?imageslim" alt="zxk" /></p>
<p>std5表结构（外键级联删除）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table std5 (</span><br><span class="line">     id number(6) ,</span><br><span class="line">     name varchar(200) constraint std4_name_nn not null,</span><br><span class="line">     score number(10,2) ,</span><br><span class="line">     email varchar(20) ,</span><br><span class="line">     friend_id number(6) ,   -- 表级约束</span><br><span class="line">     constraint std5_email_uk unique(email) ,</span><br><span class="line">     constraint std5_id_pk primary key(id) ,</span><br><span class="line">     constraint std5_friend_id_fk foreign key(friend_id) references std3(id) on delete cascade</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<br/>
<p>std5中数据如下：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/OSr7Vl9hrWdO.png?imageslim" alt="zxk" /></p>
<br/>
<p>std6表结构（外键级联删除制空）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table std6 (</span><br><span class="line">     id number(6) ,</span><br><span class="line">     name varchar(200) constraint std6_name_nn not null,</span><br><span class="line">     score number(10,2) ,</span><br><span class="line">     email varchar(20) ,</span><br><span class="line">     friend_id number(6) , -- 表级约束</span><br><span class="line">     constraint std6_email_uk unique(email) ,</span><br><span class="line">     constraint std6_id_pk primary key(id) ,</span><br><span class="line">     constraint std6_friend_id_fk foreign key(friend_id) references std3(id) on delete set null</span><br><span class="line">     )</span><br></pre></td></tr></table></figure>
<p>std6中数据如下：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/TIy5Gr4FLKoa.png?imageslim" alt="zxk" /></p>
<br/>
<p><font color = green size = 4>级联操作:</font></p>
<ul>
<li>
<p>此时删除std3中‘300001’号数据以后：</p>
<p>std5表：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/M1SrQ6xtkTU4.png?imageslim" alt="zxk" /></p>
<p>std6表：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200308/hQvzuhtFAqHa.png?imageslim" alt="zxk" /></p>
<p><font color = green>注：级联删除会删除相关联子表中的数据，而级联制空会将子表中相关联的数据置空而不会删除</font></p>
</li>
</ul>
</li>
</ul>
<br/>
<h4 id="3用户定义的完整性"><a class="markdownIt-Anchor" href="#3用户定义的完整性"></a> 3）用户定义的完整性</h4>
<p><font color = green >1.属性上的约束条件的定义</font></p>
<blockquote>
<p>在CREATE TABLE 中定义属性的同时可以根据应用要求，定义属性上的约束条件，即属性值限制，包括：</p>
<ol>
<li><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">列值非空（NOT NULL短语）</span></li>
<li><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">列值唯一（UNIQUE短语）</span></li>
<li><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">检查列值是否满足一个布尔表达式（CHECK语句）</span></li>
</ol>
</blockquote>
<br/>
<ul>
<li>
<p><font color = blue>不允许取空值</font></p>
<ul>
<li>
<p>在定义SC表时，说明Sno、Cno、Grade属性不允许取空值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE SC</span><br><span class="line">	(Sno CHAR(9) NOT NULL.	/*Sno属性不允许取空值*/</span><br><span class="line">	 Cno CHAR(4) NOT NULL,	/*Cno属性不允许取空值*/</span><br><span class="line">	 Grade SMALLINT NOT NULL, /*Grade属性不允许取空值*/</span><br><span class="line">/*如果在表级定义实体完整性，隐含了Sno,Cno不允许取空值则在列级不允许取空值的定义就不必写了*/</span><br><span class="line">     PRIMARY KEY(Sno,Cno), 	  </span><br><span class="line">	 ……			/*其它语句省略*/</span><br><span class="line">	);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>列值唯一</font></p>
<ul>
<li>
<p>建立部门表DEPT,要求部门名称Dname列取值唯一，部门编号Deptno列为主码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE DEPT</span><br><span class="line">		(Deptno NUMERIC(2),</span><br><span class="line">		 Dname CHAR(9) UNIQUE,	/*要求Dname列值唯一*/</span><br><span class="line">		 Location CHAR(10),</span><br><span class="line">		 PRIMARY KEY(Deptno)</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>用CHECK短语自定列值应该满足的条件</font></p>
<ul>
<li>
<p>Student 表的Ssex只允许取“男”或“女”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Student</span><br><span class="line">		(Sno CHAR(9) PRIMARY KEY,		/*在列级定义主码*/</span><br><span class="line">		 Sname CHAR(8) NOT NULL,		/*Sname属性不允许取空值*/</span><br><span class="line">		 Ssex CHAR(2) CHECK(Ssex IN (&#x27;男&#x27;,&#x27;女&#x27;)),	/*性别属性Ssex只允许取’男‘或’女‘*/</span><br><span class="line"> 		 Sage SMALLINT,</span><br><span class="line">		 Sdept CHAR(20)</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>SC表的Grade的值应该在0至100之间。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE SC</span><br><span class="line">	     (Sno CHAR(9) NOT NULL,</span><br><span class="line"> 	      Cno CHAR(4) NOT NULL,</span><br><span class="line">	      Grade SMALLINT CHECK(Grade&gt;=0 AND Grade&lt;=100), 	</span><br><span class="line">          PRIMARY KEY (Sno,Cno),</span><br><span class="line">	      FOREIGN KEY(Sno) REFERENCES Student(Sno),</span><br><span class="line">	      FOREIGN KEY(Cno) REFERENCES Course(Cno)</span><br><span class="line"> 	     );</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>元组上的约束条件的定义：</font></p>
<blockquote>
<p>与属性上约束条件的定义类似，在CREATE TABLE语句中可以用CHECK短语定义元组上的约束条件，即元组级的限制。同属性值限制相比，元组级的限制可以设置不同属性之间的取值的相互约束条件。</p>
</blockquote>
<ul>
<li>
<p>当学生的性别是男时，其名字不能以Ms.打头。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Student</span><br><span class="line">		   (Sno CHAR(9),</span><br><span class="line">		    Sname CHAR(8) NOT NULL,</span><br><span class="line">		    Ssex CHAR(2),</span><br><span class="line">		    Sage SMALLINT,</span><br><span class="line">		    Sdept CHAR(20),</span><br><span class="line">		    PRIMARY KEY(Sno),</span><br><span class="line">            /*定义了元组中Sname和Ssex两个属性值之间的约束条件*/</span><br><span class="line">		    CHECK(Ssex=&#x27;女&#x27; OR Sname NOT LIKE &#x27;Ms.%&#x27;)	</span><br><span class="line">		   );</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<br/>
<h4 id="4完整性约束命名子句"><a class="markdownIt-Anchor" href="#4完整性约束命名子句"></a> 4）完整性约束命名子句</h4>
<ul>
<li><font color = green size = 4>定义：</font>以上讲解的完整性约束约束条件都在CHECK TABLE 语句中定义。SQL还在CHECK TABLE 语句中提供了完整性约束命名子句CONSTRAINT，用来对完整性约束条件命名。从而可以灵活地增加、删除一个完整性约束条件。</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>完整性约束条件命名子句：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CONSTRAINT &lt;完整性约束条件名&gt;[PRIMARY KEY 短语|FOREIGN KEY 短语|CHECK 短语]</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p>建立学生登记表Student，要求学号在90000-99999之间，姓名不能取空值，年龄小于30，性别只能是’男‘或’女‘。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE Student</span><br><span class="line">		(Sno NUMERIC(6),</span><br><span class="line">  		 CONSTRAINT C1 CHECK(Sno BETWEEN 90000 AND 99999),</span><br><span class="line">		 Sname CHAR(20),</span><br><span class="line">		 CONSTRAINT C2 CHECK(Sname NOT NULL),</span><br><span class="line">		 Sage NUMERIC(3),</span><br><span class="line">		 CONSTRAINT C3 CHECK(Sage&lt;30),</span><br><span class="line">		 Ssex CHAR(2),</span><br><span class="line">		 CONSTRAINT C4 CHECK(Ssex IN(&#x27;男&#x27; ,&#x27;女&#x27;)),</span><br><span class="line">		 CONSTRAINT StudentKey PRIMARY KEY(Sno)</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p>建立教师表TEACHER,要求每个教师的应发工资不低于3000元；应发工资实际上就是实发工资列Sal与扣除项Deduct之和。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE TEACHER</span><br><span class="line">		(Eno NUMERIC(4) PRIMARY KEY,</span><br><span class="line">		 Ename CHAR(10),</span><br><span class="line">		 Job CHAR(8),</span><br><span class="line"> 		 Sal NUMERIC(7,2),</span><br><span class="line">		 Deduct NUMERIC(7,2),</span><br><span class="line">		 Deptno NUMERIC(2),</span><br><span class="line">		 CONSTRAINT EMPFKey FOREIGN KEY(Deptno) REFERENCES DEPT(Deptno),</span><br><span class="line">		 CONSTRAINT C1 CHECK (Sal+Deduct &gt;= 3000)</span><br><span class="line">		);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>修改表中完整性限制：</font></p>
<blockquote>
<p>可以使用ALTER TABLE语句修改表中的完整性限制；去掉Student表中对性别的限制。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Student</span><br><span class="line">DROP CONSTRAINT C4;</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p>修改表Student中的约束条件，要求学号改为900000-999999之间，年龄由小于30改为小于40.（<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">可以先删除原来的约束条件，再增加新的约束条件</span>）</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE Student</span><br><span class="line">DROP CONSTRAINT C1;</span><br><span class="line">ALTER TABLE Student</span><br><span class="line">ADD CONSTRAINT C1 CHECK (Sno BETWEEN 900000 AND 999999),</span><br><span class="line">ALTER TABLE Student</span><br><span class="line">DROP CONSTRAINT C3;</span><br><span class="line">ALTER TABLE Student</span><br><span class="line">ADD CONSTRAINT C3 CHECK(Sage&lt;40);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<h4 id="5触发器"><a class="markdownIt-Anchor" href="#5触发器"></a> 5）触发器</h4>
<ul>
<li>
<p><font color = green size = 4>定义：</font>trigger，是指事先为某张表绑定一段代码，当表中的某些内容发生改变（增、删、改）的时候，系统会自动触发代码并执行。</p>
<br/>
<p><font color = green>触发器包含三个要素，分别为：</font></p>
<blockquote>
<p>事件类型：增删改，即insert、delete和update；</p>
<p>触发时间：事件类型前和后，即before和after；</p>
<p>触发对象：表中的每一条记录（行），即整张表。</p>
<p>每张表只能拥有一种触发时间的一种事件类型的触发器，即每张表最多可以拥有 6 种触发器。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>创建触发器：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建触发器基本语法</span></span><br><span class="line">delimiter $  <span class="comment">-- 自定义符号;临时修改语句结束符，在后续语句中只有遇到自定义符号才会结束语句</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> <span class="operator">+</span> 触发器名称 <span class="operator">+</span> 触发器时间 <span class="operator">+</span> 事件类型 <span class="keyword">on</span> 表名 <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span></span><br><span class="line"><span class="keyword">begin</span> <span class="comment">-- 代表触发器内容开始</span></span><br><span class="line"><span class="comment">-- 触发器内容主体，每行用分号结尾</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment">-- 代表触发器内容结束</span></span><br><span class="line">$  <span class="comment">-- 自定义符号;用于结束语句</span></span><br><span class="line">delimiter ; <span class="comment">-- 恢复语句结束符</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>trigger_name : 触发器名称，用户自行指定<br />
trigger_time： 触发时机，取值BEFORE（之前）、AFTER（之后）<br />
trigger_event : 出发事件，INSERT、UPDATE、DELETE。（插入、更新、删除）<br />
tbl_name : 需要建立触发器的表名。<br />
trigger_stmt : 触发程序体，可以是一条SQL语句或是BEGIN和END包含的索条语句</p>
</blockquote>
<br/>
<ul>
<li>
<p><font color = blue>BEGIN…END详解：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">[statement_list]</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">statement_list 使用方法：</span><br />
statement_list 代表一个或多个语句的列表，列表内的每条语句都必须用分号（;）来结尾(默认值)<br />
我们可以使用DELIMITERE指定自定义的定界符。<br />
<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">DELIMITER new_delemiter：</span><br />
new_delemiter 可以设为1个或多个长度的符号，默认的是分号（;），我们可以把它修改为其他符号，如：DELIMITER $(注意：我们修改了定界符使用完了，记得修改回来DELIMITER ；)</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER $</span><br><span class="line">create trigger tri_stuInsert after insert</span><br><span class="line">on student for each row</span><br><span class="line">begin</span><br><span class="line">declare c int;</span><br><span class="line">set c = (select stucount from class where classID = new.classID);</span><br><span class="line">update class set stucount = c+1 where classID = new.classID;</span><br><span class="line">end $</span><br><span class="line">DELIMITER;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>NEW与OLD关键字：</font></p>
<p>该关键字，表示触发了触发器的那一行数据。</p>
<blockquote>
<p>INSERT触发器中,NEW用来表示将要(BEFORE)或已经(AFTER)插入的新数据。<br />
UPDATE触发器中，OLD用来表示将要或已经被修改的原数据，NEW用来表示将要或已经修改为的新数据。<br />
DELETE触发器中，OLD用来表示将要或已经被删除的原数据。</p>
</blockquote>
<blockquote>
<p><font color = dark>使用方法：</font></p>
<p>NEW.columnName（columnName为相应数据表某一列名）<br />
另外，OLD是只读的，而NEW则可以在触发器中使用SET赋值，这样不会再次触发触发器，造成循环调用（如每插入一个学生前，都在其学号前加&quot;2013&quot;）。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>具体示例：</font></p>
<p><font color = blue>1. 当在删除test表的数据时，会在对应的member对应的id中添加name字段值为world。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> test_tt AFTER <span class="keyword">DELETE</span> <span class="keyword">ON</span> `test`  <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> s <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> s <span class="operator">=</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">member</span>` <span class="keyword">SET</span> `name` <span class="operator">=</span> s <span class="keyword">WHERE</span> id <span class="operator">=</span> OLD.id;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue>2. 在删除test表中的一行数据时，能够把删除之前的name数据写入member表中去。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> test_tt AFTER <span class="keyword">DELETE</span> <span class="keyword">ON</span> `test`  <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> `<span class="keyword">member</span>` <span class="keyword">SET</span> `name` <span class="operator">=</span> old.name <span class="keyword">WHERE</span> id <span class="operator">=</span> OLD.id;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>判断值后调用触发器：</font></p>
<p><font color = blue>当插入时间小时为20时，对数据进行插入</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> IF <span class="keyword">EXISTS</span> `ins_info`;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> ins_info</span><br><span class="line">after <span class="keyword">insert</span> <span class="keyword">on</span> nhfxelect <span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	if <span class="keyword">HOUR</span>(new.RecordTime)<span class="operator">=</span><span class="string">&#x27;20&#x27;</span> <span class="keyword">then</span>  </span><br><span class="line">	<span class="keyword">insert</span> <span class="keyword">into</span> nhfxbyhour (UnitDepName, UnitDepCode, ElectCost, TimeJG, RecordTime)</span><br><span class="line">		<span class="keyword">values</span>( <span class="string">&#x27;数统学院&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, new.USERKWH, <span class="string">&#x27;20&#x27;</span>, new.RecordTime);</span><br><span class="line">	<span class="keyword">end</span> if;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>再如更新触发器，如果设置的值为某个范围，才进行操作或性别为&quot;男&quot;或&quot;女&quot;才进行操作。</p>
<p><font color = red>基本语法：</font></p>
<p>if 判断条件 then<br />
sql语句;<br />
end if；</p>
</blockquote>
</li>
</ul>
<br/>
<h3 id="2-create-views创建视图"><a class="markdownIt-Anchor" href="#2-create-views创建视图"></a> 2. Create Views(创建视图)</h3>
<h4 id="1视图功能"><a class="markdownIt-Anchor" href="#1视图功能"></a> 1）视图功能</h4>
<ul>
<li><font color = green>视图（子查询）：</font>是从一个或多个表导出的虚拟的表，其内容由查询定义。具有普通表的结构，但是不实现数据存储。</li>
</ul>
<br/>
<ul>
<li><font color = green>对视图的修改：</font>单表视图一般用于查询和修改，会改变基本表的数据，多表视图一般用于查询，不会改变基本表的数据。</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green>优点：</font></p>
<ul>
<li>
<p>简化了操作，把经常使用的数据定义为视图。</p>
<p>我们在使用查询时，<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">在很多时候我们要使用聚合函数，同时还要 显示其它字段的信息，可能还会需要关联到其它表，这时写的语句可能会很长，或如果这个动作频繁发生的话，我们可以创建视图</span>，这以后，我们只需要select * from view就可以啦，这样很方便。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p>安全性，用户只能查询和修改能看到的数据。</p>
<p>因为视图是虚拟的，物理上是不存在的，只是存储了数据的集合，我们可以将基表中重要的字段信息，可以不通过视图给用户，视图是动态的数据的集合，数据是随着基表的更新而更新。同时，用户对视图不可以随意的更改和删除，可以保证数据的安全性。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p>逻辑上的独立性，屏蔽了真实表的结构带来的影响。</p>
<p><font color = blue>视图可以使应用程序和数据库表在一定程度上独立。如果没有视图，应用一定是建立在表上的。有了视图之后，程序可以建立在视图之上，从而程序与数据库表被视图分割开来。</font></p>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green>缺点: </font></p>
<ul>
<li>
<p>性能差</p>
<p>数据库必须把视图查询转化成对基本表的查询，如果这个视图是由一个复杂的多表查询所定义，那么，即使是视图的一个简单查询，数据库也要把它变成一个复杂的结合体，需要花费一定的时间。</p>
</li>
</ul>
<br/>
<ul>
<li>
<p>修改限制</p>
<p>当用户试图修改视图的某些信息时，数据库必须把它转化为对基本表的某些信息的修改，对于简单的视图来说，这是很方便的，<font color = green>但是，对于比较复杂的视图，可能是不可修改的。</font></p>
</li>
</ul>
</li>
</ul>
<br/>
<h4 id="2创建视图"><a class="markdownIt-Anchor" href="#2创建视图"></a> 2）创建视图</h4>
<ul>
<li>
<p><font color = green size = 4>创建(或修改)视图：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE VIEW 视图名(列1，列2...)</span><br><span class="line"> AS SELECT (列1，列2...)</span><br><span class="line"> FROM ...</span><br><span class="line"> [With Check Option];</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE OR REPLACE VIEW 视图名 </span><br><span class="line">AS SELECT [...] FROM [...];</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE VIEW Student（Sno，Sname，Ssex，Sage，Sdept）</span><br><span class="line">AS</span><br><span class="line">SELECT SX.Sno，SX.Sname，SY.Ssex，SX.Sage，SY.Sdept</span><br><span class="line">FROM SX，SY</span><br><span class="line">WHERE SX.Sno=SY.Sno；</span><br></pre></td></tr></table></figure>
<br/>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看10号部门所有的员工信息,选择所有列则无需在view名后添加列名</span><br><span class="line">Create or replace view v_emp as select * from emp where deptno=10;</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li><font color = dark>参数：</font>[with check  option]可选项，防止用户对数据插入、删除、更新时操作了视图范围外的基本表的数据。</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>组成视图的属性列名或者全部省略或者全部指定，没有第三种选择。如果省略了视图的各个属性列名，则隐含该视图由子查询中SELECT子句目标列中的诸字段组成。但在下列三种情况下必须明确指定组成视图的所有列名：</font></p>
<blockquote>
<p>（1）某个目标列不是单纯的属性名，而是聚集函数或列表达式；<br />
（2）多表连接时选出了几个同名列作为视图的字段；<br />
（3）需要在视图中为某个列启用新的更合适的名字。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>示例：</font></p>
<p><font color = blue>1. 建立信息系选修了1号课程的学生的视图（包括学号、姓名、成绩）。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> IS_SI（Sno, Sname, Grade）</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Student.Sno, Sname，Grade </span><br><span class="line"><span class="keyword">FROM</span> Student, SC</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span><span class="keyword">AND</span></span><br><span class="line">Student.Sno<span class="operator">=</span>SC.Sno <span class="keyword">AND</span></span><br><span class="line">SC.Cno<span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green >由于视图IS_S1的属性列中包含了Student表与SC表的同名列Sno，所以必须在视图名后面明确说明视图的各个属性列名。</font></p>
</blockquote>
<br/>
<p><font color = blue>2. 定义一个反映学生出生年份的视图。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> BT_S(Sno,Sname,Sbirth)</span><br><span class="line"><span class="keyword">AS</span> <span class="keyword">SELECT</span> Sno,Sname,<span class="number">2014</span><span class="operator">-</span>Sage </span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green >这里视图BTS是一个带表达式的视图。视图中的出生年份值是通过计算得到的。</font></p>
</blockquote>
<br/>
<p><font color = blue>3. 将学生的学号及平均成绩定义为一个视图。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> S_G（Sno, Gavg）</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno, AVG（Grade）</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green>由于AS子句中SELECT语句的目标列平均成绩是通过作用聚集函数得到的，所以CREATE VIEW中必须明确定义组成S_G视图的各个属性列名。SG是一个分组视图。</font></p>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>视图运用(查询)：</font></p>
<p><font color = blue size= 4>1. 使用视图和使用表完全一样，只需要把视图当成一张表就OK了；视图是一张虚拟表。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 从视图中检索数据</span><br><span class="line">select * from v_student;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size= 4>2. 从数据字典中取出视图的定义，把定义中的子查询和用户的查询结合起来，转换成等价的对基本表的查询，然后再执行修正了的查询。这一转换过程称为视图消解（view resolution）。</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 消解过程：</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> IS_Student</span><br><span class="line"><span class="keyword">WHERE</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 相当于</span></span><br><span class="line"><span class="keyword">SELECT</span> Sno,Sage</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span> <span class="keyword">AND</span> Sage<span class="operator">&lt;</span><span class="number">20</span>;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue size= 4>3. 在一般情况下，视图查询的转换是直截了当的。但有些情况下，这种转换不能直接进行，查询时就会出现问题。</font></p>
<ul>
<li>
<p><font color = green>在SG视图中查询平均成绩在90分以上的学生<br />
学号和平均成绩，语句为</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> S_G</span><br><span class="line"><span class="keyword">WHERE</span> Gavg<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><font color = green>定义SG视图的子查询为</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><font color = green>将本例中的查询语句与定义SG视图的子查询结合，形成下列查询语句：</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red size = 4>注意：</font></p>
<p><font color = green>因为WHERE子句中是不能用聚集函数作为条件表达式的，因此执行此修正后的查询将会出现语法错误。正确转换的查询语句应该是：</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sno,<span class="built_in">AVG</span>(Grade)</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sno</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(Grade)<span class="operator">&gt;=</span><span class="number">90</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<br/>
<h4 id="3修改视图"><a class="markdownIt-Anchor" href="#3修改视图"></a> 3）修改视图</h4>
<ul>
<li>
<p><font color = green size = 4>视图与数据变更：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INSERT INTO v_order(pid,pname,price) VALUES(&#x27;p010&#x27;,&#x27;柴油&#x27;,&#x27;34&#x27;);</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*将基表的ename字段修改了*/</span><br><span class="line">update v_emp set ename=&#x27;kitty&#x27; where empno=7839;</span><br><span class="line"></span><br><span class="line">/*将视图包含的deptno均修改为20，在基表中修改*/</span><br><span class="line">update v_emp set deptno = 20;</span><br><span class="line"></span><br><span class="line">/*结果集为空，基表中不存在10号部门了*/</span><br><span class="line">select * from v_emp where deptno = 10;</span><br><span class="line"></span><br><span class="line">/*with check option保证视图查询条件不被修改，但其他字段可以修改*/</span><br><span class="line">create view v_emp as select * from emp where deptno = 10 with check option;</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = dark size = 4>With check option作用：</font></p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> IS_student</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> sno,sname,sage</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> sdept<span class="operator">=</span><span class="string">&#x27;IS&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> option;   </span><br><span class="line"></span><br><span class="line"><span class="comment">--- 加上了with check option;后，不能执行以下插入操作：</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> is_student</span><br><span class="line"><span class="keyword">values</span>(<span class="string">&#x27;95100&#x27;</span>,<span class="string">&#x27;李娜&#x27;</span>,<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = green>什么原因？不加上with check option则可以！</font></p>
<blockquote>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">with check option可以这么解释：</span></p>
<p>通过视图进行的修改，必须也能通过该视图看到修改后的结果。比如你insert，那么加的这条记录在刷新视图后必须可以看到；如果修改，修改完的结果也必须能通过该视图看到；如果删除，当然只能删除视图里有显示的记录。</p>
</blockquote>
<p><font color = green>而你只是查询出sdept='is’的纪录，你插入的根本不符合sdept='is’呀，所以就不行</font></p>
<br/>
<p><img data-src="https://image.zxkidea.top/blog/20200306/W2uyh5b4rgFC.png?imageslim" alt="zxk" /></p>
<br/>
<p><font color = dark size = 4>可更新视图条件：</font></p>
<blockquote>
<p>（1）若视图是由两个以上基本表导出的，则此视图不允许更新。<br />
（2）若视图的字段来自字段表达式或常数，则不允许对此视图执行INSERT和UPDATE操作，但允许执行			DELETE操作。<br />
（3）若视图的字段来自聚集函数，则此视图不允许更新。<br />
（4）若视图定义中含有GROUP BY子句，则此视图不允许更新。<br />
（5）若视图定义中含有DISTINCT短语，则此视图不允许更新。<br />
（6）若视图定义中有嵌套查询，并且内层查询的FROM子句中涉及的表也是导出该视图的基本表，则此视			图不允许更新。</p>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>删除视图：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop view v_emp; -- 删除视图（DDL操作）</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = red size = 4>注意事项：</font></p>
<ul>
<li>
<p>通过视图可以修改基表数据，但视图一般只做查询。</p>
</li>
<li>
<p><font color = dark>with check option</font>关键词用于保证视图的查询条件不被修改，但其他字段可以修改。</p>
</li>
</ul>
</li>
</ul>
<br/>
<h2 id="ch8-indexing索引"><a class="markdownIt-Anchor" href="#ch8-indexing索引"></a> Ch8. Indexing(索引)</h2>
<h3 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1. 定义</h3>
<p><font color = green size = 4>系统根据某种算法，将已有的数据（未来可能新增的数据），单独建立一个文件，这个文件能够实现快速匹配数据，并且能够快速的找到对应的记录，几乎所有的索引都是建立在字段之上的。</font></p>
<br/>
<ul>
<li>
<p><font color = green size = 4>数据库索引有多种类型，常见索引包括顺序文件上的索引、B+树索引、散列（hash）索引、位图索引等</font></p>
<blockquote>
<ol>
<li>
<p>顺序文件上的索引是针对按指定属性值升序或降序存储的关系，在该属性上建立一个顺序索引文件，索引文件由属性值和相应的元组指针组成。</p>
</li>
<li>
<p>B+树索引是将索引属性组织成B+树形式，B+树的叶结点为属性值和相应的元组指针。B+树索引具有动态平衡的优点。</p>
</li>
<li>
<p>散列索引是建立若干个桶，将索引属性按照其散列函数值映射到相应桶中，桶中存放索引属性值和相应的元组指针。散列索引具有查找速度快的特点。位图索引是用位向量记录索引属性中可能出现的值，每个位向量对应一个可能值。</p>
</li>
</ol>
</blockquote>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>常用的索引类型：普通索引<br />
、唯一索引<br />
、组合索引</font></p>
<blockquote>
<p>普通索引和唯一索引的创建方式有三种，分别是直接创建、修改表结构创建、创建表时同时创建，注意组合索引的组合规则是最左前缀索引</p>
</blockquote>
</li>
</ul>
<br/>
<h3 id="2-索引的意义"><a class="markdownIt-Anchor" href="#2-索引的意义"></a> 2. 索引的意义：</h3>
<blockquote>
<p>提升查询数据的效率；</p>
<p>约束数据的有效性。</p>
</blockquote>
<br/>
<ul>
<li><font color = green size = 4>但是增加索引是有前提条件的，这是因为索引本身会产生索引文件（有的时候可能会比数据本身都大），因此非常耗费磁盘空间。</font></li>
<li><font color = green size = 4>如果某个字段需要作为查询的条件经常使用，可以使用索引；</font></li>
<li><font color = green size = 4>如果某个字段需要进行数据的有效性约束，也可以使用索引（主键或唯一键）。</font></li>
</ul>
<br/>
<h3 id="3-索引的类型"><a class="markdownIt-Anchor" href="#3-索引的类型"></a> 3. 索引的类型</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 直接创建索引</span><br><span class="line">CREATE INDEX index_name ON table(column(length))</span><br><span class="line"></span><br><span class="line">-- 创建唯一索引</span><br><span class="line">CREATE UNIQUE INDEX index_name ON table(column(length)) </span><br><span class="line"></span><br><span class="line">-- 组合索引</span><br><span class="line">ALTER TABLE article ADD INDEX index_titme_time (title(50),time(10))</span><br><span class="line"></span><br><span class="line">-- 建立这样的组合索引，其实是相当于分别建立了下面两组组合索引：</span><br><span class="line">–title,time</span><br><span class="line"></span><br><span class="line">–title</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">DROP INDEX index_name ON table</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red>注意：</font></p>
<p>为什么没有time这样的组合索引呢？这是因为MySQL组合索引“最左前缀”的结果。<br />
简单的理解就是只从最左面的开始组合。并不是只要包含这两列的查询都会用到该组合索引</p>
</blockquote>
<br/>
<h3 id="4-索引的优化"><a class="markdownIt-Anchor" href="#4-索引的优化"></a> 4. 索引的优化</h3>
<ul>
<li><font color = green size = 4>何时使用聚集索引或非聚集索引？</font></li>
<li><font color = green size = 4>索引不会包含有NULL值的列</font></li>
<li><font color = green size = 4>使用短索引</font></li>
<li><font color = green size = 4>索引列排序</font></li>
<li><font color = green size = 4>like语句操作</font></li>
<li><font color = green size = 4>不要在列上进行运算</font></li>
</ul>
<blockquote>
<p><font color = red>总结：</font>MySQL只对以下操作符才使用索引：&lt;,&lt;=,=,&gt;,&gt;=,between,in,以及某些时候的like(不以通配符%或_开头的情形)。</p>
</blockquote>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>考研</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>J1900软路由方案全面指南</title>
    <url>/posts/6224fb7a.html</url>
    <content><![CDATA[<p>主要设备材料：J1900(双千兆网口，8G内存)、240G sata SSD(NAS)、128 msata SSD(PVE)、移动宽带。</p>
<br/>
<p>鉴于本方案过于庞杂，中间的过程会使用别人教程来缩减篇幅，可以自行学习验证，主要是提供软路由搭建和使用内网服务的整体思路，也是记录中间踩坑和搜索学习的整个过程。</p>
<hr />
<p>由于我们家是移动宽带，所以是大内网的环境，即所谓的访问<code>ip138.com</code>显示的IP地址与路由器的出口IP地址不一致，并且移动不提供公网IP，这就意味着我们不能使用DDNS的方式从外网访问家中内网的服务。如果是电信的宽带，可以问客服要一下公网IP，理由可以是装摄像头的需要，这样后面就可以使用DDNS了，而不需要使用内网穿透的方式。</p>
<span id="more"></span>
<br/>
<p>我们第一步需要将光猫改桥接，这样可以极大的发挥路由器的性能，而不会限于光猫的路由性能瓶颈。由于我家的宽带已经装了很久了，看网上的帖子说和移动客服或者装宽带的师傅改桥接的方式好像不好办，所以我直接上了万能的小黄鱼找人解决了光猫的超级密码的问题（大约3元左右），进入了光猫的后台，将原来的路由模式改为桥接模式，同时关闭DHCP功能，若是不知道家中宽带的账号和密码，此时在页面中的<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">密码</span>一栏右击——&gt;检查，将弹出的开发者模式下的<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">html</span>代码中的<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">text</span>变量值由<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">password</span>改为<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">text</span>，即可看到设置的密码，记住后面拨号要用。登录路由器的后台，一般是<code>192.168.1.1</code>，不同路由器品牌的IP可能不同，可以自行百度，将路由器改为拨号上网的模式PPoE，并且输入自己家宽带的账号密码即可，部分流程可以参考<a href="https://www.bilibili.com/video/BV15v411B71W/?spm_id_from=0.0.header_right.history_list.click">这里</a>。</p>
<br/>
<h2 id="安装pve"><a class="markdownIt-Anchor" href="#安装pve"></a> 安装PVE</h2>
<p>准备8G的装机U盘，一根网线，一根VGA/HDMI线和显示器或者采集卡+笔记本电脑，键盘鼠标或者pdd上面的20多元无线的无线键鼠；</p>
<p>具体步骤是：</p>
<ol>
<li>使用ventory将PVE固件烧到U盘中，备用装机；</li>
<li>安装中，将PVE装到你想要的盘中，我这边有两个盘，分别是128G的msata和240G的2.5 sata，msata主要用于装PVE，2.5 sata是用于装NAS；同时设置面板的IP地址，最好与你的内网IP地址一致，我的内网网关是<code>192.168.31.1</code>，所以我设置为<code>192.168.31.200</code>，所以内网的访问地址是<code>https://192.168.31.200:8006</code>，若是你设置完想要再次修改，可以参考<a href="http://www.naxs.cn/zcjh/13705.html">这里</a>。同时注意面板中连接的网口<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">enp1s0</span>（可能是其他的网口），整个安装流程可以参考<a href="https://www.bilibili.com/video/BV1nW4y1j7TC/?spm_id_from=333.788&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>和<a href="https://www.bilibili.com/video/BV1Br4y1N7VK/?vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>。</li>
<li>安装好PVE后，建议更换PVE软件仓库源和CT模板（LXC）源为国内源。具体分为两种方式来实现，一种是使用PVE tools来修改仓库源，具体操作可以参考<a href="https://www.bilibili.com/video/BV1nW4y1j7TC/?spm_id_from=333.788&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>，另外也可以通过PVE tools来进行其他的配置，可以自行研究；另一个是修改CT模板源，具体操作可以参考<a href="https://www.cnblogs.com/HGNET/p/15881895.html">这里</a>，同时这种方式也可以修改仓库源。此外，如果你的机器支持PCI硬件直通也需要在这里通过PVE tools进行设置。</li>
<li>可以参考一下<a href="https://www.bilibili.com/video/BV1GY41177Es/?spm_id_from=333.999.0.0&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>理解下系统设备名，软路由设备名的概念，我的网络拓扑大概如下图所示，由于我是直接做旁路由的，所以没有WAN口，直接通过LAN口进行桥接，</li>
</ol>
<p><img data-src="https://image.zxkidea.top/docsify/20230112/raw9FR9uP6XI.png?imageslim" alt="旁路由模式拓扑图" /></p>
<p>网络结构如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------------------------+</span><br><span class="line">| LXC                                                            |</span><br><span class="line">|       +------------------------------------------------+       |</span><br><span class="line">|       | OpenWrt                                        |       |</span><br><span class="line">|       |     +--------+     +--------+    +--------+    |       |</span><br><span class="line">|       |     | br-lan |←---→|  eth0  |    | enp1s0 |    |       |</span><br><span class="line">|       |     +--------+     +--------+    +--------+    |       |</span><br><span class="line">|       |     192.168.31.2       ↑             ↑         |       |</span><br><span class="line">|       +------------------------|-------------|---------+       |</span><br><span class="line">|                              veth          phys                |</span><br><span class="line">|................................|.............|.................|</span><br><span class="line">| ProxmoxVE 7.0                  |             |                 |</span><br><span class="line">|                                |             |                 | </span><br><span class="line">|                                ↓             ↓                 |</span><br><span class="line">|               +------+     +--------+     +------+             |</span><br><span class="line">|               |enp4s0|←---→|  vmbr0 |     |enp1s0|             |</span><br><span class="line">|               +------+     +--------+     +------+             |</span><br><span class="line">|                                              ↑                 |</span><br><span class="line">|                                              |                 |</span><br><span class="line">|                                              | lan             |</span><br><span class="line">+----------------------------------------------|-----------------+</span><br><span class="line">                                               ↓</span><br><span class="line">                                           +-------+</span><br><span class="line">                                           |router | 192.168.31.1</span><br><span class="line">                                           +-------+ 硬路由</span><br></pre></td></tr></table></figure>
<br/>
<p>如果是使用WAN口的话可以参考下面的网络拓扑图：</p>
<p><img data-src="https://image.zxkidea.top/docsify/20230112/dxhP52Y81A2U.png?imageslim" alt="双路由模式拓扑图" /></p>
<p>网络结构如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+----------------------------------------------------------------+</span><br><span class="line">| LXC                                                            |</span><br><span class="line">|       +------------------------------------------------+       |</span><br><span class="line">|       | OpenWrt(主)                                    |       |</span><br><span class="line">|       |     +--------+     +--------+    +--------+    |       |</span><br><span class="line">|       |     | br-lan |←---→|  eth0  |    | enp4s0 |    |       |</span><br><span class="line">|       |     +--------+     +--------+    +--------+    |       |</span><br><span class="line">|       |     192.168.1.1        ↑             ↑         |       |</span><br><span class="line">|       +------------------------|-------------|---------+       |</span><br><span class="line">|                              veth          phys                |</span><br><span class="line">|................................|.............|.................|</span><br><span class="line">| ProxmoxVE 7.0                  |             |                 |</span><br><span class="line">|                                |             |                 | </span><br><span class="line">|                                ↓             ↓                 |</span><br><span class="line">|               +------+     +--------+     +------+             |</span><br><span class="line">|               |enp1s0|←---→|  vmbr0 |     |enp4s0|             |</span><br><span class="line">|               +------+     +--------+     +------+             |</span><br><span class="line">|                   ↑                          ↑                 |</span><br><span class="line">|                   |                          |                 |</span><br><span class="line">|                   | lan                      |                 |</span><br><span class="line">+-------------------|--------------------------|-----------------+</span><br><span class="line">                    ↓                          ↓wan</span><br><span class="line">    +----+      +--------+     +----+      +-------+</span><br><span class="line">    | PC |←---→ | switch |←---→| TV |      | modem |光猫桥接</span><br><span class="line">    +----+      +--------+     +----+      +-------+</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<br/>
<p>J1900网口对应：</p>
<table>
<thead>
<tr>
<th>外部识别</th>
<th>系统设备名</th>
<th>软路由内设备名</th>
</tr>
</thead>
<tbody>
<tr>
<td>EHT1(前面)</td>
<td>enp1s0</td>
<td>eth0(桥接) Lan</td>
</tr>
<tr>
<td>ETH0(侧面)</td>
<td>enp4s0</td>
<td>eth1 Wan</td>
</tr>
</tbody>
</table>
<br/>
<p>软路由拓扑图：<br />
<a href="https://www.processon.com/diagraming/63b41f0ee2dd525e28f877e1">拓扑图1</a><br />
<a href="https://www.processon.com/diagraming/63b45a99e2dd525e28f89e0f">拓扑图2</a></p>
<br/>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Tips：</span><br />
服务器定时清理日志：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root进入</span></span><br><span class="line">crontab -e</span><br><span class="line">0 1 * * 1,5 /usr/bin/journalctl --vacuum-size=100M</span><br></pre></td></tr></table></figure>
<br/>
<h2 id="安装openwrt"><a class="markdownIt-Anchor" href="#安装openwrt"></a> 安装OpenWrt</h2>
<p>前面我们安装好PVE后，我们需要在其中安装一下OpenWrt，在恩山论坛了解到将OpenWrt装在PVE的虚拟机中的性能不如容器的性能好，但是容器的方案可能出现一些麻烦，本着折腾的心理我们直接上容器。</p>
<br/>
<p>使用容器安装OpenWrt可以参考<a href="https://blog.csdn.net/hanzheng260561728/article/details/125688877?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166677429016782414918042%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=166677429016782414918042&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-125688877-null-null.142%5Ev62%5Epc_search_tree,201%5Ev3%5Eadd_ask,213%5Ev1%5Econtrol&amp;utm_term=lxc%20openwrt&amp;spm=1018.2226.3001.4187">这里</a>，使用被人烧录好的固件即可，命令的具体参数可以研究一下自行修改，这里比较重要的是修改OpenWrt的IP地址；它的设置取决你想要将OpenWrt作为双路由模式还是主-旁路由模式，这里说一下我的想法，若是作为主路由，建议设置为内网的网关<code>192.168.31.1</code>，硬路由则使用AP的功能；旁路由的话则设置为内网其他的IP地址即可，可以使用DHCP功能，我这边设置的是<code>192.168.31.2</code>，端口的话改成了66端口，由于运营商把网页服务的80和443端口屏蔽了，所以对OpenWrt的访问端口进行更改，可以在uHTTPd内进行更改。</p>
<br/>
<p>关于我使用的命令，记录一下，lxc安装OpenWrt：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pct create 100 <span class="built_in">local</span>:vztmpl/vzdump-lxc-113-2022_05_04-openwrt_laop.tar.zst --rootfs <span class="built_in">local</span>:4 --ostype unmanaged --hostname OpenWrt --<span class="built_in">arch</span> amd64 --cores 2 --memory 2048 --swap 0 --onboot <span class="built_in">yes</span> -net0 bridge=vmbr0,name=eth0</span><br></pre></td></tr></table></figure>
<p>OpenWrt中增加WAN口，可以在<code>vi /etc/config/network</code>增加WAN接口的设置即可，由于我作为旁路由，所以就只有一个<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">lan</span>。</p>
<br/>
<p>具体OpenWrt作为旁路由的防火墙和网络的配置可以参考<a href="https://blog.csdn.net/weixin_42708321/article/details/124720849">这里</a>和<a href="https://www.bilibili.com/video/BV1Gz4y1r791/?vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>中旁路由的设置，双路由的方案可以参考<a href="https://www.bilibili.com/video/BV1Br4y1N7VK/?vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>和<a href="https://www.bilibili.com/video/BV1je4y1W75w/?spm_id_from=0.0.header_right.history_list.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>；如果你有公网IP，则要使用端口转发和DDNS，哪个设备拨号上网，就在设置进行端口转发，DDNS的话使用插件中的AliDDNS或者动态DNS即可，设置完之后使用公网IP+端口的方式就可以访问内网的服务了。如果你没有内网IP的话，就要进行第四章的内网穿透工作。</p>
<br/>
<p>主路由端口转发设置：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>外部端口</th>
<th>内部IP地址</th>
<th>内部端口</th>
</tr>
</thead>
<tbody>
<tr>
<td>Alist</td>
<td>5244</td>
<td>192.168.31.88</td>
<td>5244</td>
</tr>
<tr>
<td>Openwrt</td>
<td>66</td>
<td>192.168.31.2</td>
<td>66</td>
</tr>
<tr>
<td>qinglong</td>
<td>5700</td>
<td>192.168.31.88</td>
<td>5700</td>
</tr>
<tr>
<td>nginx</td>
<td>8888</td>
<td>192.168.31.88</td>
<td>80</td>
</tr>
</tbody>
</table>
<br/>
<p>OpenWrt作为旁路由，内网的设备需要使用其代理上网，则需要将网关设置为其IP地址，DNS也是其IP地址；我将设备网关设置为OpenWrt的IP地址，主要应用是设备和内网的服务<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">出国</span>，还有<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">异地组网</span>，将OpenWrt加入ZeroTier网络，并设置下一跳路由表，使用OpenWrt作为网关的服务和设备就可以和ZeroTier网络中的其他设备互相访问了，这部分内容会在内网穿透部分说明。</p>
<br/>
<p>作为OpenWrt的灵魂，插件的作用举足轻重，我们可以使用其进行出国、去广告、分流、DDNS、ZeroTier异地组网、FRP内网穿透，BT下载等功能。关于出国的可以参考<a href="https://opssh.cn/luyou/72.html">这里</a>，<a href="https://www.kejiwanjia.com/jiaocheng/hardware/luyou/889.html">这里</a>和<a href="https://shiping.date/49.html">这里</a>；去广告的可以参考<a href="https://www.bilibili.com/video/BV1vi4y137MH/?spm_id_from=0.0.header_right.history_list.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>和<a href="https://www.right.com.cn/forum/thread-4084366-1-1.html">这里</a>；</p>
<br/>
<p>此外，还需要在SSR Plus+上的LAN IP访问控制内设置白名单：</p>
<ul>
<li>由于我目前仅需要qinglong服务有外网的需求，则设置白名单，内网主机列表为：192.168.31.88；192.168.31.238(测试机)</li>
<li>内网主机分流列表：192.168.31.88；192.168.31.238；不设置全局代理的LAN IP</li>
<li>不走代理的域名增加 <a href="http://jd.com">jd.com</a>，<a href="http://tencent.com">tencent.com</a> 等</li>
</ul>
<br/>
<h2 id="安装docker"><a class="markdownIt-Anchor" href="#安装docker"></a> 安装Docker</h2>
<p>在PVE中安装Docker需要开启特权容器和嵌套的功能，主要的操作可以参考<a href="https://zhuanlan.zhihu.com/p/260528145">这里</a>，<a href="https://www.bilibili.com/video/BV1M34y1e7SF/?spm_id_from=333.880.my_history.page.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>和<a href="https://www.bilibili.com/video/BV1ED4y1k7kr/?spm_id_from=0.0.header_right.history_list.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>。此外，我们还需要修改LXC的Debian源和Docker的镜像源，具体可以参考<a href="https://gitee.com/spoto/PVE_Generic_AIO/tree/master/1%E3%80%81%E5%88%9B%E5%BB%BA%E5%9F%BA%E4%BA%8ELXC%E7%9A%84Docker%E5%AE%B9%E5%99%A8_%EF%BC%88%E6%9C%AA%E5%AE%8C%E6%88%90%EF%BC%89">这里</a>和<a href="https://www.bilibili.com/video/BV1Ne4y1g7ju/?spm_id_from=333.788&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>。在设置容器镜像源时，我们可以登录<code>cr.console.aliyun.com</code>；点击“创建我的容器镜像”，得到专属加速地址。修改文件<code> /etc/docker/daemon.json</code> 文件，修改为如下形式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">	    &quot;https://xxx.mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://registry.docker-cn.com&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">加载重启docker并查看</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使daemon.json 文件生效</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>
<br/>
<p>同时，我将Docker的IP地址设置为<code>192.168.31.88</code>，网关、DNS设置为OpenWrt的IP地址，这样方面后面ZeroTier异地组网和服务、设备出国。</p>
<ul>
<li>内网的服务想要在大局域网内互通需要将网关和DNS设置为OpenWrt的IP地址；本例下将Docker容器的DNS和网关设置为OpenWrt地址</li>
<li>从公网访问内网服务只要在设备端输入电脑/服务器的内网IP+端口号即可。</li>
</ul>
<br/>
<p>LXC中使用docker：</p>
<ol>
<li>安装portainer：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 10003:8000 -p 10004:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /home/docker/portainer/data:/data portainer/portainer-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问portainer面板可以查看所有Docker服务的运行状况</span></span><br></pre></td></tr></table></figure>
<br/>
<ol start="2">
<li>安装qinglong：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -dit \</span><br><span class="line">-v /home/docker/qinglong:/ql/data \</span><br><span class="line">-p 5700:5700 \</span><br><span class="line">--name qinglong \</span><br><span class="line">--hostname qinglong \</span><br><span class="line">--restart always \</span><br><span class="line">whyour/qinglong:2.13</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完qinglong后设置相应的定时任务和环境变量</span></span><br></pre></td></tr></table></figure>
<br/>
<ol start="3">
<li>安装alist：</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always -v /home/docker/alist:/opt/alist/data -p 5244:5244 -e PUID=0 -e PGID=0 -e UMASK=022 --name=<span class="string">&quot;alist&quot;</span> xhofe/alist:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完alist后按照官网教程设置需要集成的网盘服务</span></span><br></pre></td></tr></table></figure>
<br/>
<ol start="4">
<li>安装nginxProxyManager:</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    image: <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;81:81&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">      - ./www:/var/www</span><br><span class="line">      - ./letsencrypt:/etc/letsencrypt</span><br><span class="line"></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips: /www/html/目录下主要存放192.168.31.88的地址下的页面，可以用于导航页面，也可以安装heimdall来设置导航页面。</p>
</blockquote>
<br/>
<ol start="5">
<li>安装heimdall:</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vi docker-compose.yml</span><br><span class="line"></span><br><span class="line">version: <span class="string">&quot;2.1&quot;</span></span><br><span class="line">services:</span><br><span class="line">  heimdall:</span><br><span class="line">    image: lscr.io/linuxserver/heimdall:latest</span><br><span class="line">    container_name: heimdall</span><br><span class="line">    environment:</span><br><span class="line">      - PUID=1000</span><br><span class="line">      - PGID=1000</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">    volumes:</span><br><span class="line">      - /path/to/appdata/config:/config</span><br><span class="line">    ports:</span><br><span class="line">      - 88:80</span><br><span class="line">      - 444:443</span><br><span class="line">    restart: unless-stopped</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于外部80和443已经被占用了，所以设置为88和444端口    </span></span><br><span class="line">docker-compose up -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完heimdall需要在面板设置首页需要访问的内网服务</span></span><br></pre></td></tr></table></figure>
<br/>
<p>端口映射表：</p>
<table>
<thead>
<tr>
<th>host端口</th>
<th>docker内端口</th>
<th>服务</th>
</tr>
</thead>
<tbody>
<tr>
<td>80</td>
<td>80(代理)</td>
<td>nginxProxyManager</td>
</tr>
<tr>
<td>81</td>
<td>81(管理)</td>
<td>nginxProxyManager</td>
</tr>
<tr>
<td>443</td>
<td>443</td>
<td>nginxProxyManager</td>
</tr>
<tr>
<td>10003</td>
<td>8000</td>
<td>portainer:tcp</td>
</tr>
<tr>
<td>10004</td>
<td>9000</td>
<td>portainer:http</td>
</tr>
<tr>
<td>5244</td>
<td>5244</td>
<td>alist</td>
</tr>
<tr>
<td>5700</td>
<td>5700</td>
<td>qinglong</td>
</tr>
</tbody>
</table>
<br/>
<p>应用服务映射表：</p>
<table>
<thead>
<tr>
<th>应用服务</th>
<th>内网IP</th>
<th>外网IP</th>
</tr>
</thead>
<tbody>
<tr>
<td>PVE</td>
<td>192.168.31.200:80</td>
<td>-</td>
</tr>
<tr>
<td>Openwrt</td>
<td>192.168.31.2:66</td>
<td>172.24.124.12:66</td>
</tr>
<tr>
<td>portainer</td>
<td>192.168.31.88:10004</td>
<td>192.168.31.88:10004</td>
</tr>
<tr>
<td>nginxProxyManager</td>
<td>192.168.31.88:81</td>
<td>192.168.31.88:81</td>
</tr>
<tr>
<td>alist</td>
<td>192.168.31.88:5244</td>
<td>192.168.31.88:5244</td>
</tr>
<tr>
<td>qinglong</td>
<td>192.168.31.88:5700</td>
<td>192.168.31.88:5700</td>
</tr>
<tr>
<td>首页(nginxPM自带)</td>
<td>192.168.31.88</td>
<td>192.168.31.88</td>
</tr>
<tr>
<td>AdGuard Home  面板</td>
<td>192.168.31.2:8081</td>
<td>172.24.124.12:8081</td>
</tr>
<tr>
<td>AdGuard Home DNS</td>
<td>192.168.31.2:5353</td>
<td>172.24.124.12:5353</td>
</tr>
<tr>
<td>DSM</td>
<td>192.168.31.156:5000</td>
<td>192.168.31.156:5000</td>
</tr>
<tr>
<td>heimdall(homepage)</td>
<td>192.168.31.88:88</td>
<td>192.168.31.88:88</td>
</tr>
</tbody>
</table>
<br/>
<h2 id="安装nas"><a class="markdownIt-Anchor" href="#安装nas"></a> 安装NAS</h2>
<ol>
<li>首先要对虚拟机进行硬盘直通；具体步骤可以参考<a href="https://zhuanlan.zhihu.com/p/385048123">这里</a></li>
<li>配置安装群晖；具体步骤可以参考<a href="https://www.bilibili.com/video/BV1Br4y1N7VK/?spm_id_from=0.0.header_right.history_list.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>和<a href="https://www.bilibili.com/video/BV1pu411z7v4/?spm_id_from=..search-card.all.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>中的NAS安装。</li>
<li>NAS的异地组网方案有两种，一种是在NAS上安装ZeroTier，加入同一网络中，具体步骤可以参考<a href="https://post.smzdm.com/p/a4wmrk7k/">这里</a>；另一种是设置NAS的网关为OpenWrt，我使用的就是这种方式。</li>
</ol>
<br/>
<h2 id="内网穿透"><a class="markdownIt-Anchor" href="#内网穿透"></a> 内网穿透</h2>
<p>这里除了会讲一下内网穿透，也会提及一下有公网IP的情况下外网访问的方案；整体设计可以参考<a href="https://www.bilibili.com/video/BV1Qq4y1w7F5/?spm_id_from=444.64.search-card.all.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>。</p>
<br/>
<ol>
<li>有内网IP</li>
</ol>
<ul>
<li>使用拨号上网的主路由(硬路由/软路由)进行端口转发，包含Openwrt的路由进行DDNS设置；可以设置其中的DDNS插件并在阿里云设置域名解析。使用域名+端口转发的外部端口访问内部应用。具体步骤可以参考<a href="https://www.bilibili.com/video/BV1YD4y1y7BC/?spm_id_from=333.788&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>。</li>
</ul>
<br/>
<ol start="2">
<li>没有内网IP</li>
</ol>
<p>主要有三种方式：FRP、ZeroTier、Nps方案</p>
<br/>
<p>自建服务器+内网穿透：</p>
<ul>
<li>在自己买的低配的带公网IP的服务器上安装FRP服务，设置内网穿透到本地网络，我们访问服务器的IP+端口就相当于访问本地的IP+端口了；接着将穿透的服务设置反向代理，这样就可以通过二级域名直接访问内部的服务了。这种方案比较麻烦，需要有服务器，而且非P2P的穿透，性能取决于服务器的性能和带宽；但是不会暴露访问的端口。</li>
</ul>
<br/>
<ul>
<li>异地组网(ZeroTier)——在服务器上安装ZeroTier，并设置为Moon节点，同时，需要接入组网的设备安装对应的客户端或者服务，在ZeroTier网页端将需要加入组网的设备加入同一网络中，并将服务器设置为Moon节点，这样在网络不佳的情况下，就可以通过Moon进行数据的转发，同时该方案采用P2P穿透，不受服务器带宽的影响。</li>
</ul>
<br/>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Tips：</span><br />
对于自用服务，可以直接使用ZeroTier进行异地组网，通过内网IP+端口的方式访问内网服务；对于提供服务，建议使用FRP，内网穿透搭建在公网服务器，映射到家宽的端口，流量出口在家宽IP，通过公网+端口/域名的方式访问内网服务，可以配合使用SPY等监控工具/CK自助等。服务器主要作为跳板机，提供公网IP、内网穿透和反向代理等能力。</p>
<blockquote>
<p>可以考虑一个带公网IP的低配云服务器即可！</p>
</blockquote>
<p>两种方案的具体步骤可以参考<a href="https://www.bilibili.com/video/BV1dr4y147aq/?spm_id_from=..search-card.all.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>和<a href="https://blog.darler.cn/frpservice/#%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3">这里</a>。</p>
<br/>
<p>ZeroTier+OpenWrt直接异地组网：</p>
<p>首先我们需要在OpenWrt上开启ZeroTier插件，并设置好组网的ID，同时在ZeroTier网页端设置组网下一跳的路由表，可以是家中、公司的网段，同时保证局域网内需要互访的设备的网关和DNS为OpenWrt。</p>
<br/>
<p>这里，也记录一下我设置异地组网中遇到的一些问题：</p>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Zerotier运行问题：</span></p>
<ul>
<li>在OpenWrt上的插件启动ZeroTier后，终端输入<code>zerotier-cli listnetworks</code>后回出现<code>PORT_ERROR</code>错误，原因是Zerotier正常工作需要tun设备，但LXC容器默认没有提供。解决方案见<a href="https://www.bilibili.com/read/cv16236206">这里</a>。</li>
<li><code>zerotier-cli info</code>显示offline，<code>zerotier-cli listnetworks</code><br />
显示 <code>REQUESTING_CONFIGURATION PRIVATE zt0 -</code> 而不是IP；</li>
</ul>
<blockquote>
<ol>
<li>opkg update对zerotier进行更新，若出现错误则需要在OpenWrt中系统—&gt;软件包修改一下软件源，删除无效的软件源。</li>
<li>重启容器</li>
</ol>
</blockquote>
<ul>
<li>运行命令zerotier-cli会报错：symbol not found：</li>
</ul>
<blockquote>
<p>原因是库文件的版本不对;<br />
修正的方法如下：WEB登陆LEDE–&gt;系统–&gt;软件包–&gt;更新列表–&gt;搜索libgcc1和libstdcpp6并点击更新<br />
你也可以在这个界面下直接搜索zerotier并安装–&gt;SSH进入系统–&gt;vi /etc/config/zerotier修改配置如下：<br />
option enabled 0 (这里把0替换成1，让选项生效)<br />
list join ‘你的ID’  (替换为Zerotier官网上生成的网络ID)<br />
–&gt;按ESC并输入:wq保存退出–&gt;reboot重启系统–&gt;进入zerotier官网允许连接<br />
回到终端，输入zerotier-cli listnetworks则会出现加入的网络。</p>
</blockquote>
<p>ZeroTier相关的命令可以见<a href="https://blog.csdn.net/jason34/article/details/115438359">这里</a>。</p>
<br/>
<p><span style="background: linear-gradient(to right, #f2994a, #f2c94c);">Zerotier 设置内网设备互访：</span><br />
在 Zerotier 设置页面中，允许要接入网络的路由器，同时记好分配的 Zerotier 内网 IP 地址。其次在路由表设置中添加记录，Destination 填入某一路由器的网段，不同的网段可以是你家中或者公司的网段，Via 中填入该路由器的 Zerotier 内网 IP 地址。依次添加所有路由器的路由，具体的设置步骤可以见<a href="https://www.bilibili.com/video/BV1hT4y1E78k/?spm_id_from=..search-card.all.click&amp;vd_source=af5154e1b2aa355941f1abe043588dc4">这里</a>。</p>
<p><img data-src="https://image.zxkidea.top/docsify/20230112/KPv7jAO7hEIq.png?imageslim" alt="mark" /></p>
<ul>
<li>内网的服务想要在大局域网内互通需要将网关和DNS设置为OpenWrt的IP地址；本例下将Docker容器的DNS和网关设置为OpenWrt地址</li>
<li>从公网访问内网服务只要在设备端输入电脑/服务器的内网IP+端口号即可。</li>
</ul>
<br/>
<p>至此，我们就搭建好了软路由+内网服务整个体系了，我们需要连接局域网内的设备开启ZeroTier，可以访问内网的导航页(heimdall)来选择需要的内网服务或者直接通过内网IP+端口访问内网服务；局域网内的设备设置OpenWrt为网关和DNS，可以获得广告过滤、出国、BT下载等功能。</p>
]]></content>
      <categories>
        <category>软路由</category>
      </categories>
      <tags>
        <tag>软路由</tag>
        <tag>OpenWrt</tag>
        <tag>NAS</tag>
        <tag>内网穿透</tag>
      </tags>
  </entry>
  <entry>
    <title>Kindle 退出中国后如何继续购买电子书及使用推送服务</title>
    <url>/posts/aa509077.html</url>
    <content><![CDATA[<p><em>亚马逊中国将在 2023 年 6 月 30 日之后停止运营 Kindle 电子书店，自此用户将无法再通过亚马逊中国账户继续购买电子书，一年后，即 2024 年 6 月 30 日之后，用户将无法使用“发送至 Kindle”功能，也就是无法再通过邮箱将电子书文件推送到 Kindle 个人文档服务。</em></p>
<hr />
<h2 id="切换其他区域的亚马逊账户"><a class="markdownIt-Anchor" href="#切换其他区域的亚马逊账户"></a> 切换其他区域的亚马逊账户</h2>
<p>如果你的 Kindle 设备想要在亚马逊的 Kindle 业务退出中国后继续购买电子书和个人文档服务，就需要换用其它区域的亚马逊账号，比如美国亚马逊、日本亚马逊、英国亚马逊等。</p>
<br/>
<p>因为Kindle 相关的内容服务只能设定到一个区域，你可以在“Manage Your Content and Devices”（管理你的内容和设备）的“Preferences”（偏好设置）中的“Country/Region Settings”（区域设置）进行更改。</p>
<span id="more"></span>
<br/>
<p>你可以根据自己的需要通过下表提供的链接注册特定区域的亚马逊账户。注意，如果你注册账户时使用的邮箱与亚马逊中国账户相同，务必更换一下密码，以避免 Kindle 优先登录中亚账户。</p>
<table>
<thead>
<tr>
<th style="text-align:left">国家/区域</th>
<th style="text-align:left">站点链接</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">美国</td>
<td style="text-align:left"><a href="https://www.amazon.com/">https://www.amazon.com</a> * 推荐</td>
</tr>
<tr>
<td style="text-align:left">英国</td>
<td style="text-align:left"><a href="https://www.amazon.co.uk/">https://www.amazon.co.uk</a></td>
</tr>
<tr>
<td style="text-align:left">法国</td>
<td style="text-align:left"><a href="https://www.amazon.fr/">https://www.amazon.fr</a></td>
</tr>
<tr>
<td style="text-align:left">德国</td>
<td style="text-align:left"><a href="https://www.amazon.de/">https://www.amazon.de</a></td>
</tr>
<tr>
<td style="text-align:left">意大利</td>
<td style="text-align:left"><a href="https://www.amazon.it/">https://www.amazon.it</a></td>
</tr>
<tr>
<td style="text-align:left">日本</td>
<td style="text-align:left"><a href="https://www.amazon.co.jp/">https://www.amazon.co.jp</a></td>
</tr>
<tr>
<td style="text-align:left">加拿大</td>
<td style="text-align:left"><a href="https://www.amazon.ca/">https://www.amazon.ca</a></td>
</tr>
<tr>
<td style="text-align:left">荷兰</td>
<td style="text-align:left"><a href="https://www.amazon.nl/">https://www.amazon.nl</a></td>
</tr>
<tr>
<td style="text-align:left">波兰</td>
<td style="text-align:left"><a href="https://www.amazon.pl/">https://www.amazon.pl</a></td>
</tr>
<tr>
<td style="text-align:left">西班牙</td>
<td style="text-align:left"><a href="https://www.amazon.es/">https://www.amazon.es</a></td>
</tr>
<tr>
<td style="text-align:left">新加坡</td>
<td style="text-align:left"><a href="https://www.amazon.sg/">https://www.amazon.sg</a></td>
</tr>
<tr>
<td style="text-align:left">澳大利亚</td>
<td style="text-align:left"><a href="https://www.amazon.com.au/">https://www.amazon.com.au</a></td>
</tr>
<tr>
<td style="text-align:left">巴西</td>
<td style="text-align:left"><a href="https://www.amazon.com.br/">https://www.amazon.com.br</a></td>
</tr>
<tr>
<td style="text-align:left">印度</td>
<td style="text-align:left"><a href="https://www.amazon.in/">https://www.amazon.in</a></td>
</tr>
<tr>
<td style="text-align:left">墨西哥</td>
<td style="text-align:left"><a href="https://www.amazon.com.mx/">https://www.amazon.com.mx</a></td>
</tr>
<tr>
<td style="text-align:left">土耳其</td>
<td style="text-align:left"><a href="https://www.amazon.com.tr/">https://www.amazon.com.tr</a></td>
</tr>
<tr>
<td style="text-align:left">阿拉伯联合酋长国</td>
<td style="text-align:left"><a href="https://www.amazon.ae/">https://www.amazon.ae</a></td>
</tr>
</tbody>
</table>
<p>亚马逊账户注册完成后，你就可以在 Kindle 设备上先注销当前绑定的中亚账户，再绑定新注册的亚马逊账户，以继续使用相应区域亚马逊站点提供的与 Kindle 相关的内容服务。</p>
<p>另外，如果你的 Kindle 已经越狱，切换账户后可能需要重新安装一遍插件。</p>
<br/>
<h2 id="如何继续使用个人文档服务"><a class="markdownIt-Anchor" href="#如何继续使用个人文档服务"></a> 如何继续使用个人文档服务</h2>
<p>在你的 Kindle 设备绑定好新注册的亚马逊账户后，会得到一个新的“发送至 Kindle”（Send to Kindle）电子邮箱地址，该邮箱地址可在亚马逊“Devices”（设备）页和 Kindle 设备设置中的“Your Account”（你的账户）界面看到，该邮箱的域名部分为 <strong>@kindle.com</strong>（如果发现显示仍然是 @kindle.cn，将亚马逊站点的语言切换到英文即可）。在“Preference”（偏好设置）中设置好信任邮箱后，就可以像往常一样向这个新的 Kindle 邮箱推送电子书或文档了。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/er3bdzX9dPYf.png?imageslim" alt="rocky" /></p>
<br/>
<p>对于已经推送到中亚个人文档的内容，在切换到其它区域亚马逊账号后，不会自动迁移，原因如前所述，中国亚马逊站点与其它区域亚马逊站点的 Kindle 内容服务是完全独立的。由于亚马逊没有像电子书那样为个人文档提供从页面下载的功能，想要迁移个人文档的内容，只能使用 Kindle 逐个下载下来再重新推送到美亚个人文档服务中。通过 Kindle 下载的个人文档通常是 <code>AZW</code> 和 <code>AZW3</code> 格式。前者可以直接推送，后者需要转换成 <code>MOBI</code> 或 <code>EPUB</code> 格式才能推送。</p>
<br/>
<h2 id="如何继续购买kindle电子书"><a class="markdownIt-Anchor" href="#如何继续购买kindle电子书"></a> 如何继续购买Kindle电子书</h2>
<p>要在其它区域亚马逊站点购买电子书，首先要解决的是支付问题。美国亚马逊支持多种支付方式，其中包括借记卡和信用卡，也就是说只要你手上的银行卡带有 UnionPay（银联）、Visa（维萨）、MasterCard（万事达）、American Express（美国运通）、JCB（吉士美）等标志，就可以在上面购物。当然，除了需要付费购买的电子书，美亚也提供了<a href="https://www.amazon.com/free-ebooks-Kindle-Store/s?k=free+ebooks&amp;rh=n%3A133140011">大量的免费电子书</a>。</p>
<br/>
<p>虽然中文电子书数量较少，但是美亚为 Kindle 电子书提供了中亚未曾上线的很多功能，比如在线图书馆、在线阅读电子书、在线管理标注笔记，方便你随时随地阅读、管理电子书。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/CnL86QUXqo4R.png?imageslim" alt="rocky" /></p>
]]></content>
      <categories>
        <category>Kindle</category>
      </categories>
      <tags>
        <tag>Kindle</tag>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基本命令</title>
    <url>/posts/4b6ea061.html</url>
    <content><![CDATA[<h1 id="命令的基本格式"><a class="markdownIt-Anchor" href="#命令的基本格式"></a> 命令的基本格式</h1>
<blockquote>
<p>[root@localhost~]</p>
<p>root为用户名</p>
<p>～表示当前所在位置</p>
<p>localhost主机名</p>
<p>‘#’超级用户</p>
<p>'$&quot;  普通用户</p>
</blockquote>
<span id="more"></span>
<p>命令的基本格式：</p>
<blockquote>
<p>命令  [选项]  [参数]</p>
</blockquote>
<hr />
<h1 id="查询目录的内容"><a class="markdownIt-Anchor" href="#查询目录的内容"></a> 查询目录的内容</h1>
<p>命令格式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls [选项][文件或目录]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选项：</p>
<p>-a 所有文件</p>
<p>-l  查看详情</p>
<p>-d查看目录属性</p>
<p>-h显示文件大小</p>
</blockquote>
<hr />
<h1 id="文件处理命令"><a class="markdownIt-Anchor" href="#文件处理命令"></a> 文件处理命令</h1>
<h2 id="1建立目录"><a class="markdownIt-Anchor" href="#1建立目录"></a> 1.建立目录</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p [目录名]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-p表述递归建文件夹</p>
</blockquote>
<p>举例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir japan</span><br><span class="line"></span><br><span class="line">mkdir -p japan/cangjk</span><br></pre></td></tr></table></figure>
<h2 id="2切换目录"><a class="markdownIt-Anchor" href="#2切换目录"></a> 2.切换目录</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd [目录]</span><br></pre></td></tr></table></figure>
<p>简化操作：</p>
<blockquote>
<p>cd~  进入当前用户目录</p>
<p>cd- 上次目录</p>
<p>cd… 进入上一级目录</p>
<p>pwd查看当前目录所在位置</p>
</blockquote>
<h2 id="3删除目录"><a class="markdownIt-Anchor" href="#3删除目录"></a> 3.删除目录</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rmdir [目录]  </span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除所有文件</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf [目录]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>删除目录所有文件</p>
</blockquote>
<h2 id="4复制目录"><a class="markdownIt-Anchor" href="#4复制目录"></a> 4.复制目录</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp[选项][原文件目录][目标目录]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选项：</p>
<p>-r复制目录</p>
<p>-p连文件属性一起复制</p>
<p>-a 相当于-pdr</p>
</blockquote>
<h2 id="5剪切-改名"><a class="markdownIt-Anchor" href="#5剪切-改名"></a> 5.剪切、改名</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv[原文件目录][目标文件目录]</span><br></pre></td></tr></table></figure>
<h2 id="6常见目录作用"><a class="markdownIt-Anchor" href="#6常见目录作用"></a> 6.常见目录作用</h2>
<blockquote>
<p>/ 根目录</p>
<p>/bin 命令保存目录</p>
<p>/boot  启动目录</p>
<p>/dev  设备文件命令</p>
<p>/etc  配置文件保存目录</p>
<p>/home  家目录</p>
<p>/lib  系统库保存命令</p>
<p>/mnt  系统挂载目录</p>
</blockquote>
<hr />
<h1 id="文件搜索命令"><a class="markdownIt-Anchor" href="#文件搜索命令"></a> 文件搜索命令</h1>
<h2 id="1locate"><a class="markdownIt-Anchor" href="#1locate"></a> 1.locate</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">locate [文件名]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在系统数据库中查找文件的</p>
</blockquote>
<blockquote>
<p>新建的文件，要执行updatedb操作之后才能搜到</p>
</blockquote>
<h2 id="2命令搜索"><a class="markdownIt-Anchor" href="#2命令搜索"></a> 2.命令搜索</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis [选项] [命令名]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">which [选项][命令名]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>选项：</p>
<p>-b 只查找可执行文件</p>
<p>-m 只查找帮助文件</p>
</blockquote>
<h2 id="3文件搜索"><a class="markdownIt-Anchor" href="#3文件搜索"></a> 3.文件搜索</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find [搜索范围][选项][条件]</span><br></pre></td></tr></table></figure>
<p>直接举例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find  /  -name install.log  </span><br><span class="line">在根目录下查找名为install.log文件</span><br><span class="line">find /root  -inname install.log</span><br><span class="line">忽略大小写查找文件</span><br><span class="line">find /var/log -mtime +10</span><br><span class="line"></span><br><span class="line">其中-mtime 文件修改时间</span><br><span class="line">-atime 文件访问时间</span><br><span class="line">-ctime 改变文件属性时间</span><br><span class="line"></span><br><span class="line">+10 10天前</span><br><span class="line">10  10天</span><br><span class="line">-10 10天内</span><br><span class="line">find /etc -size +20M</span><br><span class="line"></span><br><span class="line">查找文件大于20M的文件</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="压缩与解压缩命令"><a class="markdownIt-Anchor" href="#压缩与解压缩命令"></a> 压缩与解压缩命令</h1>
<p>常见压缩格式：.zip  、 .gz 、 .bz2、<br />
.tar.gz  、 .tar.bz2</p>
<h2 id="1zip格式"><a class="markdownIt-Anchor" href="#1zip格式"></a> 1.zip格式</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//压缩文件</span><br><span class="line">zip [压缩文件名][原文件]</span><br><span class="line">//压缩目录</span><br><span class="line">zip -r  [压缩文件名][原文件]</span><br></pre></td></tr></table></figure>
<p>举例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch jp/cangls</span><br><span class="line"></span><br><span class="line">touch jp/longls</span><br><span class="line"></span><br><span class="line">zip -r jp.zip jp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压：</span></span><br><span class="line">unzip [压缩文件名]</span><br></pre></td></tr></table></figure>
<h2 id="2gz格式"><a class="markdownIt-Anchor" href="#2gz格式"></a> 2.gz格式</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩为gz格式，原文件不保留</span></span><br><span class="line">gzip [原文件]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩.gz格式，原文件保留</span></span><br><span class="line"></span><br><span class="line">gzip -c 原文件 &gt; 压缩文件</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">压缩目录：</span></span><br><span class="line">gzip -r  目录</span><br></pre></td></tr></table></figure>
<p>解压：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">guzip [文件]</span><br><span class="line"></span><br><span class="line">guzip -r [目录]</span><br></pre></td></tr></table></figure>
<h2 id="3tar格式"><a class="markdownIt-Anchor" href="#3tar格式"></a> 3.tar格式</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包</span></span><br><span class="line">tar -cvf  打包文件名 原文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line"></span><br><span class="line">tar -xvf jp.tar</span><br></pre></td></tr></table></figure>
<h2 id="4targz格式"><a class="markdownIt-Anchor" href="#4targz格式"></a> 4.tar.gz格式</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打包</span></span><br><span class="line">tar -zcvf 压缩包名.tar.gz  原文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf  压缩包名.tar.gz</span><br><span class="line">  </span><br></pre></td></tr></table></figure>
<hr />
<h1 id="关机和重启"><a class="markdownIt-Anchor" href="#关机和重启"></a> 关机和重启</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown [选项][时间]</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选项：</span></span><br><span class="line">-c 取消前一个关机命令</span><br><span class="line">-h 关机</span><br><span class="line">-r 重启</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init 6重启</span><br><span class="line"></span><br><span class="line">init 0关机</span><br><span class="line"></span><br><span class="line">logout退出登陆</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="查看用户信息"><a class="markdownIt-Anchor" href="#查看用户信息"></a> 查看用户信息</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">w</span><br><span class="line">who</span><br><span class="line">last</span><br><span class="line">lastlog</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="shell基础"><a class="markdownIt-Anchor" href="#shell基础"></a> shell基础</h1>
<h2 id="1什么是shell"><a class="markdownIt-Anchor" href="#1什么是shell"></a> 1.什么是shell</h2>
<p>shell是命令行解释器。</p>
<h2 id="2echo-输出命令"><a class="markdownIt-Anchor" href="#2echo-输出命令"></a> 2.echo 输出命令</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo[选项][输出内容]</span><br></pre></td></tr></table></figure>
<p>选项：</p>
<blockquote>
<p>-e:支持转义</p>
</blockquote>
<h2 id="3创建一个脚本"><a class="markdownIt-Anchor" href="#3创建一个脚本"></a> 3.创建一个脚本</h2>
<p>创建 <span>hello.sh</span></p>
<blockquote>
<p>vim <span>hello.sh</span><br />
进入编辑：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the first program</span></span><br><span class="line"></span><br><span class="line">echo &quot;hello world!&quot;</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod 755 hello.sh</span><br><span class="line"></span><br><span class="line">./hello.sh    </span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash hello.sh</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="历史命令"><a class="markdownIt-Anchor" href="#历史命令"></a> 历史命令</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">history 查看历史命令</span><br><span class="line">history [选项][历史保存文件]</span><br><span class="line">选项：</span><br><span class="line">-c清空历史</span><br><span class="line">-w把缓存中的历史写入历史命令保存文件</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="输出重定向"><a class="markdownIt-Anchor" href="#输出重定向"></a> 输出重定向</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令&gt;文件   以覆盖的方式，把正确的命令输出到指定文件</span><br><span class="line">命令&gt;&gt;文件  以追加的方式，把正确的命令输出到指定文件、</span><br><span class="line">错误命令 2&gt; 文件  以覆盖的方式把错误的命令覆盖到指定文件</span><br><span class="line">错误命令 2&gt;&gt; 文件  以追击的方式把错误的命令覆盖到指定文件</span><br><span class="line"></span><br><span class="line"> 命令&gt;&gt;文件 2&gt;&amp;1  同时追加正确命令和错误命令到 指定文件</span><br><span class="line">命令 &gt;&gt;文件1 2&gt;&gt;文件2   把正确的命令输出到文件1错误的文件2</span><br></pre></td></tr></table></figure>
<p>举个例子:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">/bin/bash</span></span><br><span class="line">while command</span><br><span class="line">do</span><br><span class="line">curl -d &quot;userid=123343,action=getuserinfo&quot; https://app.testasss.com.cn/ &gt;test.txt</span><br><span class="line">time=$(date)</span><br><span class="line">cat=$(cat test.txt |cut -d \: -f 3|cut -d \&quot; -f 2)</span><br><span class="line">echo &quot;$time $cat&quot; &gt;&gt;test.log</span><br><span class="line">sleep 15s</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="网络相关"><a class="markdownIt-Anchor" href="#网络相关"></a> 网络相关</h1>
<h2 id="1ifconfig查看ip"><a class="markdownIt-Anchor" href="#1ifconfig查看ip"></a> 1.ifconfig查看ip</h2>
<p>举个例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">ifconfig&gt;</span><span class="language-bash">&gt; ip.log</span></span><br><span class="line">cat ip.log</span><br></pre></td></tr></table></figure>
<h2 id="2查看网络状态"><a class="markdownIt-Anchor" href="#2查看网络状态"></a> 2.查看网络状态</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat [选项]</span><br></pre></td></tr></table></figure>
<p>选项：</p>
<blockquote>
<p>-t: 列出tcp 协议端口<br />
-u: 列出upd协议端口<br />
-n  ip地址个端口号<br />
-l 列出监听状态的<br />
-a 所有</p>
</blockquote>
<h2 id="3查看路由列表"><a class="markdownIt-Anchor" href="#3查看路由列表"></a> 3.查看路由列表</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -rn</span><br><span class="line">或者</span><br><span class="line">route -n</span><br></pre></td></tr></table></figure>
<h2 id="4查看某域名与自己的电脑的网络状态"><a class="markdownIt-Anchor" href="#4查看某域名与自己的电脑的网络状态"></a> 4.查看某域名与自己的电脑的网络状态</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ping www.baodu.com</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="vi编辑器"><a class="markdownIt-Anchor" href="#vi编辑器"></a> vi编辑器</h1>
<p>vi的升级版是vim</p>
<h2 id="1vim的操作模式"><a class="markdownIt-Anchor" href="#1vim的操作模式"></a> 1.vim的操作模式</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">commond mode  命令模式</span><br><span class="line">inser tmode  编辑模式</span><br><span class="line">lastline mode  底行模式</span><br></pre></td></tr></table></figure>
<h2 id="2模式切换"><a class="markdownIt-Anchor" href="#2模式切换"></a> 2.模式切换</h2>
<p>i  进入编辑模式<br />
esc  进入命令行模式</p>
<h2 id="3命令模式"><a class="markdownIt-Anchor" href="#3命令模式"></a> 3.命令模式</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim [文件]         进入文件或者创建文件（文件不存在的情况下）</span><br><span class="line">vim + [文件名]   进入文件尾部</span><br><span class="line">vim +/[字符串] [文件名]  光标定位到文件第一次出现该字符串的位置</span><br></pre></td></tr></table></figure>
<h2 id="4底行模式"><a class="markdownIt-Anchor" href="#4底行模式"></a> 4.底行模式</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">:w  保存</span><br><span class="line">:q 退出</span><br><span class="line">:! 强制</span><br><span class="line">:15  定位的第15行</span><br><span class="line">/[字符串]  光标位置向后搜索该字符串</span><br><span class="line">?[字符串]  光标位置向前搜索该字符串</span><br><span class="line">dd  删除光标所在行</span><br><span class="line"></span><br><span class="line">ctr+f   向下翻页</span><br><span class="line">ctr+b  向上翻页</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="常用操作快捷键"><a class="markdownIt-Anchor" href="#常用操作快捷键"></a> 常用操作快捷键</h1>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ctr+c  终止当前命令</span><br><span class="line">ctr+l 清屏  相当于 clear</span><br><span class="line">ctr+a  光标移到行首</span><br><span class="line">ctr+e  光标移到行尾</span><br><span class="line">ctr+u  把光标所在位置删除到行首</span><br><span class="line">ctr+z  把命令放入后台</span><br><span class="line">ctr+r  在历史命令中搜索</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h1>
<p>常用工具：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Vmware  虚拟机</span><br><span class="line">centos.iso   centos系统镜像 ,绝大多数服务器是这个系统</span><br><span class="line">SecureCRT  远程登陆工具</span><br><span class="line">Xshell 远程登陆工具</span><br><span class="line">winscp copy文件工具</span><br></pre></td></tr></table></figure>
<p>原文链接：<a href="https://www.jianshu.com/p/0718b3abedcf">https://www.jianshu.com/p/0718b3abedcf</a></p>
]]></content>
      <categories>
        <category>Linux指令</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>资料整理</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL语句技巧</title>
    <url>/posts/8343e966.html</url>
    <content><![CDATA[<h2 id="一-常用函数大全"><a class="markdownIt-Anchor" href="#一-常用函数大全"></a> 一、常用函数大全</h2>
<h3 id="1-数学函数"><a class="markdownIt-Anchor" href="#1-数学函数"></a> 1. 数学函数</h3>
<ul>
<li><code>ABS(x)</code>  返回x的绝对值</li>
<li><code>BIN(x)</code>  返回x的二进制（OCT返回八进制，HEX返回十六进制）</li>
<li><code>CEILING(x)</code>  返回大于x的最小整数值——<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">向上取整</span></li>
<li><code>EXP(x) </code> 返回值e（自然对数的底）的x次方</li>
</ul>
<span id="more"></span>
<ul>
<li><code>FLOOR(x)</code>  返回小于x的最大整数值——<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">向下取整</span></li>
<li><code>GREATEST(x1,x2,...,xn)</code>返回集合中最大的值</li>
<li><code>LEAST(x1,x2,...,xn) </code>   返回集合中最小的值</li>
<li><code>LN(x)  </code>         返回x的自然对数</li>
<li><code>LOG(x,y)</code>返回x的以y为底的对数</li>
<li><code>MOD(x,y) </code>        返回x/y的模（余数）</li>
<li><code>PI()</code>返回pi的值（圆周率）</li>
<li><code>RAND()</code>返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值。</li>
<li><code>ROUND(x,y)</code>返回参数x的<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">四舍五入的有y位小数</span>的值</li>
<li><code>SIGN(x) </code>返回代表数字x的符号的值</li>
<li><code>SQRT(x) </code>返回一个数的平方根</li>
<li><code>POWER(Value,N)</code>— <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">返回Value的N次方</span>；<code>POWER(Value,1/N)</code>— <span style="background: linear-gradient(to right, #f2994a, #f2c94c);">返回Value的N次方</span></li>
<li><code>TRUNCATE(x,y) </code>      返回数字x截短为y位小数的结果</li>
</ul>
<br/>
<h3 id="2-聚合函数常用于group-by从句的select查询中"><a class="markdownIt-Anchor" href="#2-聚合函数常用于group-by从句的select查询中"></a> 2. 聚合函数(常用于GROUP BY从句的SELECT查询中)</h3>
<ul>
<li><code>AVG(col)</code>返回指定列的平均值</li>
<li><code>COUNT(col)</code>返回指定列中非NULL值的个数</li>
<li><code>MIN(col)</code>返回指定列的最小值</li>
<li><code>MAX(col)</code>返回指定列的最大值</li>
<li><code>SUM(col)</code>返回指定列的所有值之和</li>
<li><code>GROUP_CONCAT(col) </code>返回由属于一组的列值连接组合而成的结果</li>
</ul>
<br/>
<h3 id="3-字符串函数"><a class="markdownIt-Anchor" href="#3-字符串函数"></a> 3. 字符串函数</h3>
<ul>
<li><code>ASCII(char)</code>返回字符的ASCII码值</li>
<li><code>BIT_LENGTH(str)</code>返回字符串的比特长度</li>
<li><code>CONCAT(s1,s2...,sn)</code>将s1,s2…,sn连接成字符串</li>
<li><code>CONCAT_WS(sep,s1,s2...,sn)</code>将s1,s2…,sn连接成字符串，并用sep字符间隔</li>
<li><code>INSERT(str,x,y,instr) </code>将字符串str从第x位置开始，y个字符长的子串替换为字符串instr，返回结果</li>
<li><code>FIND_IN_SET(str,list)</code>分析逗号分隔的list列表，如果发现str，返回str在list中的位置</li>
<li><code>LCASE(str)或LOWER(str) </code>返回将字符串str中所有字符改变为小写后的结果</li>
<li><code>LEFT(str,x)</code>返回字符串str中最左边的x个字符</li>
<li><code>LENGTH(s)</code>返回字符串str中的字符数</li>
<li><code>LTRIM(str) </code>从字符串str中切掉开头的空格</li>
<li><code>POSITION(substr,str)</code> 返回子串substr在字符串str中第一次出现的位置</li>
<li><code>QUOTE(str) </code>用反斜杠转义str中的单引号</li>
<li><code>REPEAT(str,srchstr,rplcstr)</code>返回字符串str重复x次的结果</li>
<li><code>REVERSE(str) </code>返回颠倒字符串str的结果</li>
<li><code>RIGHT(str,x) </code>返回字符串str中最右边的x个字符</li>
<li><code>RTRIM(str)</code> 返回字符串str尾部的空格</li>
<li><code>STRCMP(s1,s2)</code>比较字符串s1和s2</li>
<li><code>TRIM(str)</code>去除字符串首部和尾部的所有空格</li>
<li><code>UCASE(str)</code>或<code>UPPER(str) </code>返回将字符串str中所有字符转变为大写后的结果</li>
</ul>
<br/>
<h3 id="4-日期和时间函数"><a class="markdownIt-Anchor" href="#4-日期和时间函数"></a> 4. 日期和时间函数</h3>
<ul>
<li><code>CURDATE()</code>或<code>CURRENT_DATE() </code>返回当前的日期</li>
<li><code>CURTIME()</code>或<code>CURRENT_TIME() </code>返回当前的时间</li>
<li><code>DATE_ADD(date,INTERVAL int keyword)</code>返回日期date加上间隔时间int的结果(int必须按照关键字进行格式化), <span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">keyword可为任意时间间隔类型</span>；如：<code>SELECT DATE_ADD(CURRENT_DATE,INTERVAL 6 MONTH);</code></li>
<li><code>DATE_FORMAT(date,fmt) </code> 依照指定的fmt格式格式化日期date值，fmt格式；常用：‘%Y-%m-%d’ , 年-月-日</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">格式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%a</td>
<td style="text-align:left">缩写星期名</td>
</tr>
<tr>
<td style="text-align:left">%b</td>
<td style="text-align:left">缩写月名</td>
</tr>
<tr>
<td style="text-align:left">%c</td>
<td style="text-align:left">月，数值</td>
</tr>
<tr>
<td style="text-align:left">%D</td>
<td style="text-align:left">带有英文前缀的月中的天</td>
</tr>
<tr>
<td style="text-align:left">%d</td>
<td style="text-align:left">月的天，数值(00-31)</td>
</tr>
<tr>
<td style="text-align:left">%e</td>
<td style="text-align:left">月的天，数值(0-31)</td>
</tr>
<tr>
<td style="text-align:left">%f</td>
<td style="text-align:left">微秒</td>
</tr>
<tr>
<td style="text-align:left">%H</td>
<td style="text-align:left">小时 (00-23)</td>
</tr>
<tr>
<td style="text-align:left">%h</td>
<td style="text-align:left">小时 (01-12)</td>
</tr>
<tr>
<td style="text-align:left">%I</td>
<td style="text-align:left">小时 (01-12)</td>
</tr>
<tr>
<td style="text-align:left">%i</td>
<td style="text-align:left">分钟，数值(00-59)</td>
</tr>
<tr>
<td style="text-align:left">%j</td>
<td style="text-align:left">年的天 (001-366)</td>
</tr>
<tr>
<td style="text-align:left">%k</td>
<td style="text-align:left">小时 (0-23)</td>
</tr>
<tr>
<td style="text-align:left">%l</td>
<td style="text-align:left">小时 (1-12)</td>
</tr>
<tr>
<td style="text-align:left">%M</td>
<td style="text-align:left">月名</td>
</tr>
<tr>
<td style="text-align:left">%m</td>
<td style="text-align:left">月，数值(00-12)</td>
</tr>
<tr>
<td style="text-align:left">%p</td>
<td style="text-align:left">AM 或 PM</td>
</tr>
<tr>
<td style="text-align:left">%r</td>
<td style="text-align:left">时间，12-小时（hh:mm:ss AM 或 PM）</td>
</tr>
<tr>
<td style="text-align:left">%S</td>
<td style="text-align:left">秒(00-59)</td>
</tr>
<tr>
<td style="text-align:left">%s</td>
<td style="text-align:left">秒(00-59)</td>
</tr>
<tr>
<td style="text-align:left">%T</td>
<td style="text-align:left">时间, 24-小时 (hh:mm:ss)</td>
</tr>
<tr>
<td style="text-align:left">%U</td>
<td style="text-align:left">周 (00-53) 星期日是一周的第一天</td>
</tr>
<tr>
<td style="text-align:left">%u</td>
<td style="text-align:left">周 (00-53) 星期一是一周的第一天</td>
</tr>
<tr>
<td style="text-align:left">%V</td>
<td style="text-align:left">周 (01-53) 星期日是一周的第一天，与 %X 使用</td>
</tr>
<tr>
<td style="text-align:left">%v</td>
<td style="text-align:left">周 (01-53) 星期一是一周的第一天，与 %x 使用</td>
</tr>
<tr>
<td style="text-align:left">%W</td>
<td style="text-align:left">星期名</td>
</tr>
<tr>
<td style="text-align:left">%w</td>
<td style="text-align:left">周的天 （0=星期日, 6=星期六）</td>
</tr>
<tr>
<td style="text-align:left">%X</td>
<td style="text-align:left">年，其中的星期日是周的第一天，4 位，与 %V 使用</td>
</tr>
<tr>
<td style="text-align:left">%x</td>
<td style="text-align:left">年，其中的星期一是周的第一天，4 位，与 %v 使用</td>
</tr>
<tr>
<td style="text-align:left">%Y</td>
<td style="text-align:left">年，4 位</td>
</tr>
<tr>
<td style="text-align:left">%y</td>
<td style="text-align:left">年，2 位</td>
</tr>
</tbody>
</table>
<ul>
<li><code>DATE_SUB(date,INTERVAL int keyword)</code>返回日期date减去间隔时间int的结果(int必须按照关键字进行格式化), <span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">keyword可为任意时间间隔类型</span>；如：<code>SELECT DATE_SUB(CURRENT_DATE,INTERVAL 6 MONTH);</code></li>
<li><code>DAYOFWEEK(date)</code>  返回date所代表的一星期中的第几天(1~7)</li>
<li><code>DAYOFMONTH(date) </code> 返回date是一个月的第几天(1~31)</li>
<li><code>DAYOFYEAR(date)</code>  返回date是一年的第几天(1~366)</li>
<li><code>DAYNAME(date)</code>  返回date的<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">星期名</span>(Sun…)，如：<code>SELECT DAYNAME(CURRENT_DATE);</code></li>
<li><code>FROM_UNIXTIME(ts,fmt) </code> 根据指定的fmt格式，格式化UNIX时间戳ts</li>
<li><code>HOUR(time) </code> 返回time的小时值(0~23)</li>
<li><code>MINUTE(time) </code> 返回time的分钟值(0~59)</li>
<li><code>MONTH(date) </code> 返回date的月份值(1~12)</li>
<li><code>MONTHNAME(date) </code> 返回date的<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">月份名</span>(Jan…)，如：<code>SELECT MONTHNAME(CURRENT_DATE);</code></li>
<li><code>NOW() </code>  返回当前的日期和时间</li>
<li><code>QUARTER(date) </code> 返回date在一年中的季度(1~4)，如<code>SELECT QUARTER(CURRENT_DATE);</code></li>
<li><code>WEEK(date) </code> 返回日期date为一年中第几周(0~53)</li>
<li><code>YEAR(date) </code> 返回日期date的年份(1000~9999)</li>
<li><code>EXTRACT(date) </code> Extract() 函数除了没有date(),time() 的功能外，其他功能一应具全。</li>
<li><code>period_add(P,N) </code>日期加/减去N月。</li>
<li><code>period_diff(P1,P2)</code> 日期 P1-P2，返回 N 个月</li>
<li><code>datediff(date1,date2)</code> 两个日期相减 date1 - date2，返回天数</li>
<li><code>TIMEDIFF(time1,time2)</code> 两个日期相减 time1 - time2，返回 TIME 差值</li>
<li><code>TIMESTAMPDIFF(DAY/MONTH/YEAR/WEEK/MINUTE,time1,time2)</code> 两个日期相减 time1 - time2，<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">返回相应日期类型</span>的差值</li>
<li><code>TO_DAYS(date)</code> 给出一个日期 date，返回一个天数(从 0 年开始的天数)</li>
<li><code>FROM_DAYS(N)</code> 给出一个天数 N，返回一个 DATE 值</li>
</ul>
<br/>
<p><font color = green size = 4>一些示例：</font></p>
<p><font color = blue>1. 返回两个日期值之间的差值(月数)：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT PERIOD_DIFF(200302,199802);</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue>2. 在Mysql中计算年龄：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT DATE_FORMAT(FROM_DAYS(TO_DAYS(NOW())-TO_DAYS(birthday)),&#x27;%Y&#x27;)+0 AS age FROM employee;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red>注：</font><font color = green>此处利用to_days()将年龄转换为从0年经过的时间，再用date_format求出年份即为年龄。</font></p>
</blockquote>
<br/>
<p><font color = blue>3. EXTRACT()提取函数</font></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">YEAR</span> <span class="keyword">FROM</span> <span class="string">&#x27;2017-05-15 10:37:14.123456&#x27;</span>); <span class="comment">-- 年</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(<span class="keyword">MONTH</span> <span class="keyword">FROM</span> <span class="string">&#x27;2017-05-15 10:37:14.123456&#x27;</span>); <span class="comment">-- 月</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(YEAR_MONTH <span class="keyword">FROM</span> <span class="string">&#x27;2017-05-15 10:37:14.123456&#x27;</span>); <span class="comment">-- 年月</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(DAY_HOUR <span class="keyword">FROM</span> <span class="string">&#x27;2017-05-15 10:37:14.123456&#x27;</span>); <span class="comment">-- 日时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">EXTRACT</span>(DAY_MINUTE <span class="keyword">FROM</span> <span class="string">&#x27;2017-05-15 10:37:14.123456&#x27;</span>);<span class="comment">-- 151037(日时分)</span></span><br></pre></td></tr></table></figure>
<br/>
<h3 id="5-控制流函数"><a class="markdownIt-Anchor" href="#5-控制流函数"></a> 5. 控制流函数</h3>
<ul>
<li><code>CASE WHEN[test1] THEN [result1]...ELSE [default] END</code>如果testN是真，则返回resultN，否则返回default</li>
<li><code>CASE [test] WHEN[val1] THEN [result]...ELSE [default]END </code> 如果test和valN相等，则返回resultN，否则返回default</li>
<li><code>IF(test,t,f) </code> 如果test是真，返回t；否则返回f</li>
<li><code>IFNULL(arg1,arg2) </code>如果arg1不是空，返回arg1，否则返回arg2</li>
<li><code>NULLIF(arg1,arg2) </code>如果arg1=arg2返回NULL；否则返回arg1</li>
</ul>
<br/>
<p>这些函数的第一个是<code>IFNULL()</code>，它有两个参数，并且对第一个参数进行判断。如果第一个参数不是NULL，函数就会向调用者返回第一个参数；如果是NULL,将返回第二个参数。</p>
<p>如：<code>SELECT IFNULL(1,2), IFNULL(NULL,10),IFNULL(4*NULL,'false');</code></p>
<br/>
<p>NULLIF()函数将会检验提供的两个参数是否相等，如果相等，则返回NULL，如果不相等，就返回第一个参数。</p>
<p>如：<code>SELECT NULLIF(1,1),NULLIF('A','B'),NULLIF(2+3,4+1);</code></p>
<br/>
<p>和许多脚本语言提供的<code>IF()</code>函数一样，MySQL的IF()函数也可以建立一个简单的条件测试，这个函数有三个参数，第一个是要被判断的表达式，如果表达式为真，IF()将会返回第二个参数，如果为假，IF()将会返回第三个参数。</p>
<p>如：<code>SELECT IF(1&lt;10,2,3),IF(56&gt;100,'true','false');</code></p>
<p><code>IF()</code>函数在只有两种可能结果时才适合使用。然而，在现实世界中，我们可能发现在条件测试中会需要多个分支。在这种情况下，MySQL提供了CASE函数，它和PHP及Perl语言的<code>switch-case</code>条件例程一样。</p>
<br/>
<p><font color = green size = 4>IFNULL(arg1, arg2)解决Mysql聚合函数count(1) sum(1)结果返回0和NULL</font></p>
<ul>
<li>
<p><font color = blue>count(1)</font></p>
<ul>
<li>
<p>返回为0</p>
<blockquote>
<p>如果所查询的表或者where条件筛选后得到的结果集为空，则 count(1)返回为 0<br />
如：<br />
select count(id) from test;<br />
select count(id) from test where id &lt; 0;</p>
</blockquote>
</li>
<li>
<p>返回为NULL</p>
<blockquote>
<p>如果所查询的表或者where条件筛选后得到的结果集为空且当前层查询中使用了group by ，则 count(1)返回为 NULL<br />
如：<br />
select count(id) from test group by id;<br />
select count(id) from test where id &lt; 0 group by id;</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>sum(1)</font></p>
<ul>
<li>
<p>返回为NULL</p>
<blockquote>
<p>如果所查询的表或者where条件筛选后得到的结果集为空 ，则 sum(1)返回为 NULL<br />
如：<br />
select sum(id) from test;<br />
select sum(id) from test where id &lt; 0;</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<blockquote>
<p><font color = red>注：</font></p>
<p>如果想NULL转为0返回，可以使用<font color = dark>IFNULL（expression_1，expression_2）</font>；表示如果expression_1不为NULL，则IFNULL函数返回expression_1；否则返回expression_2的结果。<span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">如IFNULL（sum（id），0）</span></p>
</blockquote>
<br/>
<p><font color = green size = 4>CASE函数的格式有些复杂，通常如下所示：</font></p>
<p><font color = blue>1. 类似于java中点switch语句，一般用于实现等值判断</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE [expression to be evaluated]</span><br><span class="line">WHEN [val 1] THEN [result 1]</span><br><span class="line">WHEN [val 2] THEN [result 2]</span><br><span class="line">WHEN [val 3] THEN [result 3]</span><br><span class="line">......</span><br><span class="line">WHEN [val n] THEN [result n]</span><br><span class="line">ELSE [default result]</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue>2. 类似于java中的多重if语句，一般用于实现区间判断</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CASE</span><br><span class="line">WHEN [conditional test 1] THEN [result 1]</span><br><span class="line">WHEN [conditional test 2] THEN [result 2]</span><br><span class="line">ELSE [default result]</span><br><span class="line">END</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue>3. 例子</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 数值判断</span><br><span class="line">SELECT</span><br><span class="line">    t.NAME,</span><br><span class="line">    (</span><br><span class="line">        CASE t.sex</span><br><span class="line">        WHEN 1 THEN</span><br><span class="line">            &#x27;男&#x27;</span><br><span class="line">        WHEN 2 THEN</span><br><span class="line">            &#x27;女&#x27;</span><br><span class="line">        ELSE</span><br><span class="line">            &#x27;未知&#x27;</span><br><span class="line">        END</span><br><span class="line">    ) 性别</span><br><span class="line">FROM</span><br><span class="line">    t_customer t</span><br><span class="line">    </span><br><span class="line">-- 条件判断    </span><br><span class="line">SELECT</span><br><span class="line">    t.NAME,</span><br><span class="line">    (</span><br><span class="line">        CASE </span><br><span class="line">        WHEN t.sex=1 THEN</span><br><span class="line">            &#x27;男&#x27;</span><br><span class="line">        WHEN t.sex=2 THEN</span><br><span class="line">            &#x27;女&#x27;</span><br><span class="line">        ELSE</span><br><span class="line">            &#x27;未知&#x27;</span><br><span class="line">        END</span><br><span class="line">    ) 性别</span><br><span class="line">FROM</span><br><span class="line">    t_customer t</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- IF()函数</span><br><span class="line">select t.name,if(t.weight&lt;80,&#x27;正常&#x27;,&#x27;肥胖&#x27;) 体重 from t_customer t</span><br><span class="line"></span><br><span class="line">-- IFNULL(value1,value2)函数,这个函数一般用来替换NULL值的</span><br><span class="line">-- 把emp员工表的员工的提成给加100</span><br><span class="line">update emp set comm  = IFNULL(comm,0)+100</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="6-格式化函数"><a class="markdownIt-Anchor" href="#6-格式化函数"></a> 6. 格式化函数</h3>
<ul>
<li><code>DATE_FORMAT(date,fmt) </code> 依照字符串fmt格式化日期date值</li>
<li><code>FORMAT(x,y) </code> 把x格式化为以逗号隔开的数字序列，y是结果的小数位数</li>
<li><code>INET_ATON(ip) </code> 返回IP地址的数字表示</li>
<li><code>INET_NTOA(num) </code> 返回数字所代表的IP地址</li>
<li><code>TIME_FORMAT(time,fmt) </code> 依照字符串fmt格式化时间time值</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT FORMAT(34234.34323432,3);</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#x27;%W,%D %M %Y %r&#x27;);</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#x27;%Y-%m-%d&#x27;);</span><br><span class="line">SELECT DATE_FORMAT(19990330,&#x27;%Y-%m-%d&#x27;);</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#x27;%h:%i %p&#x27;);</span><br><span class="line">SELECT INET_ATON(&#x27;10.122.89.47&#x27;);</span><br><span class="line">SELECT INET_NTOA(175790383);</span><br></pre></td></tr></table></figure>
<br/>
<hr />
<h2 id="二-存储过程"><a class="markdownIt-Anchor" href="#二-存储过程"></a> 二、存储过程</h2>
<h3 id="1-创建存储过程"><a class="markdownIt-Anchor" href="#1-创建存储过程"></a> 1. 创建存储过程</h3>
<blockquote>
<p>创建存储过程的语句为 CREATE PROCEDURE，创建存储函数的语句为CREATE FUNCTION。</p>
<p>调用存储过程的语句为CALL。</p>
<p>调用存储函数的形式就像调用MySQL内部函数一样。</p>
</blockquote>
<p><font color = green size = 4>1. 创建存储过程示例</font></p>
<ul>
<li>
<p><font color = blue>1. 创建存储过程简单示例：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE ccgc()</span><br><span class="line">BEGIN</span><br><span class="line">SELECT * FROM TEXT;</span><br><span class="line">SELECT * FROM s_user;</span><br><span class="line">END</span><br><span class="line">//DELIMITER ;</span><br><span class="line"></span><br><span class="line">-- 调用</span><br><span class="line">CALL ccgc()</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>2. 创建带参数的存储过程：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE ccgc2(IN c_name VARCHAR(32))</span><br><span class="line">BEGIN</span><br><span class="line">    SELECT * FROM TEXT WHERE NAME = c_name;</span><br><span class="line">    SELECT * FROM s_user;</span><br><span class="line">END</span><br><span class="line">//DELIMITER ;</span><br><span class="line"></span><br><span class="line">-- 调用</span><br><span class="line">CALL ccgc2(参数)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>3. 创建输出参数存储过程</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE ccgc3(OUT c_name VARCHAR(32))</span><br><span class="line">BEGIN</span><br><span class="line">    SET c_name = &#x27;666&#x27;;</span><br><span class="line">    SELECT c_name;</span><br><span class="line">END</span><br><span class="line">//DELIMITER ;</span><br><span class="line"></span><br><span class="line">-- 调用</span><br><span class="line">CALL ccgc3(@c_name)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = blue>4. 输入输出和变量</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">CREATE PROCEDURE ccgc7(INOUT c_name VARCHAR(32))</span><br><span class="line">BEGIN</span><br><span class="line">    DECLARE hh VARCHAR(32) DEFAULT &#x27;1111111111&#x27;;</span><br><span class="line">    SELECT * FROM TEXT WHERE NAME = hh;</span><br><span class="line">END</span><br><span class="line">//DELIMITER ;</span><br><span class="line"></span><br><span class="line">CALL ccgc7(@c_name)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green>5. 对变量的定义和赋值</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 定义</span><br><span class="line">select @变量名  或者 select @变量名:= 字段名 from 表名 where 过滤语句;</span><br><span class="line">set @变量名;</span><br><span class="line"></span><br><span class="line">-- 赋值 @num为变量名，value为值</span><br><span class="line">set @num=value;或select @num:=value;</span><br><span class="line"></span><br><span class="line">-- 混合使用</span><br><span class="line">    declare i int;                      #申明变量</span><br><span class="line">    set i = 0;                          #变量赋值</span><br><span class="line"></span><br><span class="line">-- 局部变量（只在begin...end之间有效）</span><br><span class="line">declare var_name [, var_name]... data_type [ DEFAULT value ];</span><br><span class="line"></span><br><span class="line">-- Select into进行赋值</span><br><span class="line">select col_name[,...] into var_name[,...] table_expr [where...];</span><br></pre></td></tr></table></figure>
<br/>
<ul>
<li>
<p><font color = green>在MySQL存储过程中使用SELECT …INTO语句为变量赋值：用来将查询返回的一行的各个列值保存到局部变量中。</font></p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">要求：查询的结果集中只能有1行。</span></p>
<ul>
<li>
<p><font color = blue>1、单一变量赋值</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建过程，得到指定球员的所有罚款总额</span><br><span class="line">delimiter $$</span><br><span class="line">create procedure total_penalties_player(in p_playerno int,out total_penalties dec(8,2))</span><br><span class="line">begin</span><br><span class="line">select sum(amount)</span><br><span class="line">into total_penalties</span><br><span class="line">from PENALTIES</span><br><span class="line">where playerno=p_playerno;</span><br><span class="line">end $$</span><br><span class="line">delimiter ;</span><br><span class="line"></span><br><span class="line">call total_penalties_player(27,@total);</span><br><span class="line">select @total;</span><br><span class="line">+--------+</span><br><span class="line">| @total |</span><br><span class="line">+--------+</span><br><span class="line">| 175.00 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure>
<br/>
</li>
<li>
<p><font color = blue>2、多变量赋值</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建过程，得到一个给定球员的地址</span><br><span class="line">DELIMITER $$</span><br><span class="line">CREATE  PROCEDURE get_address(IN p_playerno SMALLINT,OUT p_street VARCHAR(30),</span><br><span class="line">OUT p_houseno VARCHAR(4),OUT p_town VARCHAR(30),OUT p_postcode VARCHAR(6))  </span><br><span class="line">BEGIN    </span><br><span class="line">SELECT street, houseno, town, postcode</span><br><span class="line">INTO p_street, p_houseno, p_town, p_postcode</span><br><span class="line">FROM PLAYERS</span><br><span class="line">WHERE playerno = p_playerno;           </span><br><span class="line">END $$</span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line">call get_address(27,@s,@h,@t,@p);</span><br><span class="line">select @s,@h,@t,@p;</span><br><span class="line">+------------+------+--------+--------+</span><br><span class="line">| @s         | @h   | @t     | @p     |</span><br><span class="line">+------------+------+--------+--------+</span><br><span class="line">| Long Drive | 804  | Eltham | 8457DK |</span><br><span class="line">+------------+------+--------+--------+</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><font color = red>注意：</font></p>
<p>在使用SELECT …INTO语句时，变量名和数据表中的字段名不能相同，否则会出错。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<br/>
<blockquote>
<p><font color = red>总结：</font></p>
<ol>
<li>如果仅仅想把数据传给MySQL存储过程，那就用in类型参数；</li>
<li>如果仅仅从MySQL存储过程返回值，那就用out类型参数；</li>
<li>如果需要把数据传给MySQL存储过程经过计算再传回给我们，那就用inout类型参数</li>
</ol>
</blockquote>
<br/>
<ul>
<li><font color = blue>5. 其他存储过程方法</font></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看存储过程;</span><br><span class="line">SHOW CREATE PROCEDURE proc_name;</span><br><span class="line"></span><br><span class="line">-- 查看函数:</span><br><span class="line">SHOW CREATE FUNCTION func_name;</span><br><span class="line"></span><br><span class="line">-- 删除存储过程:</span><br><span class="line">DROP PROCEDURE proc_name;</span><br><span class="line"></span><br><span class="line">-- 删除函数:</span><br><span class="line">DROP FUNCTION func_nmae;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = green size = 4>2. 存储过程实践</font></p>
<p><font color = blue>1. 定义一个根据ID查询学生记录的存储过程。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP PROCEDURE IF EXISTS getStuById;</span><br><span class="line"> </span><br><span class="line">DELIMITER //  -- 定义存储过程结束符号为//</span><br><span class="line">-- IN表示输入参数的存储过程；OUT表示输出参数的存储过程（可用@变量的方式调用）</span><br><span class="line">CREATE PROCEDURE getStuById(IN stuId INT(11),OUT stuName VARCHAR(255),OUT stuAge INT(11)) </span><br><span class="line">-- 定义输入与输出参数</span><br><span class="line">BEGIN</span><br><span class="line">   -- 利用输出变量返回自定义的多列数据</span><br><span class="line">   SELECT name ,age INTO stuName , stuAge FROM t_student WHERE id = stuId; -- 分号要加</span><br><span class="line">END // -- 结束符要加</span><br><span class="line">DELIMITER ;  -- 重新定义存储过程结束符为分号</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue>2. 查看刚才创建的存储过程。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SHOW PROCEDURE STATUS LIKE &#x27;g%&#x27;;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = blue>3. 下面是调用存储过程。对于存储过程提供的临时变量而言，MySQL规定要加上@开头。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># study是当前数据库名称</span><br><span class="line"> </span><br><span class="line">CALL study.getStuById(1,@name,@age);</span><br><span class="line"> </span><br><span class="line">SELECT @name AS stuName,@age AS stuAge;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://image.zxkidea.top/blog/20200310/HYGfjyJT6mQF.png?imageslim" alt="zxk" /></p>
<br/>
<h3 id="2-创建存储函数"><a class="markdownIt-Anchor" href="#2-创建存储函数"></a> 2. 创建存储函数</h3>
<p><font color = green size = 4>1. 创建存储函数</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP FUNCTION IF EXISTS getStuNameById;</span><br><span class="line"> </span><br><span class="line">DELIMITER //</span><br><span class="line">-- 默认是IN，但是不能写上去。stuId视为输入的临时变量</span><br><span class="line">CREATE FUNCTION getStuNameById(stuId INT)  </span><br><span class="line">RETURNS VARCHAR(255)   -- 指明返回值类型</span><br><span class="line">RETURN  (SELECT name FROM t_student WHERE id = stuId); //  </span><br><span class="line">-- 指明SQL语句,并使用结束标记。注意分号位置</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>
<br/>
<p><font color = green size = 4>2. 使用存储函数</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT getStuNameById(1);</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p><font color = red>总结：</font> <font color = green>从上述存储函数的写法上来看，存储函数有一定的缺点。首先与存储过程一样，只能返回一条结果记录。另外就是存储函数只能指明<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">一列数据</span>作为结果，而存储过程能够指明<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">多列数据</span>作为结果。</font></p>
</blockquote>
<br/>
<hr />
<h2 id="三-循环语句"><a class="markdownIt-Anchor" href="#三-循环语句"></a> 三、循环语句</h2>
<h3 id="1-while循环"><a class="markdownIt-Anchor" href="#1-while循环"></a> 1. while循环</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delimiter //                            #定义标识符为双斜杠</span><br><span class="line">drop procedure if exists test;          #如果存在test存储过程则删除</span><br><span class="line">create procedure test()                 #创建无参存储过程,名称为test</span><br><span class="line">begin</span><br><span class="line">    declare i int;                      #申明变量</span><br><span class="line">    set i = 0;                          #变量赋值</span><br><span class="line">    while i &lt; 10 do                     #结束循环的条件: 当i大于10时跳出while循环</span><br><span class="line">        insert into test values (i);    #往test表添加数据</span><br><span class="line">        set i = i + 1;                  #循环一次,i加一</span><br><span class="line">    end while;                          #结束while循环</span><br><span class="line">    select * from test;                 #查看test表数据</span><br><span class="line">end</span><br><span class="line">//                                      #结束定义语句</span><br><span class="line">call test();                            #调用存储过程</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="2repeat循环"><a class="markdownIt-Anchor" href="#2repeat循环"></a> 2.repeat循环</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delimiter //                            #定义标识符为双斜杠</span><br><span class="line">drop procedure if exists test;          #如果存在test存储过程则删除</span><br><span class="line">create procedure test()                 #创建无参存储过程,名称为test</span><br><span class="line">begin</span><br><span class="line">    declare i int;                      #申明变量</span><br><span class="line">    set i = 0;                          #变量赋值</span><br><span class="line">    repeat</span><br><span class="line">        insert into test values (i);    #往test表添加数据</span><br><span class="line">        set i = i + 1;                  #循环一次,i加一</span><br><span class="line">    until i &gt; 10 end repeat;            #结束循环的条件: 当i大于10时跳出repeat循环</span><br><span class="line">    select * from test;                 #查看test表数据</span><br><span class="line">end</span><br><span class="line">//                                      #结束定义语句</span><br><span class="line">call test();                            #调用存储过程</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="3-loop循环"><a class="markdownIt-Anchor" href="#3-loop循环"></a> 3. loop循环</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delimiter //                            #定义标识符为双斜杠</span><br><span class="line">drop procedure if exists test;          #如果存在test存储过程则删除</span><br><span class="line">create procedure test()                 #创建无参存储过程,名称为test</span><br><span class="line">begin</span><br><span class="line">    declare i int;                      #申明变量</span><br><span class="line">    set i = 0;                          #变量赋值</span><br><span class="line">    lp : loop                           #lp为循环体名,可随意 loop为关键字</span><br><span class="line">        insert into test values (i);    #往test表添加数据</span><br><span class="line">        set i = i + 1;                  #循环一次,i加一</span><br><span class="line">        if i &gt; 10 then                  #结束循环的条件: 当i大于10时跳出loop循环</span><br><span class="line">            leave lp;</span><br><span class="line">        end if; </span><br><span class="line">    end loop;</span><br><span class="line">    select * from test;                 #查看test表数据</span><br><span class="line">end</span><br><span class="line">//                                      #结束定义语句</span><br><span class="line">call test();                            #调用存储过程</span><br></pre></td></tr></table></figure>
<br/>
<hr />
<h2 id="四-limit详解"><a class="markdownIt-Anchor" href="#四-limit详解"></a> 四、Limit详解</h2>
<h3 id="1-作用"><a class="markdownIt-Anchor" href="#1-作用"></a> 1. 作用</h3>
<p><font color = green>Limit子句可以被用于强制 SELECT 语句返回指定的记录数。Limit接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 初始记录行的偏移量是 0(而不是 1);</span><br><span class="line">SELECT * FROM table LIMIT 5,10; -- 检索记录行6-15</span><br><span class="line"></span><br><span class="line">-- 为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1;</span><br><span class="line">SELECT * FROM table LIMIT 95,-1; -- 检索记录行 96-last</span><br><span class="line"></span><br><span class="line">-- 如果只给定一个参数，它表示返回最大的记录行数目。换句话说，LIMIT n 等价于 LIMIT 0,n：</span><br><span class="line">SELECT * FROM table LIMIT 5;     -- 检索前 5 个记录行</span><br></pre></td></tr></table></figure>
<br/>
<h3 id="2-limit效率"><a class="markdownIt-Anchor" href="#2-limit效率"></a> 2. Limit效率</h3>
<p><font color = red size = 4>1. Limit高效率的原理是：</font><font color = green size = 4>避免全表扫描，提高查询效率。</font></p>
<blockquote>
<p>在一种情况下，使用limit效率低，那就是：只使用limit来查询语句，并且<font color = blue>偏移量特别大</font>的情况</p>
<p>所以应当先使用where等查询语句，配合limit使用，效率才高</p>
<p>PS：在sql语句中，limit关键字是最后才用到的。以下条件的出现顺序一般是：where-&gt;group by-&gt;having-order by-&gt;limit</p>
</blockquote>
<br/>
<p><font color = green size = 4>2. 与OFFSET搭配</font></p>
<p><font color = blue>比较下面两句SQL语句</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 从数据库中第三条开始查询，取一条数据，即第三条数据读取，一二条跳过</span><br><span class="line">select * from testtable limit 2,1;</span><br><span class="line"></span><br><span class="line">-- 从数据库中的第二条数据开始查询两条数据，即第二条和第三条。</span><br><span class="line">select * from testtable limit 2 offset 1;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><font color = red>注意：</font></p>
<ol>
<li>数据库数据计算是从0开始的</li>
<li>Offset X是跳过X个数据，limit Y是选取Y个数据</li>
<li>Limit  X,Y  中X表示跳过X个数据，读取Y个数据</li>
</ol>
</blockquote>
<br/>
<h3 id="3-order-by多个字段"><a class="markdownIt-Anchor" href="#3-order-by多个字段"></a> 3. Order by多个字段</h3>
<blockquote>
<p>orderby多个字段时，用逗号分隔每一个字段，如果字段不指明排序方式，默认是增序。排序的方法是先按第一个字段排序，如果有相同的再按后续的字段依次排序。</p>
</blockquote>
<img data-src="https://image.zxkidea.top/blog/20200325/BCiqjNz10RXL.png?imageslim" alt="zxk" style="zoom:72%;" />
<img data-src="http://image.zxkidea.top/blog/20200325/3WTkJinFFu78.png?imageslim" alt="mark" style="zoom:60%;" />
<img data-src="http://image.zxkidea.top/blog/20200325/BVGxUxNmOxCB.png?imageslim" alt="mark" style="zoom:67%;" />
<br/>
<hr />
<h2 id="五-生成自增序列"><a class="markdownIt-Anchor" href="#五-生成自增序列"></a> 五、生成自增序列</h2>
<h3 id="1-作用-2"><a class="markdownIt-Anchor" href="#1-作用-2"></a> 1. 作用</h3>
<p><font color = green size = 4>对记录按照某种顺序进行排列后，通过序号来进行进一步筛选</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select (@i:=@i+1) as rownum, surname, personal_name from student, (select @i:=0) as init;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://image.zxkidea.top/blog/20200310/xG1IugBQWj6H.png?imageslim" alt="zxk" /></p>
<br/>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select (@i:=@i+5) as rownum, surname, personal_name from student, (select @i:=100) as init;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://image.zxkidea.top/blog/20200310/NEyjruN4tjA9.png?imageslim" alt="zxk" /></p>
<br/>
<p><font color = blue> 如果是多表联查，跟上述sql类似，连查完后定义一个初始化序列号即可：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select (@i:=@i+1) as rownum, A.surname, B.uname from student A</span><br><span class="line"></span><br><span class="line">left join user B on CONCAT(A.surname,A.personal_name) = B.uname, (select @i:=0) as init;</span><br></pre></td></tr></table></figure>
<p><img data-src="https://image.zxkidea.top/blog/20200310/6a6hYrVUqpOX.png?imageslim" alt="zxk" /></p>
<br/>
<h3 id="2-中位数运算"><a class="markdownIt-Anchor" href="#2-中位数运算"></a> 2. 中位数运算</h3>
<ul>
<li><font color = green size = 4>定义：</font>一串数字，按从小到大排列，当总数是奇数时，取最中间的数；当总数是偶数时，取最中间两个数的平均数。</li>
</ul>
<br/>
<ul>
<li><font color = green size = 4>解决思路：</font>按定义来，先排列，找出最中间的数，再取平均值。</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>准备表如下：</font></p>
<p><font color = blue>学生表，含姓名和分数</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table student (</span><br><span class="line">	id varchar(32) primary key,</span><br><span class="line">	value int</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">insert into student (id,value) values (&#x27;A&#x27;,40);</span><br><span class="line">insert into student (id,value) values (&#x27;B&#x27;,50);</span><br><span class="line">insert into student (id,value) values (&#x27;C&#x27;,60);</span><br><span class="line">insert into student (id,value) values (&#x27;D&#x27;,70);</span><br><span class="line">insert into student (id,value) values (&#x27;E&#x27;,80);</span><br><span class="line">insert into student (id,value) values (&#x27;F&#x27;,90);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>最终sql如下：</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select group_concat(id) gcid, avg(value) avgv from ( #最外层开始</span><br><span class="line">	select id, value from ( #第二层开始</span><br><span class="line">		select id, @index:=@index+1 as myindex, value from student, (select @index:=0) AS initvar order by value #最内层</span><br><span class="line">	) as t where floor(@index/2+1)=myindex or ceil(@index/2)=myindex #第二层结束</span><br><span class="line">) as x  #最外层结束</span><br></pre></td></tr></table></figure>
</li>
</ul>
<br/>
<ul>
<li>
<p><font color = green size = 4>解释：</font></p>
<ul>
<li>
<p>SQL分三层：最内层，第二层和最外层。</p>
<p>最内层是对成绩排序，并标注出名次，只执行最内层时结果如下：</p>
<p>对@变量不熟悉的同学自行百度，效果类似rownum。<font color = red>注意：执行完最内层时，@index的值就是总行数</font></p>
</li>
</ul>
<p><img data-src="https://image.zxkidea.top/blog/20200310/ijiuhW0KtKic.png?imageslim" alt="zxk" /></p>
<ul>
<li>
<p>第二层取出最中间的两个值，</p>
<p><font color = red>注意：floor和ceil的顺序：</font></p>
<p><font color = green>当@index是奇数时，floor(@index/2+1)和ceil(@index/2)的值一样的，@index=7时，floor(4.5) = ceil(3.5) = 4</font></p>
<p><font color = green>当@index是偶数时，floor(@index/2+1)和ceil(@index/2)的值不一样，@index=6时，floor(4) = 4，ceil(3) = 3</font></p>
<p><font color = green>这就解决了中位数定义中如果总个数是奇数只取一位，总个数是偶数取中间两个的平均数的问题。</font></p>
<br/>
<p>第二层执行完的结果如下：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200310/d7Q25OfCYKax.png?imageslim" alt="zxk" /></p>
<p><font color = red>注：如果总个数是奇数，第二层执行完只会出来一行记录</font></p>
</li>
</ul>
<br/>
<ul>
<li>
<p>最外层就简单了，取个平均数就行了。group_concat(id)只是用来看下中位数的学生是谁，可去掉。</p>
<table>
<thead>
<tr>
<th style="text-align:center">gcid</th>
<th style="text-align:center">avgv</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">C, D</td>
<td style="text-align:center">65</td>
</tr>
</tbody>
</table>
<br/>
<ul>
<li>
<p><font color = blue>group_concat()：</font></p>
<p><img data-src="https://image.zxkidea.top/blog/20200310/UrcNY0cP6S4D.png?imageslim" alt="zxk" /></p>
<blockquote>
<p>有没有更直观的方法，既让每个名字都只出现一次，又能够显示所有的名字相同的人的id呢？<font color = green>——使用group_concat()</font></p>
</blockquote>
<br/>
<ul>
<li><font color = blue>group_concat()用法：</font></li>
</ul>
<blockquote>
<p>1、功能：将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</p>
<p>2、语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator ‘分隔符’] )</p>
<p>说明：通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用order by子句；separator是一个字符串值，缺省为一个逗号。</p>
</blockquote>
<br/>
<ul>
<li>
<p><font color = blue>示例：</font>使用group_concat()和group by显示相同名字的人的id号：</p>
<p><img data-src="https://image.zxkidea.top/blog/20200310/rFgh9TE088g7.png?imageslim" alt="zxk" /></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>考研</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>部署NginxProxyManager实现反向代理管理</title>
    <url>/posts/6774414c.html</url>
    <content><![CDATA[<p><em>本部署教程是在腾讯云搭载2G，2核的Ubuntu 20.04轻量级服务器上进行实现的。</em></p>
<hr />
<h2 id="docker-部署nginxproxymanager"><a class="markdownIt-Anchor" href="#docker-部署nginxproxymanager"></a> Docker 部署NginxProxyManager</h2>
<p>首先在用户目录下创建<code>NginxProxyManager</code>文件夹及<code>docker-compose.yml</code>文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> NginxProxyManager</span><br><span class="line"><span class="built_in">cd</span> NginxProxyManager</span><br><span class="line"><span class="built_in">touch</span> docker-compose.yml</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"><span class="built_in">mkdir</span> letsencrypt</span><br></pre></td></tr></table></figure>
<p>将一下内容复制到<code>docker-compose.yml</code>文件中：</p>
<span id="more"></span>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  app:</span><br><span class="line">    image: <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;81:81&#x27;</span></span><br><span class="line">      - <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">    volumes:</span><br><span class="line">      - ./data:/data</span><br><span class="line">      - ./letsencrypt:/etc/letsencrypt</span><br></pre></td></tr></table></figure>
<p>启动<code>docker</code>应用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker-compose.yml</span><br></pre></td></tr></table></figure>
<br/>
<h2 id="登录nginxproxymanager面板进行反代配置"><a class="markdownIt-Anchor" href="#登录nginxproxymanager面板进行反代配置"></a> 登录NginxProxyManager面板进行反代配置</h2>
<p>访问<code>yourIP:8181</code>地址登录，默认账号密码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Email:    admin@example.com</span><br><span class="line">Password: changeme</span><br></pre></td></tr></table></figure>
<p>登录后通过<code>Let's Encrypt</code>申请<code>泛域名</code>证书，比如我的域名是<code>abc.mydomain.com</code>，若我想要所有的二级域名都能绑定<code>SSL</code>证书，则申请证书可以使用<code>*.mydomain.com</code>，这样后续任何子域名https访问都是没问题的了；对于原域名，同时申请<code>mydomain.com</code>即可：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/SMK86s16XU2V.png?imageslim" alt="rocky" /></p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/XBv1ko1KhwHJ.png?imageslim" alt="rocky" /></p>
<blockquote>
<p>这里我使用的是Aliyun的DNS解析，所以需要去阿里云获取<code>API_ID</code>和<code>API_Secret</code></p>
</blockquote>
<p><img data-src="https://image.zxkidea.top/blog/20220704/qIrXUCYpNfJA.png?imageslim" alt="rocky" /></p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/61BmNVqPEfzx.png?imageslim" alt="rocky" /></p>
<p>取到<code>AccessKey ID</code>和<code>AccessKey Secret</code>输入到上面的<code>Credentials File Content</code>中。</p>
<br/>
<p>接着配置子域名的解析，在阿里云的域名解析界面，将需要反代的子域名都配置<code>CNAME</code>到根域名，比如<code>abc.yourdomian.com</code>到<code>yourdomain.com</code>；最后对子域名进行反代配置：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220704/0GQujObJIiW0.png?imageslim" alt="rocky" /></p>
]]></content>
      <categories>
        <category>容器部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10微软拼音设置小鹤双拼</title>
    <url>/posts/ff0f4080.html</url>
    <content><![CDATA[<p>使用<code>Win+R</code>，输入<code>regedit.exe</code>打开注册表，找到这个路径：</p>
<p><code>计算机\HKEY_CURRENT_USER\Software\Microsoft\InputMethod\Settings\CHS</code></p>
<p><img data-src="https://image.zxkidea.top/docsify/20221107/1ARea5SFuFWe.png?imageslim" alt="rocky" /></p>
<span id="more"></span>
<br/>
<p>接着新建一个名为<code>UserDefinedDoublePinyinScheme0</code>的字符串值，数值数据为：</p>
<p><code>小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt</code></p>
<p><img data-src="https://image.zxkidea.top/docsify/20221107/qmm8n3BeUzYd.png?imageslim" alt="rocky" /></p>
<br/>
<p>然后打开控制面板，找到微软拼音的配置页面，把新出现的小鹤双拼设置为默认值。</p>
<p><img data-src="https://image.zxkidea.top/docsify/20221107/DvPoLV9NjOM6.png?imageslim" alt="rocky" /></p>
<br/>
<p>在<code>Win10</code>中，默认输入法是中文输入法，所有程序使用相同的输入法，这种模式有时候不是很方便，比如我们在聊天时突然需要打开浏览器输入url，所以最好是当打开每个程序时，默认是英文输入法，需要时切换为中文输入法。</p>
<p>我们需要去<code>高级键盘配置</code>中去修改：</p>
<p><img data-src="https://image.zxkidea.top/docsify/20221107/0mQFbIhDtUhv.png?imageslim" alt="rocky" /></p>
<p><img data-src="https://image.zxkidea.top/docsify/20221107/vnatKgobHbmU.png?imageslim" alt="rocky" /></p>
]]></content>
      <categories>
        <category>常用工具</category>
      </categories>
      <tags>
        <tag>Win10</tag>
      </tags>
  </entry>
  <entry>
    <title>docker设置二级域名转发nginx</title>
    <url>/posts/89d4b6e.html</url>
    <content><![CDATA[<ol>
<li><strong>首先随便启动一个nginx容器</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --name nginx -p 80:80 -d nginx</span><br></pre></td></tr></table></figure>
<br/>
<ol start="2">
<li><strong>进入目标文件夹创建代理服务器的文件夹</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> html conf <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<br/>
<ol start="3">
<li><strong>拷贝容器文件到宿主机中</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html /home/superman/proxy_nginx</span><br><span class="line"></span><br><span class="line">sudo docker <span class="built_in">cp</span> nginx:/var/log/nginx /home/superman/proxy_nginx/log</span><br><span class="line"></span><br><span class="line">sudo docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /home/superman/proxy_nginx/conf</span><br></pre></td></tr></table></figure>
<br/>
<ol start="4">
<li><strong>删除原容器并启动目标容器：</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">rm</span> nginx </span><br><span class="line"></span><br><span class="line">sudo docker run -p 80:80 --name proxy_nginx -v /home/superman/proxy_nginx/log:/var/log/nginx -v /home/superman/proxy_nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/superman/proxy_nginx/html:/usr/share/nginx/html -d nginx</span><br></pre></td></tr></table></figure>
<br/>
<ol start="5">
<li><strong>修改nginx.conf文件，在http节点下添server节点；对多个web项目进行域名转发</strong>(qinglong，paperless……)</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;         <span class="comment">#监听的端口</span></span><br><span class="line">    server_name  qinglong.zxkidea.top;    <span class="comment">#监听的URL</span></span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_redirect off;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_pass http://43.142.73.172:5700; <span class="comment"># qinglong面板</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;         <span class="comment">#监听的端口</span></span><br><span class="line">    server_name  paper.zxkidea.top;    <span class="comment">#监听的URL</span></span><br><span class="line">    location / &#123;</span><br><span class="line">       proxy_redirect off;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        proxy_pass http://43.142.73.172:8010; <span class="comment"># paperless</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>容器部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装使用VNC远程桌面</title>
    <url>/posts/64145778.html</url>
    <content><![CDATA[<h2 id="1在linux服务器上安装配置vnc-server"><a class="markdownIt-Anchor" href="#1在linux服务器上安装配置vnc-server"></a> 1.在Linux服务器上安装配置VNC-server</h2>
<h3 id="11-配置vnc-server"><a class="markdownIt-Anchor" href="#11-配置vnc-server"></a> 1.1 配置vnc-server</h3>
<h4 id="111-安装vnc服务端并设置vnc连接密码"><a class="markdownIt-Anchor" href="#111-安装vnc服务端并设置vnc连接密码"></a> 1.1.1 安装VNC服务端并设置VNC连接密码</h4>
<p>首先安装vnc的server（若没有安装的话）；需要root权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su</span><br><span class="line">yum install tigervnc tigervnc-server</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>登录非root用户，如admin；设置vncpassword</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vncpasswd </span><br><span class="line"><span class="comment">#Password:!d0802</span></span><br><span class="line"><span class="comment">#Verify:!d0802</span></span><br><span class="line"><span class="comment"># 注意：would you like to enter a viwer-only password(y/n)? y</span></span><br></pre></td></tr></table></figure>
<h4 id="112-拷贝并修改配置文件"><a class="markdownIt-Anchor" href="#112-拷贝并修改配置文件"></a> 1.1.2 拷贝并修改配置文件</h4>
<p>安装完成后开始配置, 将模板配置文件拷贝至配置文件目录下<code>/etc/systemmd/system/</code>, 如果是多用户，则每个用户拷贝一份，其中<code>@:1.service</code>中的数字<code>1</code>对应VNC服务端口<code>5901</code>，数字<code>2</code>对应端口<code>5902</code>根据自己的需求设置即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 复制配置模板文件</span></span><br><span class="line"><span class="comment"># 需要root权限</span></span><br><span class="line">su</span><br><span class="line"><span class="built_in">cp</span> /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br><span class="line"><span class="comment"># 编辑配置文件</span></span><br><span class="line">vi /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>
<p>进入service文件，按下面图片的方式更改：</p>
<p><img data-src="https://image.zxkidea.top/blog/20201122/r7GNK8BpVt5H.png?imageslim" alt="zxk" /></p>
<h4 id="113-重新加载配置文件"><a class="markdownIt-Anchor" href="#113-重新加载配置文件"></a> 1.1.3 重新加载配置文件</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重新加载systemctl文件</span></span><br><span class="line">systemctl deamon-reload</span><br></pre></td></tr></table></figure>
<h4 id="114-启动vnc并设置开机启动"><a class="markdownIt-Anchor" href="#114-启动vnc并设置开机启动"></a> 1.1.4 启动VNC并设置开机启动</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动VNC服务</span></span><br><span class="line">systemctl start vncserver@:1.service</span><br><span class="line"><span class="comment"># 设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> vncserver@:1.service</span><br></pre></td></tr></table></figure>
<h4 id="115-添加防火墙例外"><a class="markdownIt-Anchor" href="#115-添加防火墙例外"></a> 1.1.5 添加防火墙例外</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加 VNC 服务例外</span></span><br><span class="line">firewall-cmd --permanent --add-service vnc-server</span><br><span class="line"><span class="comment"># 添加 5901 端口例外</span></span><br><span class="line">firewall-cmd --permanent --add-port=5901/tcp</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>
<h4 id="116-创建vnc-service"><a class="markdownIt-Anchor" href="#116-创建vnc-service"></a> 1.1.6 创建VNC service</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定1920x1080分辨率的窗口</span></span><br><span class="line">vncserver -geometry 1920x1080</span><br><span class="line"><span class="comment"># 查看vnc-server的状态</span></span><br><span class="line">vncserver -list</span><br></pre></td></tr></table></figure>
<h2 id="2-在windows下安装配置vnc服务"><a class="markdownIt-Anchor" href="#2-在windows下安装配置vnc服务"></a> 2. 在Windows下安装配置VNC服务</h2>
<p>在<a href="https://www.realvnc.com/en/connect/download/viewer/windows/%E4%B8%8B%E4%B8%8B%E8%BD%BDWindows%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%89%E7%85%A7%E6%8C%87%E7%A4%BA%E5%AE%8C%E6%88%90%E5%AE%89%E8%A3%85%EF%BC%9A">https://www.realvnc.com/en/connect/download/viewer/windows/下下载Windows的客户端，然后按照指示完成安装：</a></p>
<p><img data-src="https://image.zxkidea.top/blog/20201122/8Hh59fFehsCx.png?imageslim" alt="zxk" /></p>
<h2 id="3-在windows下远程连接服务器"><a class="markdownIt-Anchor" href="#3-在windows下远程连接服务器"></a> 3. 在Windows下远程连接服务器</h2>
<ol>
<li>
<p>打开VNC-Viewer，Files——&gt;New Connection，输入VNC Server的IP地址，一个服务器上可以开启多个VNC服务，使用数字来标识，我们要连接第一个那就要输入例如：10.10.65.1:1，加密方式默认就可以了，Name的名字随意取即可。</p>
<p><img data-src="https://image.zxkidea.top/blog/20201122/eLysVDsuNfsT.png?imageslim" alt="zxk" /></p>
</li>
<li>
<p>双击小电脑即可进行连接，弹出对话框，输入之前vncpasswd设置的密码即可；点击连接，就可以远程连接CentOS桌面，再输入系统密码进入，如下图所示：</p>
<p><img data-src="https://image.zxkidea.top/blog/20201122/5ItrB5WfdnSE.png?imageslim" alt="zxk" /></p>
</li>
<li>
<p>若远程桌面模糊，在Properties中设置Picture quality为Medium即可，此时需要较为稳定的网速，不然容易出现卡顿！</p>
</li>
</ol>
<h2 id="4-vnc与anaconda冲突问题"><a class="markdownIt-Anchor" href="#4-vnc与anaconda冲突问题"></a> 4. VNC与Anaconda冲突问题</h2>
<p><font color = red>问题：</font>Could not make bus activated clients aware of XDG_CURRENT_DESKTOP=GNOME environment variable: Could not connect: Connection refused</p>
<blockquote>
<p>查看用户services启动的错误日志：如，cat /root/.vnc/kevin:1.log</p>
<p>** (process:31798): WARNING **: 21:56:03.861: Could not make bus activated clients aware of XDG_CURRENT_DESKTOP=GNOME environment variable:<br />
Could not connect: Connection refused</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">原因：dbus-daemon存在冲突。</span><br><span class="line">因为root系统环境中装有anaconda，它的bin目录中的dbus-daemon会与系统自带的dbus-daemon冲突。</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kevin ~]<span class="comment"># find / -name &quot;dbus-daemon&quot;</span></span><br><span class="line">/usr/bin/dbus-daemon</span><br><span class="line">/data/anaconda3/bin/dbus-daemon</span><br><span class="line">/data/anaconda3/pkgs/dbus-1.13.6-h746ee38_0/bin/dbus-daemon</span><br></pre></td></tr></table></figure>
<p><font color=red>解决办法：</font>vnc和anaconda冲突解决方法：could not make bus activated clients aware of XDG_CURRENT_DESKTOP=GNOME envi；</p>
<p>1、注释掉~/.bashrc中anaconda相关的环境变量设置；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &gt;&gt;&gt; conda initialize &gt;&gt;&gt;</span></span><br><span class="line"><span class="comment"># !! Contents within this block are managed by &#x27;conda init&#x27; !!</span></span><br><span class="line">__conda_setup=<span class="string">&quot;<span class="subst">$(&#x27;/usr/local/anaconda3/bin/conda&#x27; &#x27;shell.bash&#x27; &#x27;hook&#x27; 2&gt; /dev/null)</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ $? -eq 0 ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="variable">$__conda_setup</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/usr/local/anaconda3/etc/profile.d/conda.sh&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        . <span class="string">&quot;/usr/local/anaconda3/etc/profile.d/conda.sh&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">export</span> PATH=<span class="string">&quot;/usr/local/anaconda3/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">unset</span> __conda_setup</span><br><span class="line"><span class="comment"># &lt;&lt;&lt; conda initialize &lt;&lt;&lt;</span></span><br></pre></td></tr></table></figure>
<p>2.执行source ~/.bashrc</p>
<p>3.重启一个xshell连接，启动VNC</p>
<p>4.还原~/.bashrc中的注释掉的anaconda相关的环境变量</p>
<p>5.再次执行source ~/.bashrc</p>
]]></content>
      <categories>
        <category>CentOS配置</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>资料整理</tag>
      </tags>
  </entry>
  <entry>
    <title>WSL + oh-my-zsh终端方案</title>
    <url>/posts/97d7db00.html</url>
    <content><![CDATA[<p><em>本方案是在Win10 1903版本、WSL 1.13及Ubuntu 20.04上实现的</em></p>
<hr />
<h2 id="安装和配置wsl"><a class="markdownIt-Anchor" href="#安装和配置wsl"></a> 安装和配置WSL</h2>
<p>Windows本地需要先在微软应用商店安装WSL，然后可以看<a href="https://sspai.com/post/59380">此处的教程</a>进行配置</p>
<br />
<h2 id="安装和配置oh-my-zsh"><a class="markdownIt-Anchor" href="#安装和配置oh-my-zsh"></a> 安装和配置oh-my-zsh</h2>
<ol>
<li>
<p><strong>安装zsh</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-install zsh</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<br />
</li>
<li>
<p><strong>查看当前系统可使用的shell</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/shells</span><br></pre></td></tr></table></figure>
<br />
</li>
<li>
<p><strong>查看当前系统默认的shell</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure>
<br />
</li>
<li>
<p><strong>将默认的bash改成zsh，然后保存</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/passwd     </span><br></pre></td></tr></table></figure>
<ul>
<li>第一行的<code>/bin/bash</code>换成<code>/bin/zsh</code>,这个是root用户</li>
<li>本系统中你的用户账号下那一行将<code>/home/account:/bin/bash</code>也换成<code>/home/account:/bin/zsh</code></li>
</ul>
<br />
</li>
<li>
<p><strong>安装oh-my-zsh</strong></p>
<p>使用 curl 下载安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<br />
</li>
<li>
<p><strong>修改oh-my-zsh默认主题</strong></p>
<ul>
<li>配置主题可以通过修改<code> ~/.zshrc</code> 中的环境变量<code>ZSH_THEME</code>来完成</li>
</ul>
<p><img data-src="https://image.zxkidea.top/blog/20220610/EcnQP4o9Hrzv.png?imageslim" alt="rocky" /></p>
<p>使用<code>source ~/.zsh</code>使配置文件生效。</p>
<blockquote>
<p>注意此时终端可能会出现乱码，使用以下方式解决</p>
</blockquote>
<br />
<ul>
<li>
<p>打开本地的Git bash终端下载字体</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># windos 下需先安装 git</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1 </span><br></pre></td></tr></table></figure>
<p>克隆下来的文件里有个使用Power Shell打开的文件，使用右击Power Shell打开就会自动安装字体。</p>
<br />
</li>
<li>
<p>安装完成后在WSL中进行配置</p>
<p><img data-src="https://image.zxkidea.top/blog/20220610/DEMgXlgJgO5f.png?imageslim" alt="rocky" /></p>
</li>
</ul>
<p><img data-src="https://image.zxkidea.top/blog/20220610/t7fLBBsudXGk.png?imageslim" alt="rocky" /></p>
<p>重新打开WSL就可以看到字体显示正常了。</p>
<br />
</li>
<li>
<p><strong>安装oh-my-zsh插件</strong></p>
<ul>
<li>
<p>安装自动提示插件zsh-autosuggestions</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<p>使用方法：输入命令时观察指令，若出现淡色提示则可以使用<code>-&gt;</code>进行所有补全，使用<code>CTRL + -&gt;</code>进行单词补全。</p>
<br />
</li>
<li>
<p>安装语法高亮插件zsh-syntax-highlighting</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<br />
</li>
<li>
<p>安装The fuck插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3-dev python3-pip python3-setuptools</span><br><span class="line">sudo pip3 install thefuck</span><br></pre></td></tr></table></figure>
<p>然后将<code>eval $(thefuck --alias)</code>添加到<code>~/.zshrc</code>，此时就配置完成了。</p>
<blockquote>
<p>使用方法：输入<code>ppthon</code>，得到错误停止，然后再输入<code>fuck</code>进行修正。</p>
</blockquote>
</li>
</ul>
<br />
<ul>
<li>
<p>安装completions插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-completions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions</span><br></pre></td></tr></table></figure>
<p>通过在<code>source &quot;$ZSH/oh-my-zsh.sh&quot;</code>之前添加以下行，将其添加到<code>.zshrc</code>中的<code>fpath</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fpath+=<span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-completions/src</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：每次Zsh调用时重新构建两次完成缓存</p>
</blockquote>
</li>
</ul>
<br />
<ul>
<li>
<p>安装autojump插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autojump</span><br></pre></td></tr></table></figure>
<p>除了在还要在<code>~/.zshrc</code>中配置plugins，还要将下面这句写到文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 放在source &quot;$ZSH/oh-my-zsh.sh&quot;之前</span></span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>
<p><code>autojump</code>的使用：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th style="text-align:center">example</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td style="text-align:center">在终端输入d，可以显示刚刚走过的路径，然后按数字选择进入哪一个目录</td>
</tr>
<tr>
<td>j libs</td>
<td style="text-align:center">可以匹配到之前访问的地址</td>
</tr>
<tr>
<td>j     {foo}</td>
<td style="text-align:center">跳转到一个包含foo字符串的目录</td>
</tr>
<tr>
<td>jc {foo}</td>
<td style="text-align:center">跳转到一个包含foo字符串目录的子目录</td>
</tr>
<tr>
<td>jo {foo}</td>
<td style="text-align:center">在终端直接打开包含foo字符串目录的文件管理器(必须安装有Linux桌面环境，如GNOME，通过XShell/SecureCRT远程连的服务器那么这个不可用)</td>
</tr>
<tr>
<td>jco {foo}</td>
<td style="text-align:center">在终端直接打开包含foo字符串目录的子目录的的文件管理器</td>
</tr>
<tr>
<td>j {w} {foo}</td>
<td style="text-align:center">那么<code>j bar</code>会跳转到权重最大的目录，<br/>你也可以通过<code>j w bar</code>跳转到权重相对较小的目录</td>
</tr>
<tr>
<td>j --purge</td>
<td style="text-align:center">清除不再需要的目录</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：只有打开过的目录 autojump 才会记录，所以使用时间越长，autojump 才会越智能；可以使用 <code>autojump</code> 命令，或者使用短命令 <code>j</code>.</p>
</blockquote>
<br />
</li>
<li>
<p>当我们输入命令需要管理员身份时，不必让光标回到开始打一个<code>sudo</code>，可以直接按两次<code>Esc</code>，就会自动帮你加上<code>sudo</code>。</p>
<blockquote>
<p>注意：Thefuck 也绑定了快捷键<code>Esc-Esc</code>，我们需要使用<code>bindkey</code>命令进行更改。</p>
</blockquote>
</li>
</ul>
<p>使用<code>cat</code>指令，接着敲击<code>Esc-Esc</code>来查看其编码，将<code>^[^[</code>更改到模板中，并将如下命令添加到<code>.zshrc</code>的最后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bindkey</span></span><br><span class="line"><span class="built_in">bindkey</span> <span class="string">&#x27;^[^[&#x27;</span> sudo-command-line</span><br></pre></td></tr></table></figure>
<br />
<ul>
<li>
<p>最后我们打开文件<code>.zshrc</code>配置插件：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220611/0uoK1S9Ue5Ke.png?imageslim" alt="rocky" /></p>
</li>
</ul>
<p>然后使用<code>source ~/.zshrc </code>使配置生效。</p>
<br />
</li>
<li>
<p><strong>在zsh中配置命令的别名</strong></p>
<p>打开配置文件<code>vim ~/.zshrc</code>,将别名配置到后面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> gcm=<span class="string">&quot;git commit</span></span><br><span class="line"><span class="string">alias gck=&quot;</span>git checkout<span class="string">&quot;</span></span><br><span class="line"><span class="string">alias gbr=&quot;</span>git branch</span><br><span class="line"><span class="built_in">alias</span> gss=<span class="string">&quot;git status</span></span><br><span class="line"><span class="string">alias gmg=&quot;</span>git merge<span class="string">&quot;</span></span><br><span class="line"><span class="string">alias gpullo=&quot;</span>git pull origin<span class="string">&quot;</span></span><br><span class="line"><span class="string">alias gpusho=&quot;</span>git push origin<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>
<p>重新执行文件<code>source ~/.zshrc</code>；</p>
<p>到git仓库下看看，使用<code>gck master</code>验证成功，可以节省很多开发时间。</p>
<br />
</li>
<li>
<p><strong>卸载oh-my-zsh</strong></p>
<ul>
<li>
<p>卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/uninstall.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>将/bin/bash变成/bin/zsh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/passwd   //打开将第一行和最后变成/bin/zsh</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux运维</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>五大经典算法分析</title>
    <url>/posts/31d96ab6.html</url>
    <content><![CDATA[<p>转载自：五大经典算法分析   <a href="https://www.cnblogs.com/parzulpan/p/9919208.html">https://www.cnblogs.com/parzulpan/p/9919208.html</a></p>
<hr />
<h1 id="分治算法"><a class="markdownIt-Anchor" href="#分治算法"></a> 分治算法</h1>
<p><font size = 5>1. 基本概念</font></p>
<p>在计算机科学中，分治法是一种很重要的算法。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……</p>
<p>任何一个可以用计算机求解的问题所需的计算时间都与其规模有关。问题的规模越小，越容易直接求解，解题所需的计算时间也越少。例如，对于n个元素的排序问题，当n=1时，不需任何计算。n=2时，只要作一次比较即可排好序。n=3时只要作3次比较即可，…。而当n较大时，问题就不那么容易处理了。要想直接解决一个规模较大的问题，有时是相当困难的。</p>
<span id="more"></span>
<hr />
<p><font size = 5>2. 基本思想及策略</font></p>
<p>分治法的设计思想是：将一个难以直接解决的大问题，分割成一些规模较小的相同问题，以便各个击破，分而治之。</p>
<p>分治策略是：对于一个规模为n的问题，若该问题可以容易地解决（比如说规模n较小）则直接解决，否则将其分解为k个规模较小的子问题，这些子问题互相独立且与原问题形式相同，递归地解这些子问题，然后将各子问题的解合并得到原问题的解。这种算法设计策略叫做分治法。</p>
<p>如果原问题可分割成k个子问题，1&lt;k≤n，且这些子问题都可解并可利用这些子问题的解求出原问题的解，那么这种分治法就是可行的。由分治法产生的子问题往往是原问题的较小模式，这就为使用递归技术提供了方便。在这种情况下，反复应用分治手段，可以使子问题与原问题类型一致而其规模却不断缩小，最终使子问题缩小到很容易直接求出其解。这自然导致递归过程的产生。分治与递归像一对孪生兄弟，经常同时应用在算法设计之中，并由此产生许多高效算法。</p>
<hr />
<p><font size = 5>3. 分治法适用的情况</font></p>
<p>​    分治法所能解决的问题一般具有以下几个特征：</p>
<p>​    1) 该问题的规模缩小到一定的程度就可以容易地解决</p>
<p>​    2) 该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p>
<p>​    3) 利用该问题分解出的子问题的解可以合并为该问题的解；</p>
<p>​    4) 该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p>
<p>第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p>
<p><strong>第二条特征是应用分治法的前提</strong>它也是大多数问题可以满足的，此特征反映了递归思想的应用；、</p>
<p><strong>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征</strong>，如果<strong>具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法</strong>。</p>
<p><strong>第四条特征涉及到分治法的效率</strong>，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但<strong>一般用动态规划法较好</strong>。</p>
<hr />
<p><font size = 5>4. 分治法的基本步骤</font></p>
<p>分治法在每一层递归上都有三个步骤：</p>
<p>​    step1 分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；</p>
<p>​    step2 解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</p>
<p>​    step3 合并：将各个子问题的解合并为原问题的解。</p>
<p>它的一般的算法设计模式如下：</p>
<p>​    Divide-and-Conquer(P)</p>
<p>​    1. if |P|≤n0</p>
<p>​    2. then return(ADHOC(P))</p>
<p>​    3. 将P分解为较小的子问题 P1 ,P2 ,…,Pk</p>
<p>​    4. for i←1 to k</p>
<p>​    5. do yi ← Divide-and-Conquer(Pi) △ 递归解决Pi</p>
<p>​    6. T ← MERGE(y1,y2,…,yk) △ 合并子问题</p>
<p>​    7. return(T)</p>
<p>​    其中|P|表示问题P的规模；n0为一阈值，表示当问题P的规模不超过n0时，问题已容易直接解出，不必再继续分解。ADHOC(P)是该分治法中的基本子算法，用于直接解小规模的问题P。因此，当P的规模不超过n0时直接用算法ADHOC(P)求解。算法MERGE(y1,y2,…,yk)是该分治法中的合并子算法，用于将P的子问题P1 ,P2 ,…,Pk的相应的解y1,y2,…,yk合并为P的解。</p>
<hr />
<p><font size = 5>5. 分治法的复杂性分析</font></p>
<p>​    一个分治法将规模为n的问题分成k个规模为n／m的子问题去解。设分解阀值n0=1，且adhoc解规模为1的问题耗费1个单位时间。再设将原问题分解为k个子问题以及用merge将k个子问题的解合并为原问题的解需用f(n)个单位时间。用T(n)表示该分治法解规模为|P|=n的问题所需的计算时间，则有：</p>
<p>T（n）= k T(n/m)+f(n)</p>
<p>​    通过迭代法求得方程的解：</p>
<p>​    <strong>递归方程及其解只给出n等于m的方幂时T(n)的值，但是如果认为T(n)足够平滑，那么由n等于m的方幂时T(n)的值可以估计T(n)的增长速度。通常假定T(n)是单调上升的，从而当mi≤n&lt;mi+1时，T(mi)≤T(n)&lt;T(mi+1)。</strong></p>
<hr />
<p><font size = 5>6. 可使用分治法求解的一些经典问题</font></p>
<p>（1）二分搜索</p>
<p>（2）大整数乘法</p>
<p>（3）Strassen矩阵乘法</p>
<p>（4）棋盘覆盖</p>
<p>（5）合并排序</p>
<p>（6）快速排序</p>
<p>（7）线性时间选择</p>
<p>（8）最接近点对问题</p>
<p>（9）循环赛日程表</p>
<p>（10）汉诺塔</p>
<hr />
<p><font size = 5>7. 依据分治法设计程序时的思维过程</font></p>
<p><strong>实际上就是类似于数学归纳法，找到解决本问题的求解方程公式，然后根据方程公式设计递归程序。</strong></p>
<p><strong>1、一定是先找到最小问题规模时的求解方法</strong></p>
<p><strong>2、然后考虑随着问题规模增大时的求解方法</strong></p>
<p><strong>3、找到求解的递归函数式后（各种规模或因子），设计递归程序即可。</strong></p>
<hr />
<h1 id="动态规划算法"><a class="markdownIt-Anchor" href="#动态规划算法"></a> 动态规划算法</h1>
<p><font size = 5>1. 基本概念</font></p>
<p>​    动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。</p>
<p><font size = 5>2. 基本思想与策略</font></p>
<p>​    基本思想与分治法类似，也是将待求解的问题分解为若干个子问题（阶段），按顺序求解子阶段，前一子问题的解，为后一子问题的求解提供了有用的信息。在求解任一子问题时，列出各种可能的局部解，通过决策保留那些有可能达到最优的局部解，丢弃其他局部解。依次解决各子问题，最后一个子问题就是初始问题的解。</p>
<p>​    由于动态规划解决的问题多数有重叠子问题这个特点，为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在一个二维数组中。</p>
<p>​    与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的（即下一个子阶段的求解是建立在上一个子阶段的解的基础上，进行进一步的求解）。</p>
<hr />
<p><font size = 5>3. 适用的情况</font></p>
<p>能采用动态规划求解的问题的一般要具有3个性质：</p>
<p>​    (1) 最优化原理：如果问题的最优解所包含的子问题的解也是最优的，就称该问题具有最优子结构，即满足最优化原理。</p>
<p>​    (2) 无后效性：即某阶段状态一旦确定，就不受这个状态以后决策的影响。也就是说，某状态以后的过程不会影响以前的状态，只与当前状态有关。</p>
<p>（3）有重叠子问题：即子问题之间是不独立的，一个子问题在下一阶段决策中可能被多次使用到。（该性质并不是动态规划适用的必要条件，但是如果没有这条性质，动态规划算法同其他算法相比就不具备优势）</p>
<hr />
<p><font size = 5>4. 求解的基本步骤</font></p>
<p>​     动态规划所处理的问题是一个多阶段决策问题，一般由初始状态开始，通过对中间阶段决策的选择，达到结束状态。这些决策形成了一个决策序列，同时确定了完成整个过程的一条活动路线(通常是求最优的活动路线)。如图所示。动态规划的设计都有着一定的模式，一般要经历以下几个步骤。</p>
<p>​    初始状态→│决策１│→│决策２│→…→│决策ｎ│→结束状态</p>
<p>​                      图1 动态规划决策过程示意图</p>
<p>​    (1)<strong>划分阶段</strong>：按照问题的时间或空间特征，把问题分为若干个阶段。在划分阶段时，注意划分后的阶段一定要是有序的或者是可排序的，否则问题就无法求解。</p>
<p>​    (2)<strong>确定状态和状态变量</strong>：将问题发展到各个阶段时所处于的各种客观情况用不同的状态表示出来。当然，状态的选择要满足无后效性。</p>
<p>​    (3)<strong>确定决策并写出状态转移方程</strong>：因为决策和状态转移有着天然的联系，状态转移就是根据上一阶段的状态和决策来导出本阶段的状态。所以如果确定了决策，状态转移方程也就可写出。但事实上常常是反过来做，根据相邻两个阶段的状态之间的关系来确定决策方法和状态转移方程。</p>
<p>​    (4)<strong>寻找边界条件</strong>：给出的状态转移方程是一个递推式，需要一个递推的终止条件或边界条件。</p>
<p>​    一般，只要解决问题的阶段、状态和状态转移决策确定了，就可以写出状态转移方程（包括边界条件）。</p>
<p>实际应用中可以按以下几个简化的步骤进行设计：</p>
<p>​    （1）分析最优解的性质，并刻画其结构特征。</p>
<p>​    （2）递归的定义最优解。</p>
<p>​    （3）以自底向上或自顶向下的记忆化方式（备忘录法）计算出最优值</p>
<p>​    （4）根据计算最优值时得到的信息，构造问题的最优解</p>
<hr />
<p><font size = 5>5. 算法实现的说明</font></p>
<p>​    动态规划的主要难点在于理论上的设计，也就是上面4个步骤的确定，一旦设计完成，实现部分就会非常简单。</p>
<p>​     使用动态规划求解问题，最重要的就是确定动态规划三要素：</p>
<p>​    （1）问题的阶段 （2）每个阶段的状态</p>
<p>​    （3）从前一个阶段转化到后一个阶段之间的递推关系。</p>
<p>​     递推关系必须是从次小的问题开始到较大的问题之间的转化，从这个角度来说，动态规划往往可以用递归程序来实现，不过因为递推可以充分利用前面保存的子问题的解来减少重复计算，所以对于大规模问题来说，有递归不可比拟的优势，这也是动态规划算法的核心之处。</p>
<p>​    确定了动态规划的这三要素，整个求解过程就可以用一个最优决策表来描述，最优决策表是一个二维表，其中行表示决策的阶段，列表示问题状态，表格需要填写的数据一般对应此问题的在某个阶段某个状态下的最优值（如最短路径，最长公共子序列，最大价值等），填表的过程就是根据递推关系，从1行1列开始，以行或者列优先的顺序，依次填写表格，最后根据整个表格的数据通过简单的取舍或者运算求得问题的最优解。</p>
<p>​          <strong>f(n,m)=max{f(n-1,m), f(n-1,m-w[n])+P(n,m)}</strong></p>
<hr />
<p><font size = 5>6. 动态规划算法基本框架</font></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>; j&lt;=m; j=j+<span class="number">1</span>) <span class="comment">// 第一个阶段</span></span><br><span class="line">   xn[j] = 初始值;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(i=n-<span class="number">1</span>; i&gt;=<span class="number">1</span>; i=i-<span class="number">1</span>)<span class="comment">// 其他n-1个阶段</span></span><br><span class="line">   <span class="keyword">for</span>(j=<span class="number">1</span>; j&gt;=f(i); j=j+<span class="number">1</span>)<span class="comment">//f(i)与i有关的表达式</span></span><br><span class="line">     xi[j]=j=max（或min）&#123;g(xi-<span class="number">1</span>[j1:j2]), ......, g(xi-<span class="number">1</span>[jk:jk+<span class="number">1</span>])&#125;;</span><br><span class="line"></span><br><span class="line">t = g(x1[j1:j2]); <span class="comment">// 由子问题的最优解求解整个问题的最优解的方案</span></span><br><span class="line"></span><br><span class="line">print(x1[j1]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">2</span>; i&lt;=n-<span class="number">1</span>; i=i+<span class="number">1</span>）</span><br><span class="line">&#123;  </span><br><span class="line">     t = t-xi-<span class="number">1</span>[ji];</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span>(j=<span class="number">1</span>; j&gt;=f(i); j=j+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span>(t=xi[ji])</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="贪心算法"><a class="markdownIt-Anchor" href="#贪心算法"></a> 贪心算法</h1>
<p><font size = 5>1. 基本概念：</font></p>
<p>​     所谓贪心算法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的局部最优解。</p>
<p>​     贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。</p>
<p>​    所以对所采用的贪心策略一定要仔细分析其是否满足无后效性。</p>
<hr />
<p><font size = 5>2. 贪心算法的基本思路：</font></p>
<p>​    1.建立数学模型来描述问题。</p>
<p>​    2.把求解的问题分成若干个子问题。</p>
<p>​    3.对每一子问题求解，得到子问题的局部最优解。</p>
<p>​    4.把子问题的解局部最优解合成原来解问题的一个解。</p>
<hr />
<p><font size = 5>3. 贪心算法适用的问题</font></p>
<p>​      <strong>贪心策略适用的前提是：局部最优策略能导致产生全局最优解。</strong></p>
<p>​    <strong>实际上，贪心算法适用的情况很少。一般，对一个问题分析是否适用于贪心算法，可以先选择该问题下的几个实际数据进行分析，就可做出判断。</strong></p>
<hr />
<p><font size = 5>4. 贪心算法的实现框架</font></p>
<p>​    从问题的某一初始解出发；</p>
<p>​    while （能朝给定总目标前进一步）</p>
<p>​    {</p>
<p>​          利用可行的决策，求出可行解的一个解元素；</p>
<p>​    }</p>
<p>​    由所有解元素组合成问题的一个可行解；</p>
<hr />
<p><font size = 5>5. 贪心策略的选择</font></p>
<p>​     因为用贪心算法只能通过解局部最优解的策略来达到全局最优解，因此，一定要注意判断问题是否适合采用贪心算法策略，找到的解是否一定是问题的最优解。</p>
<hr />
<p><font size = 5>6. 例题分析</font></p>
<p>​    下面是一个可以试用贪心算法解的题目，贪心解的确不错，可惜不是最优解。</p>
<p>​    [背包问题]有一个背包，背包容量是M=150。有7个物品，物品可以分割成任意大小。</p>
<p>​    要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。</p>
<p>​    物品 A B C D E F G</p>
<p>​    重量 35 30 60 50 40 10 25</p>
<p>​    价值 10 40 30 50 35 40 30</p>
<p>​    分析：</p>
<p>​    目标函数： ∑pi最大</p>
<p>​    约束条件是装入的物品总重量不超过背包容量：∑wi&lt;=M( M=150)</p>
<p>​    （1）根据贪心的策略，每次挑选价值最大的物品装入背包，得到的结果是否最优？</p>
<p>​    （2）每次挑选所占重量最小的物品装入是否能得到最优解？</p>
<p>​    （3）每次选取单位重量价值最大的物品，成为解本题的策略。</p>
<p>​    值得注意的是，贪心算法并不是完全不可以使用，贪心策略一旦经过证明成立后，它就是一种高效的算法。</p>
<p>​    贪心算法还是很常见的算法之一，这是由于它简单易行，构造贪心策略不是很困难。</p>
<p>​    可惜的是，它需要证明后才能真正运用到题目的算法中。</p>
<p>​    一般来说，贪心算法的证明围绕着：整个问题的最优解一定由在贪心策略中存在的子问题的最优解得来的。</p>
<p>​    对于例题中的3种贪心策略，都是无法成立（无法被证明）的，解释如下：</p>
<p>​    （1）贪心策略：选取价值最大者。反例：</p>
<p>​    W=30</p>
<p>​    物品：A B C</p>
<p>​    重量：28 12 12</p>
<p>​    价值：30 20 20</p>
<p>​    根据策略，首先选取物品A，接下来就无法再选取了，可是，选取B、C则更好。</p>
<p>​    （2）贪心策略：选取重量最小。它的反例与第一种策略的反例差不多。</p>
<p>​    （3）贪心策略：选取单位重量价值最大的物品。反例：</p>
<p>​    W=30</p>
<p>​    物品：A B C</p>
<p>​    重量：28 20 10</p>
<p>​    价值：28 20 10</p>
<p>​    根据策略，三种物品单位重量价值一样，程序无法依据现有策略作出判断，如果选择A，则答案错误。</p>
<hr />
<h1 id="回溯法"><a class="markdownIt-Anchor" href="#回溯法"></a> 回溯法</h1>
<p><font size = 5>1. 概念</font></p>
<p>​      回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。</p>
<p>回溯法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p>
<p>​     许多复杂的，规模较大的问题都可以使用回溯法，有“通用解题方法”的美称。</p>
<hr />
<p><font size = 5>2. 基本思想</font></p>
<p>在包含问题的所有解的解空间树中，按照<strong>深度优先搜索的策略</strong>，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果该结点不包含问题的解，则逐层向其祖先结点回溯。（其实回溯法就是对隐式图的深度优先搜索算法）。</p>
<p>​       若用回溯法求问题的所有解时，要回溯到根，且根结点的所有可行的子树都要已被搜索遍才结束。</p>
<p>​       而若使用回溯法求任一个解时，只要搜索到问题的一个解就可以结束。</p>
<hr />
<p><font size = 5>3. 用回溯法解题的一般步骤：</font></p>
<p>​    （1）针对所给问题，确定问题的解空间：</p>
<p>​            首先应明确定义问题的解空间，问题的解空间应至少包含问题的一个（最优）解。</p>
<p>​    （2）确定结点的扩展搜索规则</p>
<p>​    （3）以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索。</p>
<hr />
<p><font size = 5>4. 算法框架</font></p>
<p>​     （1）问题框架</p>
<p>​      设问题的解是一个n维向量(a1,a2,………,an),约束条件是ai(i=1,2,3,……,n)之间满足某种条件，记为f(ai)。</p>
<p>​     （2）非递归回溯框架</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[n],i;</span><br><span class="line">初始化数组a[];</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (i&gt;<span class="number">0</span>(有路可走)   and  (未达到目标))  <span class="comment">// 还未回溯到头</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(i &gt; n)                                              <span class="comment">// 搜索到叶结点</span></span><br><span class="line">     &#123;   </span><br><span class="line">           搜索到一个解，输出；</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">else</span>                                                   <span class="comment">// 处理第i个元素</span></span><br><span class="line">     &#123; </span><br><span class="line">           a[i]第一个可能的值；</span><br><span class="line">           <span class="keyword">while</span>(a[i]在不满足约束条件且在搜索空间内)</span><br><span class="line">           &#123;</span><br><span class="line">               a[i]下一个可能的值；</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(a[i]在搜索空间内)</span><br><span class="line">          &#123;</span><br><span class="line">               标识占用的资源；</span><br><span class="line">               i = i+<span class="number">1</span>;                              <span class="comment">// 扩展下一个结点</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> </span><br><span class="line">         &#123;</span><br><span class="line">               清理所占的状态空间；            <span class="comment">// 回溯</span></span><br><span class="line">               i = i –<span class="number">1</span>; </span><br><span class="line">          &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>3）递归的算法框架</p>
<p>​         回溯法是对解空间的深度优先搜索，在一般情况下使用递归函数来实现回溯法比较简单，其中i为搜索的深度，框架如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[n];</span><br><span class="line"><span class="keyword">try</span>(<span class="type">int</span> i)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;n)</span><br><span class="line">       输出结果;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">for</span>(j = 下界; j &lt;= 上界; j=j+<span class="number">1</span>)  <span class="comment">// 枚举i所有可能的路径</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="keyword">if</span>(fun(j))                 <span class="comment">// 满足限界函数和约束条件</span></span><br><span class="line">             &#123;</span><br><span class="line">                a[i] = j;</span><br><span class="line">              ...                         <span class="comment">// 其他操作</span></span><br><span class="line">                <span class="keyword">try</span>(i+<span class="number">1</span>);</span><br><span class="line">              回溯前的清理工作（如a[i]置空值等）;</span><br><span class="line">              &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h1 id="分支限界法"><a class="markdownIt-Anchor" href="#分支限界法"></a> 分支限界法</h1>
<p><font size = 5>1. 基本描述</font></p>
<p>​    类似于回溯法，也是一种在问题的解空间树T上搜索问题解的算法。但在一般情况下，分支限界法与回溯法的求解目标不同。<strong>回溯法的求解目标是找出T中满足约束条件的所有解</strong>，而<strong>分支限界法</strong>的求解目标则是找出<strong>满足约束条件的一个解</strong>，或是在满足约束条件的解中找出使某一目标函数值达到<strong>极大或极小的解</strong>，即在某种意义下的<strong>最优解</strong>。</p>
<p><strong>（1）分支搜索算法</strong></p>
<p>​    所谓“分支”就是采用广度优先的策略，依次搜索E-结点的所有分支，也就是所有相邻结点，抛弃不满足约束条件的结点，其余结点加入活结点表。然后从表中选择一个结点作为下一个E-结点，继续搜索。</p>
<p>​     选择下一个E-结点的方式不同，则会有几种不同的分支搜索方式。</p>
<p>1）FIFO搜索</p>
<p>2）LIFO搜索</p>
<p>3）优先队列式搜索</p>
<p><strong>（2）分支限界搜索算法</strong></p>
<hr />
<p><font size = 5>2. 分支限界法的一般过程</font></p>
<p>​    由于求解目标不同，导致分支限界法与回溯法在解空间树T上的搜索方式也不相同。<strong>回溯法以深度优先的方式搜索解空间树T</strong>，而<strong>分支限界法则以广度优先或以最小耗费优先的方式搜索解空间树T</strong>。</p>
<p>​    分支限界法的<strong>搜索策略是</strong>：在扩展结点处，先生成其所有的儿子结点（分支），然后再从当前的活结点表中选择下一个扩展对点。为了有效地选择下一扩展结点，以加速搜索的进程，在每一活结点处，计算一个函数值（限界），并根据这些已计算出的函数值，从当前活结点表中选择一个最有利的结点作为扩展结点，使搜索朝着解空间树上有最优解的分支推进，以便尽快地找出一个最优解。</p>
<p>​    分支限界法常以广度优先或以最小耗费（最大效益）优先的方式搜索问题的解空间树。问题的<strong>解空间树是表示问题解空间的一棵有序树，常见的有子集树和排列树</strong>。在搜索问题的解空间树时，分支限界法与回溯法对当前扩展结点所使用的扩展方式不同。在分支限界法中，每一个活结点只有一次机会成为扩展结点。活结点一旦成为扩展结点，就一次性产生其所有儿子结点。在这些儿子结点中，那些导致不可行解或导致非最优解的儿子结点被舍弃，其余儿子结点被子加入活结点表中。此后，从活结点表中取下一结点成为当前扩展结点，并重复上述结点扩展过程。这个过程一直持续到找到所求的解或活结点表为空时为止。</p>
<hr />
<p><font size = 5>3. 回溯法和分支限界法的一些区别</font></p>
<p>​    有一些问题其实无论用回溯法还是分支限界法都可以得到很好的解决，但是另外一些则不然。也许我们需要具体一些的分析——到底何时使用分支限界而何时使用回溯呢？</p>
<p>回溯法和分支限界法的一些区别：</p>
<p>方法对解空间树的搜索方式       存储结点的常用数据结构      结点存储特性常用应用</p>
<p>回溯法深度优先搜索堆栈活结点的所有可行子结点被遍历后才被从栈中弹出找出满足约束条件的所有解</p>
<p>分支限界法广度优先或最小消耗优先搜索队列、优先队列每个结点只有一次成为活结点的机会找出满足约束条件的一个解或特定意义下的最优解</p>
]]></content>
      <categories>
        <category>算法学习</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关系模式范式分解教程（3NF与BCNF口诀）</title>
    <url>/posts/6244050a.html</url>
    <content><![CDATA[<p>转载自：<a href="https://www.cnblogs.com/kungfupanda/p/12362163.html">https://www.cnblogs.com/kungfupanda/p/12362163.html</a></p>
<p>【通俗易懂】关系模式范式分解教程 3NF与BCNF口诀!小白也能看懂</p>
<hr />
<h2 id="1-在模式分解之前首先对于1nf2nf3nfbcnf做一个简明扼要的介绍"><a class="markdownIt-Anchor" href="#1-在模式分解之前首先对于1nf2nf3nfbcnf做一个简明扼要的介绍"></a> 1. 在模式分解之前，首先对于1NF,2NF,3NF,BCNF做一个简明扼要的介绍。</h2>
<p>1NF是指数据库表的每一列都是不可分割的基本数据项，即实体中的某个属性不能有多个值或者不能有重复的属性。</p>
<p>2NF要求属性完全依赖于主键，不能存在仅依赖主关键字一部分的属性。</p>
<span id="more"></span>
<p>3NF要求每一个非主属性既不部分依赖于码也不传递依赖于码。</p>
<p>BCNF消除了主属性对候选码的部分和传递函数依赖。</p>
<br/>
<blockquote>
<p><font color = red size = 4>注：</font></p>
<ol>
<li>
<p>相对于BCNF，3NF允许存在主属性对候选码的传递依赖和部分依赖。</p>
</li>
<li>
<p>BCNF比较抽象，略作解释：在学生信息表里，学号是一个候选码，学号可确定学生姓名；(班级,学生姓名）也是一组候选码，有(班级,学生姓名）-&gt; 学号，因此在主属性间形成了传递依赖。</p>
</li>
<li>
<p>若对概念不清晰，关于码、候选码、主属性、非主属性的解释可参看：</p>
<p><a href="https://blog.csdn.net/sumaliqinghua/article/details/85872446#commentBox">https://blog.csdn.net/sumaliqinghua/article/details/85872446#commentBox</a></p>
</li>
</ol>
</blockquote>
<br/>
<h2 id="2-我们的重点是讲解范式分解"><a class="markdownIt-Anchor" href="#2-我们的重点是讲解范式分解"></a> 2. 我们的重点是讲解范式分解：</h2>
<h3 id="一-3nf分解"><a class="markdownIt-Anchor" href="#一-3nf分解"></a> 一、3NF分解</h3>
<p>分为保持依赖和无损连接</p>
<p>为了说明求解保持依赖，我们先要会求最小依赖集</p>
<h4 id="1最小依赖集求法"><a class="markdownIt-Anchor" href="#1最小依赖集求法"></a> （1）最小依赖集求法：</h4>
<blockquote>
<p><font color = red size = 4>口诀：</font></p>
<p><font color = green>右侧先拆单，依赖依次删。</font></p>
<p><font color = green>还原即可删，再拆左非单。</font></p>
</blockquote>
<p>通过求下面的最小依赖集对口诀进行解释。</p>
 <br/>
<h4 id="23nf分解"><a class="markdownIt-Anchor" href="#23nf分解"></a> （2）3NF分解：</h4>
<blockquote>
<p><font color = red size = 4>口诀：</font></p>
<p><font color = green>保函依赖分解题，先求最小依赖集。</font></p>
<p><font color = green>依赖两侧未出现，分成子集放一边，剩余依赖变子集。</font></p>
<p><font color = green>若要连接成无损，再添候选做子集。</font></p>
</blockquote>
<p><br/>下面通过几道例题讲解口诀：</p>
<p><font color = blue>例1.已知R(ABCDE), F = {A -&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A}，求保持函数依赖的3NF分解，和具有无损连接性及保持函数依赖的3NF分解</font></p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第一步</span>：保函依赖分解题，先求最小依赖集。先求出R的最小依赖集，可得F<sub>m</sub> = {A -&gt;D,E-&gt;D,D-&gt;B,BC-&gt;D,DC-&gt;A}</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第二步</span>：依赖两侧未出现，分成子集放一边。首先可以发现没有不出现在两侧的元素不用单独分出一个子集，“剩余依赖变子集”然后我们将各依赖分别划分为子集得到：{AD}，{ED}，{DB}，{BCD}，{DCA}，即为所求保持函数依赖的3NF分解</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第三步</span>：若要连接成无损，再添候选做子集。</p>
<p>(1) 候选码的求解：所谓候选码即能决定整个关系的，我们通过找未出现在依赖右边的和两侧均未出现的元素即可求得，</p>
<p>(2) 可以发现CE未出现在右边，因此候选码为{CE}。故所求具有无损连接性及保持函数依赖的3NF分解为{AD}，{ED}，{DB}，{BCD}，{DCA}，{CE}</p>
 <br/>
<p><font color = blue>例2.关系模式R，有U={A,B,C,D,E,G}，F={B-&gt;G,CE-&gt;B,C-&gt;A,CE-&gt;G,B-&gt;D,C-&gt;D}，将关系模式分解为3NF且保持函数依赖</font></p>
<p>将关系模式分解为3NF且保持函数依赖：</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第一步</span>：保函依赖分解题，先求最小依赖集。先求出R的最小依赖集，</p>
<p>假设B-&gt;G冗余，则(B)<sup>+</sup> = BD，没有G故不冗余。</p>
<p>假设CE-&gt;B冗余，则(CE)<sup>+</sup> = CEGDA，没有B故不冗余。</p>
<p>假设C-&gt;A冗余，则( C )<sup>+</sup> = CD，故不冗余。</p>
<p>一次可以得到最小函数依赖集F<sub>m</sub> = {B-&gt;G,CE-&gt;B,C-&gt;A,B-&gt;D,C-&gt;D}</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第二步</span>：依赖两侧未出现，分成子集放一边，剩余依赖变子集。首先可以发现没有不出现在两侧的元素，然后我们将各依赖分别划分为子集得{BG}，{CEB}，{CA}，{BD}，{CD}，即为所求保持函数依赖的3NF分解</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第三步</span>：若要连接成无损，再添候选做子集。找到R的一个候选码为{ACE}。故所求具有无损连接性及保持函数依赖的3NF分解为{BG}，{CEB}，{CA}，{BD}，{CD}，{ACE} (注：范式分解并不唯一，正确即可)</p>
 <br/>
<h3 id="二-bcnf分解"><a class="markdownIt-Anchor" href="#二-bcnf分解"></a> 二、BCNF分解：</h3>
<p>将关系模式R&lt;U,F&gt;分解为一个BCNF的基本步骤是：</p>
<blockquote>
<p><font color = green>1）先求最小依赖集，候码非码成子集</font></p>
<p><font color = green>2）余下左侧全候码，完成BCNF题。</font></p>
</blockquote>
<br/>
<p><font color = blue>例.关系模式R,有U={A,B,C,D,E,G}，F={B-&gt;G,CE-&gt;B,C-&gt;A,CE-&gt;G,B-&gt;D,C-&gt;D}，将关系模式分解为BCNF且保持函数依赖</font></p>
<p>将关系模式分解为BCNF且保持函数依赖：</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第一步</span>：先求最小依赖集。可以发现CE-&gt;G多余，因此最小依赖集为F<sub>m</sub> = {B-&gt;G,CE-&gt;B,C-&gt;A,B-&gt;D,C-&gt;D}；</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第二步</span>：候码非码成子集。由于候选码为(CE)，因此将CE-&gt;B划分出子集（BCE），而B-&gt;G，B-&gt;D左侧均不含主属性C、E中的任何一个，故划分出(BG)，(BD）；</p>
<p><span style="background: linear-gradient(to right, #74ebd5, #acb6e5);">第三步</span>：此时剩余依赖F’ = {C-&gt;A，C-&gt;D}，剩余元素{A,C,D}，检查发现函数依赖左侧都是候选码（<span style="background: linear-gradient(to right, #f2994a, #f2c94c);">新的依赖F’的候选码</span>），即完成BCNF分解，如果不满足则继续分解余下的；</p>
<p>于是BCNF分解的最后结果为{(BG)，(BD)，(ACD)，(BCE)}。</p>
<br/>
<h3 id="三-总结"><a class="markdownIt-Anchor" href="#三-总结"></a> 三、总结</h3>
<p>1.闭包</p>
<p>2.候选码</p>
<p>3.最小依赖集</p>
<p>4.3NF分解</p>
<p>5.BCNF分解</p>
]]></content>
      <categories>
        <category>数据库基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>考研</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>职场工作效率手册</title>
    <url>/posts/efadcc2c.html</url>
    <content><![CDATA[<h1 id="任务管理"><a class="markdownIt-Anchor" href="#任务管理"></a> 任务管理</h1>
<blockquote>
<p>处理任务的流程：收集、厘清、整理、执行、回顾<br />
现代任务管理工具：所有任务管理软件都在用一个体系，称之为LTF体系，List-Tag-Filter。<br />
基础任务管理工具只有列表这个功能，高级任务管理工具会包括LTF三个功能，如全平台的Todoist，苹果平台的2Do、Omnifocus等等。<br />
List是一层一层嵌套的，通过列表来组织任务，不断拆分，直到拆分到每一个具体的任务。列表用来确定一个东西的位置，而Tag用来表示一个任务的属性。标签在任务管理工具里可以横跨列表。Tag可以包括时间、优先级、人物，一个比较有趣的思路是用精力来做标签，我们可以把精力分为两档，“Focus”和“Brain Dead”。Filter是过滤，表示通过一定的条件，把我们需要的东西从一大堆信息中筛选出来。</p>
</blockquote>
<span id="more"></span>
<hr />
<h1 id="文件管理"><a class="markdownIt-Anchor" href="#文件管理"></a> 文件管理</h1>
<blockquote>
<p>初步整理：1. 给文件取个好名字，下载到桌面时随手给它们起一个看得懂的名字，从源头上解决文件名问题。2. 做好关联和归档。在使用中有意识的把相关的文件放在一起，便于对整体做进一步的操作。同时把过期的文件进行归档，保持桌面整洁。</p>
<p>高效管理：macOS的标签可以将同类型的文件跨越文件夹聚集起来，Windows中的库则可以把不同文件夹聚集在一起。最后达到的效果是一样的。标签可以分为两类：1. 为文件定性，如文档、素材、图片等 2. 另一类是临时性的标签，如正在处理、待归档、待完善等。</p>
<p>深度整理：文件夹的层级最好不要多于三层，过于详尽的分类会消磨整理的想法。宁愿多建一些文件夹，也不要建立第四第五层文件夹。</p>
<p>归档和备份：将那些不再常用的文件夹整理归类，挑出对将来有参考价值的文件，进行统一归档。将三种类型的文件删除节约硬盘空间：没有保留价值的文件、可以轻易从网上下载到的文件、已过期或者有实效性的文件。</p>
</blockquote>
<hr />
<h1 id="邮件处理"><a class="markdownIt-Anchor" href="#邮件处理"></a> 邮件处理</h1>
<blockquote>
<p>要使用正式的邮箱名，不要用qq或者数字作为邮箱注册名，很不友好。对外展示的名字（正文上方显示的发件人名字）一般取个人姓名，如果岗位涉及到频繁对外沟通，可以加上公司的名字方便别人辨认。</p>
<p>正确使用cc和bcc：cc是抄送，cc里面人名的程度是知情，而不需要做什么实质性回复。bcc是密送，每一个被密送的人，都会觉得这封邮件是单独发给他们的。如果刚到公司对组织架构和相关人员情况不是特别了解，不知道需要抄送哪些人的时候可以直接问上级。</p>
<p>写邮件的规范：<br />
邮件正文一定要对收件人友好，倡导ABC法则，先写Action，你希望收件人做什么事情，一句话总结出来。再写Background，背景情况，向对方解释一些执行细节或者前因后果。最后是Close，写一两句简短的客套话、礼貌用语，也可以适当放一些相关联系人，比如那件事情要了解详情的话找谁。<br />
邮件标题一般是Action的精简版，也可以在最前方加上[通知]、[信息]、[请求]两三个字标记一下类型。<br />
写邮件的顺序：先贴附件、再写正文、再写标题，最后放收件人。先把附件放进来，为了防止最后忘记贴附件，如果有多个附件，可以在文件前面加上附件1、附件2这样的命名，可以在写正文的时候方便对应上。正文写好后再去归纳总结标题。<br />
附件如果是excel这种对手机不友好的文件，有义务在邮件正文中简要说明一下附件当中可能最需要对方关注的重点；如一个ppt可以把最重要的几页截图粘在正文中，或者考虑单独再存一个pdf文件，不然有的时候手机端打开ppt查看格式会乱掉。</p>
<p>如何使用自动回复：适时且适当。比如休假过程中告知对方现在不会像平时工作一样马上查阅邮件。自动回复应该说明两件事情：如果对方很急可以临时先联系谁，如果不是很急自己什么时候可以回复（什么时候结束休假）。</p>
<p>整理邮箱的步骤：用处理任务的思路处理邮件。</p>
</blockquote>
<hr />
<h1 id="思维导图"><a class="markdownIt-Anchor" href="#思维导图"></a> 思维导图</h1>
<blockquote>
<p>利用思维导图可以尽可能去掉实际内容之外的装饰，把知识的骨架提取出来，另外除了学习外部的知识之外，思维导图还能够帮助你更好地把自己的想法表达出来。</p>
<p>相比于大纲和鱼骨图等其他关系图，思维导图更符合大脑的思维方式（发散性思维方式）。思维导图的重要功能是帮助自己回忆起整体的信息，用分支来表达逻辑关系，只在节点处保留关键文字信息。</p>
<p>常见思维导图的误区：1. 文本不够精炼，从而降低了思维导图的效率。2. 单调，图像记忆是思维导图的一个重要功能，尽量让作品好看一些，使用线条的时候有组织的基础上使用多种颜色。</p>
<p>思维导图工具推荐：MindNode，是Mac上最广泛使用的思维导图软件，其他平台推荐XMind跨平台。</p>
</blockquote>
<hr />
<h1 id="密码管理"><a class="markdownIt-Anchor" href="#密码管理"></a> 密码管理</h1>
<blockquote>
<p>使用密码管理工具管理密码，每个软件的密码应该不相同且具有一定复杂性，最好是数字、英文、符号混在一起，不要使用WiFi密码工具，甚至不要使用公共场所的WiFi。使用1password,LastPass管理密码。</p>
</blockquote>
<hr />
<h1 id="信息摄取"><a class="markdownIt-Anchor" href="#信息摄取"></a> 信息摄取</h1>
<blockquote>
<p>信息源的控制：明确目标，优化信息源的质量，一个信息的半衰期越久、稀缺程度越高，能带来的价值也就越大。要掌握对信息源的掌控主动权，不应该简简单单把这个权力交出去，想想应该用什么搜索引擎，不能把选择权交给浏览器的默认设置。警惕回声效应：你关注的人、认同的观点，慢慢会收拢成一个圈子，信息就像回声一样在这里传播，外面的信息就进不来了，甚至你也没有办法认同和接收不一样的观点了。这是一件很危险的事情。在获取信息的时候，一定要从多个角度、正面反面的、不同利益方的视角来摄取。</p>
<p>处理网络信息的核心能力：速读，逐渐锻炼自己的大脑，通过对关键词的出现频率和稀缺程度，来判断内容的重要性。溯源，需要一个稍后阅读的枢纽，将不通的内容都集合起来统一阅读。要知道自己为什么当时觉得重要，保留原信息的原始链接很重要，因为很多时候收集下来的内容，一段时间后回顾的时候已经想不起来到底为什么重要、值得收集下来了。吸收，收集到笔记里的重要信息，应该养成习惯，用自己的语法去重新整理，这样才能真正的吸收。</p>
</blockquote>
<hr />
<h1 id="pdf取代纸质文档"><a class="markdownIt-Anchor" href="#pdf取代纸质文档"></a> PDF取代纸质文档</h1>
<blockquote>
<p>PDF的优势：便携性、可搜索性、自动归纳笔记。<br />
利用标签整理PDF可以同时应用多套分类方式，更方便的是可以打破文件夹的限制，透过标签来查找文件。</p>
<p>高效使用PDF：</p>
<ol>
<li>利用书签和大纲快速定位内容所在位置。</li>
<li>高光和下划线，高光更适合用来标注文档中的关键词和单句，例如专有名词、或者对段落含义有决定性影响的句子。下划线更适合对文档中的关键段落进行标注，例如文章中结论性的段落。</li>
<li>制定自己的颜色体系，提升自己标注PDF时候的效率。</li>
<li>笔记和批注，只有你希望添加或者修改文档中的内容时，采取使用手写笔记功能。例如在批改或者审核文档，使用手写笔迹就能清晰直接的指出确切位置和内容。当作为学习者的角色阅读文档的时候，要记下自己的感悟，应该使用阅读器的批注功能，这种批注通过键盘添加，内容可以隐藏起来。</li>
</ol>
</blockquote>
<hr />
<h1 id="学会记账"><a class="markdownIt-Anchor" href="#学会记账"></a> 学会记账</h1>
<blockquote>
<p>月光如何形成：你不知道你有多少钱，你不知道你的钱都花到哪里去了。</p>
<p>预算能做的只是提醒，在你不理性的状态下提醒你：如果你能做到理性消费，在当下这个场景中你应该花多少钱。</p>
</blockquote>
<hr />
<h1 id="理财"><a class="markdownIt-Anchor" href="#理财"></a> 理财</h1>
<blockquote>
<p>职场新人更应该理财，刚刚开始工作的毕业生往往会以没钱可理财来拒绝学习理财。刚刚参加工作时，是开始理财的最佳阶段。收入刚刚增加，消费水平还没收水涨船高之前，可以把握理财机会，快速积累本金。</p>
<p>理财技能的高低不在于理财能产生多少收入，而在于理财的收益率，这是百分比，与本金无关。理财技能的提升需要几年时间，新手需要试错，如果现在不早早开始，等到你有钱了，想理财也无从下手了。</p>
<p>理财就是一种奋斗，虽然它周期较长，要十年甚至几十年才能看到成效，但是一旦理财初具规模，进入快车道，后面的增长速度绝对是普通工作望尘莫及的。理财开始得早，后面才能享受到快速增长的价值。</p>
<p>过早买房其实是你投资的一个障碍，不是说房子不重要，而是说要考虑清楚再下手，工作前几年是快速积累资本的时期，一套房子入手可能多年的资本积累一下子就烟消云散了。一套房子从使用角度来看，值不值的关键因素在于房价和房租的比例，买房不应该是一种约定俗成的习惯，而应该是深思熟虑后的决定。理财的目标是实现真正的财务自由。</p>
<p>资产与负债很容易搞混，自住的房子和自用的车子不能算资产，因为几乎不会主动变卖，房子和车子无法产生收益，只会产生越来越多的开支，所以他们都是负债。</p>
<p>理财：投资产品之前先投资自己。以证券投资这个话题为例，吃透十几本经典，基本就可以立于不败之地。用时间来抵消波动的不利。投资亏损实际上就是波动也的一种表现形式，能接受越高的波动性，才可能获得越高的收益。</p>
<p>保险：配置保险是理财不可缺失的一环。头号大坑是返还型保险。过分追求高保额是保险的另一个常见误区，保额要合理才有意义。低保额的保险尽可能回避。</p>
</blockquote>
<hr />
<h1 id="记录灵感"><a class="markdownIt-Anchor" href="#记录灵感"></a> 记录灵感</h1>
<blockquote>
<p>灵感是想要创作时的素材和数据来源，《程序员的思维修炼》这本书里说：</p>
<p>“每个人——不论教育背景、经济状况如何。不论日常工作是什么，不论年龄大小——都有好想法。但是在这么多拥有好想法的人里面，只有少数人在努力追踪它们。而其中，又只有更少数人会努力付诸行动。随后，仅有少之又少的人有能力将好想法成功实现。”</p>
<p>智能设备相对于纸笔记录有很大的优势：如信息多元化，可以图片链接等复杂内容。便携性，同步等。</p>
<p>笔记工具的要求：第一个基本要求就是打开软件能不能最快地新建一个笔记。市面上很多软件都做不到这一点，打开来需要同步，有的还有启动广告。打开完想记什么早就忘了。第二点是应该能人让你对笔记进行整理。要有文件夹、标签、搜索语法、最近使用、收藏、置顶等功能。有的一些人需要笔记软件支持Markdown。</p>
</blockquote>
]]></content>
      <categories>
        <category>工作效率</category>
      </categories>
      <tags>
        <tag>职场</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Kindle电子书&quot;暂无图片&quot;问题及RSS订阅推送</title>
    <url>/posts/e1208bda.html</url>
    <content><![CDATA[<p><img data-src="https://image.zxkidea.top/blog/20220613/qhzXBfoA2z7E.png?imageslim" alt="rocky" /></p>
<p>最近，亚马逊为 Kindle 添加了一个给大家添堵的功能，那就是，把通过 USB 拷贝到 Kindle 的电子书封面/缩略图显示成了带有“暂无图片”字样的图片占位符。</p>
<br />
<p>以往仅显示电子书标题的图片占位符，虽然没有真正的封面那样美观，但至少能让人分辨是哪一本书，而新图片占位符则是无法分辨到底想要看哪一本书，要找一本想看的书就像开盲盒一样。</p>
<span id="more"></span>
<p><img data-src="https://image.zxkidea.top/blog/20220613/XI5XTk2MHuDU.png?imageslim" alt="rocky" /></p>
<br/>
<h2 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h2>
<p>Kindle 电子书有多种类型，它们被标记在电子书文件的 <code>EXTH</code> 信息头[<a href="https://bookfere.com/post/986.html#footnote-1">1]</a>中，即类型为 <code>501</code> 名为 CDE Type 的记录。该记录常见的值有 <code>PDOC</code>（代表个人文档）、<code>EBOK</code>（代表电子书）及 <code>EBSP</code>（代表电子书样章）。</p>
<br/>
<p>通常，我们通过 <a href="https://bookfere.com/post/92.html">KindleGen</a> 转换成 MOBI 格式的电子书文件，以及邮箱推送到 Kindle 个人文档服务的文件会被标记为 <code>PDOC</code>，从 Kindle 电子书商店购买的电子书、或通过 Calibre 转换的 AZW3 电子书格式会被标记为 <code>EBOK</code>，而向 Kindle 发送的电子书样章会被标记为 <code>EBSP</code>。</p>
<br/>
<p>对于不同的电子书类型，Kindle 可能会采用不同的处理机制，比如本文讨论的封面被替换成“暂无图片”图片占位符的问题，就是针对标记为 <code>EBOK</code> 的电子书文件的。当这种类型的电子书放入 Kindle 设备中，一旦联网，Kindle 在确认是 <code>EBOK</code> 类型的电子书文件后，就会尝试读取另一个类型为 <code>113</code>（或 <code>504</code>）名为<code> ASIN</code>[<a href="https://bookfere.com/post/986.html#footnote-2">2]</a> 的记录，一旦发现该记录的值与亚马逊商品的唯一识别码不匹配，该电子书的封面就会被替换成带有“暂无图片”字样的图片占位符。</p>
<br/>
<h2 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h2>
<p>我这里使用的方法是，可以直接删掉电子书的 <code>EBOK</code> 记录，让 Kindle 忽略封面检查，使其显示带标题的图片占位符；也可以将 <code>ASIN</code> 更改成任一真实存在于 Kindle 商店的<code> ASIN</code>，以达到欺骗 Kindle 使其抓取与该 <code>ASIN</code> 相对应电子书的封面图片的目的。</p>
<br/>
<h3 id="1-为电子书文件指定真实的asin"><a class="markdownIt-Anchor" href="#1-为电子书文件指定真实的asin"></a> 1. 为电子书文件指定真实的ASIN</h3>
<p>主要是通过修改电子书文件 <code>EXTH</code> 信息头中 <code>501</code>、<code>113</code>、<code>504</code> 这三个记录类型来实现。</p>
<p>这里我们需要使用到名为 Mobi Metadata Editor 的小工具，Mobi Metadata Editor 是单文件程序，无需安装，下载下面的压缩包解压即可用：</p>
<p>下载地址：<a href="https://pan.baidu.com/s/1pU9jrbWa7Jw89J0Hdt1Etw?pwd=15ks">百度网盘</a>〈提取码 : 15ks〉</p>
<br/>
<p>注意！运行 Mobi Metadata Editor 需要确保你的操作系统安装了 JRE（Java Runtime Environment）或 JDK（Java Development Kit）。如已安装可略过此步，如未安装，可以在下面提供的链接中，任选其一下载安装。如果不是以 Java 开发为目的，推荐安装体积更小的 JRE。</p>
<ul>
<li><strong>JRE</strong>：<a href="https://www.java.com/en/download/">官方下载页面</a> ｜ <a href="https://java.com/en/download/manual.jsp">手动选择适用操作系统的版本</a></li>
<li><strong>JDK</strong>（Standard Edition）：<a href="http://oracle.com/java/technologies/downloads/">官方下载页面</a></li>
<li><strong>OpenJDK</strong>：<a href="http://jdk.java.net/">官方下载页面</a></li>
</ul>
<br/>
<p>双击 <strong>MobiMetaEditorV0.16.jar</strong> 启动程序，我选择一个封面失效的<code>.azw3</code>文件为例：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/Wv5FrHAW58IQ.png?imageslim" alt="rocky" /></p>
<p>此时我们发现文件的元数据中只有<code>113</code>和<code>501</code>类型的记录，<code>113</code>对应的是亚马逊 Kindle 电子书商店的电子书的 <code>ASIN</code>。我们保持 <code>501</code> 类型记录的值为 <code>EBOK</code> 不变，仅更改电子书文件的 <code>ASIN</code> 记录，这里直接修改为<strong>美亚 Kindle 电子书商店</strong>的对应电子书的<code>ASIN</code>(测试中发现中亚的部分书籍<code>ASIN</code>也不好使)，这样 Kindle 就会将商店中电子书的封面拉取下来给本地的电子书使用。</p>
<ul>
<li><strong>中亚 Kindle 电子书商店</strong>：<a href="https://www.amazon.cn/kindlestore">https://www.amazon.cn/kindlestore</a></li>
<li><strong>美亚 Kindle 电子书商店</strong>：<a href="https://www.amazon.com/kindlestore">https://www.amazon.com/kindlestore</a></li>
</ul>
<blockquote>
<p>若是发现修改<code>113</code>类型记录的值无效，则点击<code>+</code>可以添加<code>504</code>记录类型，然后将电子书商店对应电子书的<code>ASIN</code>的值添加。</p>
</blockquote>
<blockquote>
<p>注意：电子书文件的 <code>ASIN</code> 记录可能同时存在于 <code>113</code> 和 <code>504</code> 这两个记录类型中，两者至少保留一个才能生效，如果对两者同时存在，Kindle 会优先使用 <code>504</code> 的值。</p>
</blockquote>
<p><img data-src="https://image.zxkidea.top/blog/20220613/FzSJELsPL8j0.png?imageslim" alt="rocky" /></p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/M7no8A4Jt4t9.png?imageslim" alt="rocky" /></p>
<p>我这里是修改<code>113</code>记录的值无效，所以添加对应<code>504</code>记录的值，然后将修改的文件放到Kindle中，发现封面显示正常。</p>
<br/>
<h3 id="2-禁止kindle检查电子书封面"><a class="markdownIt-Anchor" href="#2-禁止kindle检查电子书封面"></a> 2. 禁止Kindle检查电子书封面</h3>
<p>如果你不在意电子书是否显示封面图片，可以接受仅带图书标题的图片占位符，则可以直接删掉 <code>501</code> 记录类型。这做法都可以禁止让 Kindle 为该电子书检查封面图片。</p>
<br/>
<h3 id="3-让-kindle-从电子书读取封面"><a class="markdownIt-Anchor" href="#3-让-kindle-从电子书读取封面"></a> 3. 让 Kindle 从电子书读取封面</h3>
<p>对于标记为个人文档的 MOBI 格式电子书，Kindle 会直接从电子书中读取封面，而不会去亚马逊服务器上对比 <code>ASIN</code>。因此可以先将电子书文件的扩展名从<code> .azw3</code> 更改为 <code>.mobi</code>（如果原来不是此格式的话），然后将电子书的 <code>501</code> 记录类型值从 <code>EBOK</code> 改为 <code>PDOC</code>。</p>
<br/>
<h2 id="rss订阅推送"><a class="markdownIt-Anchor" href="#rss订阅推送"></a> RSS订阅推送</h2>
<p>原来我使用的是Google App Engine（GAE）的方案搭建KindleEar的方式推送RSS订阅到Kindle，设置大约每周推送一次。但是，自 2019 年 11 月 30 日起，必须向 Google Cloud 的结算账户添加支持美元支付的信用卡（如 Visa、MastCard 等）才能正常使用 GAE。奈何自己没有美元结算的信用卡(╯‵□′)╯︵┻━┻，所以此推送服务就一直处于停滞中，等到工作后办一张有美元结算的信用卡在填坑把<sub>(￣▽￣)</sub>*。</p>
<br/>
<p>现在我使用<a href="https://wheremylife.cn/">WhereMyLife</a>进行RSS订阅推送，是完全免费的，站长用爱发电啊(○｀ 3′○)，希望能一直坚持下去。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/YvOUuSIbc4st.png?imageslim" alt="rocky" /></p>
<br/>
<p>我们简单进行注册之后，既可以进行推送设置了：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/WcOIF7QBy1uF.png?imageslim" alt="rocky" /></p>
<br/>
<p>绑定Kindle之后，我们需要添加你想要推送的RSS订阅源，网站提供了一些精选的RSS订阅源，你也可以根据自己的兴趣进行选择。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/FnfYLE8vKXhR.png?imageslim" alt="rocky" /></p>
<p>添加订阅源之后可以在我的订阅里进行查看：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/pHkoRuwGGefk.png?imageslim" alt="rocky" /></p>
<br/>
<p>点击“立即推送”可以推送近期文章，大约5~6分钟后在Kindle上点击同步就可以接受到推送的文章了，点开后大约是这个样子：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220613/uOA7rTmLh8Q8.png?imageslim" alt="rocky" /></p>
<br />
<p>这里，我也分享一些优秀的订阅源网站，感兴趣的也可以自建 RSSHub 服务：</p>
<ul>
<li>
<p><a href="https://docs.rsshub.app/">RSSHub</a></p>
</li>
<li>
<p><a href="https://feedx.net/">FeedX</a></p>
</li>
<li>
<p><a href="https://sebsauvage.net/rss-bridge/">RSS-bridge</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Kindle</category>
      </categories>
      <tags>
        <tag>Kindle</tag>
        <tag>RSS</tag>
      </tags>
  </entry>
  <entry>
    <title>青龙面板搭建实践——腾讯云+docker</title>
    <url>/posts/af163b37.html</url>
    <content><![CDATA[<p><em>本部署教程是在腾讯云搭载2G，2核的Ubuntu 20.04轻量级服务器上进行实现的。</em></p>
<hr />
<h2 id="安装青龙面板"><a class="markdownIt-Anchor" href="#安装青龙面板"></a> 安装青龙面板</h2>
<p>docker安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>
<br/>
<p>启动docker(第一行)，并设置docker开机自启(第二行)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<br/>
<p>拉取docker镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker pull whyour/qinglong:latest</span><br></pre></td></tr></table></figure>
<br/>
<p>进入腾讯云服务器面板，防火墙设置添加规则，开启5700端口</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/o0xcAk4Is8MO.png?imageslim" alt="rocky" /></p>
<br/>
<p>部署并启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -dit \</span><br><span class="line">-v <span class="variable">$PWD</span>/ql/config:/ql/config \</span><br><span class="line">-v <span class="variable">$PWD</span>/ql/log:/ql/log \</span><br><span class="line">-v <span class="variable">$PWD</span>/ql/db:/ql/db \</span><br><span class="line">-p 5700:5700 \</span><br><span class="line">--name qinglong \</span><br><span class="line">--hostname qinglong \</span><br><span class="line">--restart always \</span><br><span class="line">whyour/qinglong:latest</span><br></pre></td></tr></table></figure>
<br/>
<h2 id="初始化青龙面板"><a class="markdownIt-Anchor" href="#初始化青龙面板"></a> 初始化青龙面板</h2>
<p>部署完成后，直接访问<code>IP:5700</code>访问青龙面板的安装界面。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/hfMnFjfgbl4w.png?imageslim" alt="rocky" /></p>
<p>进入下一步进行通知设置，本人使用的PushPlus，进入官网扫码进行微信绑定，单人推送填入token即可。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/9YzIOMKB2pun.png?imageslim" alt="rocky" /></p>
<br/>
<p>设置管理员账号密码，之后可在系统设置的安全设置中进行更改。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/zWeNVzTTdbVI.png?imageslim" alt="rocky" /></p>
<br/>
<h2 id="安装常见依赖库"><a class="markdownIt-Anchor" href="#安装常见依赖库"></a> 安装常见依赖库</h2>
<p>为了预防后面可能发生的运行脚本的错误(回头踩坑)，先安装可能需要的依赖库。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error：Cannot find module ‘axios’</span><br></pre></td></tr></table></figure>
<br/>
<p>首先进入容器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it qinglong bash</span><br></pre></td></tr></table></figure>
<br/>
<p>安装依赖命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://ghproxy.com/https://raw.githubusercontent.com/shufflewzc/QLDependency/main/Shell/QLOneKeyDependency.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加速版：</span></span><br><span class="line">curl -fsSL https://api.dujin.org/js/qinglong/qinglong-yilaiku-dujin.org.sh | sh</span><br></pre></td></tr></table></figure>
<br/>
<p>青龙面板添加依赖库：</p>
<p>首先需要安装pnpm，不然安装依赖日志可能报错。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pnpm install -g </span><br><span class="line">pnpm install -g pnpm</span><br></pre></td></tr></table></figure>
<br/>
<p>点击左侧菜单<code>依赖管理</code>，再在右上角点击<code>添加依赖</code>。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/OHouThCRDPlv.png?imageslim" alt="rocky" /></p>
<p>依赖类型分三种，分别是：NodeJs、Python3、Linux，我们分别进行添加。添加的方式非常简单，按上图所示，选择好对应的依赖类型，然后输入名称即可。</p>
<p><strong>Nodejs依赖库：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crypto-js</span><br><span class="line">prettytable</span><br><span class="line">dotenv</span><br><span class="line">jsdom</span><br><span class="line">date-fns</span><br><span class="line">tough-cookie</span><br><span class="line">tslib</span><br><span class="line">ws@7.4.3</span><br><span class="line">ts-md5</span><br><span class="line">jsdom -g</span><br><span class="line">jieba</span><br><span class="line">fs</span><br><span class="line">form-data</span><br><span class="line">json5</span><br><span class="line">global-agent</span><br><span class="line">png-js</span><br><span class="line">@types/node</span><br><span class="line">require</span><br><span class="line">typescript</span><br><span class="line">js-base64</span><br><span class="line">axios</span><br></pre></td></tr></table></figure>
<p><strong>Python3依赖库：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">requests</span><br><span class="line">canvas  </span><br><span class="line">ping3</span><br><span class="line">jieba</span><br><span class="line">aiohttp</span><br></pre></td></tr></table></figure>
<p><strong>Linux 依赖库：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bizCode</span><br><span class="line">bizMsg  </span><br><span class="line">lxml</span><br></pre></td></tr></table></figure>
<br/>
<blockquote>
<p>在青龙面板依赖库中添加后会自动执行安装，点击日志或者刷新页面可以查看是否安装成功，若安装失败可以点击重新安装。</p>
</blockquote>
<br/>
<h2 id="配置青龙面板定时任务"><a class="markdownIt-Anchor" href="#配置青龙面板定时任务"></a> 配置青龙面板定时任务</h2>
<p>部分仓库拉库前请打开青龙面板-配置文件 第18行 GithubProxyUrl=“” 双引号中的内容删除。</p>
<p>登录面板后选择<code>定时任务</code>→<code>添加任务</code>。</p>
<p>对拉库命令设置定时规则进行<code>定时拉库</code>的任务，添加任务后立即执行任务拉取仓库的脚本。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/52LWv0b62fSd.png?imageslim" alt="rocky" /></p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/AiR7iNQRQLvm.png?imageslim" alt="rocky" /></p>
<br/>
<h2 id="京东定时任务库"><a class="markdownIt-Anchor" href="#京东定时任务库"></a> 京东定时任务库</h2>
<p><strong>KingRan/KR仓库</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ql repo https://github.com/KingRan/KR.git <span class="string">&quot;jd_|jx_|jdCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>zero205/JD_tencent_scf</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ql repo https://github.com/zero205/JD_tencent_scf.git <span class="string">&quot;jd_|jx_|jdCookie&quot;</span> <span class="string">&quot;backUp|icon&quot;</span> <span class="string">&quot;^jd[^_]|USER|sendNotify|sign_graphics_validate|JDJR|JDSign|ql&quot;</span> <span class="string">&quot;main&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>gys619/Absinthe（集合库）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ql repo https://github.com/gys619/Absinthe.git <span class="string">&quot;jd_|jx_|jddj_|gua_|getJDCookie|wskey&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|utils|ZooFaker_Necklace|JDJRValidator_|sign_graphics_validate|jddj_cookie|function|ql|magic|JDJR|JD&quot;</span> <span class="string">&quot;main&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>HarbourJ/HarbourToulu</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ql repo https://github.com/HarbourJ/HarbourToulu.git <span class="string">&quot;jd_|jdCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|utils|ZooFaker_Necklace|JDJRValidator_|sign_graphics_validate|jddj_cookie|function|ql|magic|JDJR|JD|sendNotify&quot;</span> <span class="string">&quot;main&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>OKYYDS</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ql repo https://github.com/okyyds/yydspure.git <span class="string">&quot;jd_|jx_|gua_|jddj_|jdCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator&quot;</span> <span class="string">&quot;master&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>hyzaw/AllJDScripts（集合库）</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ql repo https://hub.fastgit.xyz/hyzaw/AllJDScripts.git <span class="string">&quot;jd_|jx_|jddj_|jdCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator&quot;</span> <span class="string">&quot;master&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>Fake2</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ql repo https://github.com/shufflewzc/faker3.git <span class="string">&quot;jd_|jx_|gua_|jddj_|jdCookie&quot;</span> <span class="string">&quot;activity|backUp&quot;</span> <span class="string">&quot;^jd[^_]|USER|function|utils|sendNotify|ZooFaker_Necklace.js|JDJRValidator_|sign_graphics_validate|ql|JDSignValidator|magic&quot;</span> <span class="string">&quot;main&quot;</span></span><br></pre></td></tr></table></figure>
<br/>
<h2 id="定时规则"><a class="markdownIt-Anchor" href="#定时规则"></a> 定时规则</h2>
<p>定时规则如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">秒 分 时 天 月 周</span><br></pre></td></tr></table></figure>
<p>各个单位之间分别以空格分割，假设该任务需要每天12:23:45执行一次。那么则应该这么设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">45 23 12 * * *</span><br></pre></td></tr></table></figure>
<p>拉完之后记得运行，不运行的话要等到你设置好的时间才会自动执行。运行后会自动拉去一些执行活动的脚本。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/K2pGPfDi8tIl.png?imageslim" alt="rocky" /></p>
<br/>
<h2 id="获取京东cookie"><a class="markdownIt-Anchor" href="#获取京东cookie"></a> 获取京东Cookie</h2>
<p>获取京东Cookie用于设置环境变量，浏览器直接登录<code>https://bean.m.jd.com/bean/signIndex.action</code>，并复制cookie，如下图：</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/FDmfWeAU83sw.png?imageslim" alt="rocky" /></p>
<p>找到<code>pt_key=...;pt_pin=...;</code>整体进行复制。</p>
<p>然后打开青龙面板，选择<code>环境变量</code>→<code>添加变量</code>，名称为<code>JD_COOKIE</code>，值为刚复制的京东账号<code>Cookie</code>，备注自己填方便识别，别的不需要动。添加后点<code>确定</code>就可以，如果需要添加多个账号，只需要获取多个Cookie添加上去就可以了，名称仍然为<code>JD_COOKIE</code>。</p>
<p><img data-src="https://image.zxkidea.top/blog/20220602/UrRirEU06qf3.png?imageslim" alt="rocky" /></p>
<br/>
<h2 id="开启京东游戏任务"><a class="markdownIt-Anchor" href="#开启京东游戏任务"></a> 开启京东游戏任务</h2>
<p>建议把所有活动游戏都点击一次，京东工厂这种需要自己选产品的建议自己选，不然会自动选一个，有的干脆不选。这里给大家说下各个游戏入口位置：</p>
<p>京东APP</p>
<ul>
<li>摇钱树：京东APP→右下角我的→中间更多工具</li>
<li>东东萌宠：京东APP→右下角我的</li>
<li>宠汪汪：京东APP→右下角我的</li>
<li>东东农场：京东APP→右下角我的</li>
</ul>
<p>京喜APP</p>
<ul>
<li>京喜工厂：惊喜APP→右下角我的</li>
<li>京喜牧场：惊喜APP→右下角我的</li>
<li>京喜财富岛：惊喜APP→右下角我的</li>
</ul>
<p>京东极速版</p>
<ul>
<li>发财大赢家：京东极速版→右下角我的</li>
<li>汪汪乐园：京东极速版→右下角我的</li>
</ul>
]]></content>
      <categories>
        <category>容器部署</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
